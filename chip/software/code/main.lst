ARM GAS  /tmp/ccLwwf6o.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.4.1 20160919 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./inc -imultilib armv6-m
  18              	@ -iprefix /srv/gcc-arm-none-eabi-5_4-2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/
  19              	@ -isysroot /srv/gcc-arm-none-eabi-5_4-2016q3/bin/../arm-none-eabi
  20              	@ -MD code/main.d -MF .dep/main.o.d -MP -MQ code/main.o -D__USES_INITFINI__
  21              	@ -D RUN_FROM_FLASH=1 code/main.c -mcpu=cortex-m0 -mthumb
  22              	@ -auxbase-strip code/main.o -gdwarf-2 -O0 -Wall -Wstrict-prototypes
  23              	@ -fomit-frame-pointer -fverbose-asm
  24              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  25              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  26              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  27              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  28              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  29              	@ -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
  30              	@ -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
  31              	@ -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
  32              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  33              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse
  34              	@ -flto-odr-type-merging -fmath-errno -fmerge-debug-strings
  35              	@ -fomit-frame-pointer -fpeephole -fprefetch-loop-arrays
  36              	@ -freg-struct-return -fsched-critical-path-heuristic
  37              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  38              	@ -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  39              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  40              	@ -fsemantic-interposition -fshow-column -fsigned-zeros
  41              	@ -fsplit-ivs-in-unroller -fstdarg-opt -fstrict-volatile-bitfields
  42              	@ -fsync-libcalls -ftrapping-math -ftree-coalesce-vars -ftree-cselim
  43              	@ -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  44              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  45              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  46              	@ -fzero-initialized-in-bss -mlittle-endian -mpic-data-is-text-relative
  47              	@ -msched-prolog -mthumb -mvectorize-with-neon-quad
  48              	
  49              		.text
  50              	.Ltext0:
  51              		.cfi_sections	.debug_frame
  52              		.global	OLED
  53              		.data
  54              		.align	2
  55              		.type	OLED, %object
  56              		.size	OLED, 4
  57              	OLED:
ARM GAS  /tmp/ccLwwf6o.s 			page 2


  58 0000 000000C0 		.word	-1073741824
  59              		.global	SEGMENT
  60              		.align	2
  61              		.type	SEGMENT, %object
  62              		.size	SEGMENT, 4
  63              	SEGMENT:
  64 0004 000000A0 		.word	-1610612736
  65              		.global	TIMER
  66              		.align	2
  67              		.type	TIMER, %object
  68              		.size	TIMER, 4
  69              	TIMER:
  70 0008 00000080 		.word	-2147483648
  71              		.global	SENSOR
  72              		.align	2
  73              		.type	SENSOR, %object
  74              		.size	SENSOR, 4
  75              	SENSOR:
  76 000c 00000060 		.word	1610612736
  77              		.global	BUTTON
  78              		.align	2
  79              		.type	BUTTON, %object
  80              		.size	BUTTON, 4
  81              	BUTTON:
  82 0010 00000040 		.word	1073741824
  83              		.comm	speed_red,1,1
  84              		.comm	isNight,1,1
  85              		.comm	switchDisplay,1,1
  86              		.comm	distance,4,4
  87              		.comm	speed,4,4
  88              		.comm	max_speed,4,4
  89              		.comm	total_distance,4,4
  90              		.comm	post_distance,4,4
  91              		.comm	mode,4,4
  92              		.comm	wheel,4,4
  93              		.comm	wheel_d,4,4
  94              		.comm	time,4,4
  95              		.comm	now_time,4,4
  96              		.comm	post_time,4,4
  97              		.comm	time_h,4,4
  98              		.comm	time_m,4,4
  99              		.comm	time_h_bcd,4,4
 100              		.comm	time_m_bcd,4,4
 101              		.comm	crank,4,4
 102              		.comm	bike_fork,4,4
 103              		.comm	speed_f,4,4
 104              		.comm	speed_b,4,4
 105              		.comm	speed_f_bcd,4,4
 106              		.comm	speed_b_bcd,4,4
 107              		.comm	total_distance_f,4,4
 108              		.comm	total_distance_b,4,4
 109              		.comm	total_distance_f_bcd,4,4
 110              		.comm	total_distance_b_bcd,4,4
 111              		.comm	cadence,4,4
 112              		.comm	cadence_bcd,4,4
 113              		.comm	stop_time_mode,4,4
 114              		.comm	post_fork,4,4
ARM GAS  /tmp/ccLwwf6o.s 			page 3


 115              		.comm	fork_equal,4,4
 116              		.comm	now_stop_time,4,4
 117              		.comm	post_stop_time,4,4
 118              		.comm	stop_time,4,4
 119              		.comm	store_stop_time,4,4
 120              		.text
 121              		.align	2
 122              		.global	setting
 123              		.code	16
 124              		.thumb_func
 125              		.type	setting, %function
 126              	setting:
 127              	.LFB0:
 128              		.file 1 "code/main.c"
   1:code/main.c   **** //------------------------------------------------------------------------------
   2:code/main.c   **** // Titile:  Cortex M0 Software Main C File
   3:code/main.c   **** // Author:  ChangXin Shen & Clark Pu
   4:code/main.c   **** // Team:    C4 Chip Designed
   5:code/main.c   **** // Version: 5.3
   6:code/main.c   **** // Verification: Verified SoC.
   7:code/main.c   **** // Comment: This is a test of hardware functions
   8:code/main.c   **** //------------------------------------------------------------------------------
   9:code/main.c   **** 
  10:code/main.c   **** #define __MAIN_C__
  11:code/main.c   **** #include <stdint.h>
  12:code/main.c   **** #include <stdbool.h>
  13:code/main.c   **** 
  14:code/main.c   **** //------------------------------------------------------------------------------
  15:code/main.c   **** // Hardware Address
  16:code/main.c   **** //------------------------------------------------------------------------------
  17:code/main.c   **** 
  18:code/main.c   **** #define AHB_OLEDR_MANAGER_BASE   0xC0000000
  19:code/main.c   **** #define AHB_SEGMENT_MANAGER_BASE 0xA0000000
  20:code/main.c   **** #define AHB_TIMER_BASE           0x80000000
  21:code/main.c   **** #define AHB_SENSOR_MANAGER_BASE  0x60000000
  22:code/main.c   **** #define AHB_BUTTON_MANAGER_BASE  0x40000000
  23:code/main.c   **** volatile uint32_t* OLED    = (volatile uint32_t*) AHB_OLEDR_MANAGER_BASE;
  24:code/main.c   **** // OLED[0]        X              0xC0000000
  25:code/main.c   **** // OLED[1]        Y              0xC0000004
  26:code/main.c   **** // OLED[2]        Colour         0xC0000008
  27:code/main.c   **** // OLED[3]        Flag           0xC000000A
  28:code/main.c   **** volatile uint32_t* SEGMENT = (volatile uint32_t*) AHB_SEGMENT_MANAGER_BASE;
  29:code/main.c   **** // SEGMENT[0]     Fraction       0xA0000000
  30:code/main.c   **** // SEGMENT[1]     Integer        0xA0000004
  31:code/main.c   **** // SEGMENT[2]     Mode           0xA0000008
  32:code/main.c   **** volatile uint32_t* TIMER   = (volatile uint32_t*) AHB_TIMER_BASE;
  33:code/main.c   **** // TIMER[0]       Long           0x80000000 
  34:code/main.c   **** // TIMER[1]       Short          0x80000004 
  35:code/main.c   **** // TIMER[2]       Flag           0x80000008 
  36:code/main.c   **** volatile uint32_t* SENSOR  = (volatile uint32_t*) AHB_SENSOR_MANAGER_BASE;
  37:code/main.c   **** // SENSOR[0]      Fork           0x60000000           
  38:code/main.c   **** // SENSOR[1]      Crank          0x60000004       
  39:code/main.c   **** volatile uint32_t* BUTTON  = (volatile uint32_t*) AHB_BUTTON_MANAGER_BASE;
  40:code/main.c   **** // BUTTON[0]      DayNight       0x40000000
  41:code/main.c   **** // BUTTON[1]      Mode           0x40000004
  42:code/main.c   **** // BUTTON[2]      Trip           0x40000008
  43:code/main.c   **** // BUTTON[3]      Setting        0x4000000A
ARM GAS  /tmp/ccLwwf6o.s 			page 4


  44:code/main.c   **** // BUTTON[4]      NewData        0x40000010
  45:code/main.c   **** 
  46:code/main.c   **** //------------------------------------------------------------------------------
  47:code/main.c   **** // Globle Variables
  48:code/main.c   **** //------------------------------------------------------------------------------
  49:code/main.c   **** 
  50:code/main.c   **** bool speed_red, isNight, switchDisplay;
  51:code/main.c   **** float distance, speed, max_speed, total_distance, post_distance;
  52:code/main.c   **** uint32_t mode, wheel, wheel_d;
  53:code/main.c   **** uint32_t time, now_time, post_time, time_h, time_m, time_h_bcd, time_m_bcd;
  54:code/main.c   **** uint32_t crank, bike_fork;
  55:code/main.c   **** uint32_t speed_f, speed_b, speed_f_bcd, speed_b_bcd;
  56:code/main.c   **** uint32_t total_distance_f, total_distance_b, total_distance_f_bcd, total_distance_b_bcd;
  57:code/main.c   **** uint32_t cadence, cadence_bcd;
  58:code/main.c   **** uint32_t stop_time_mode, post_fork, fork_equal, now_stop_time, post_stop_time, stop_time, store_sto
  59:code/main.c   **** 
  60:code/main.c   **** //------------------------------------------------------------------------------
  61:code/main.c   **** // Hardware Access Functions
  62:code/main.c   **** //------------------------------------------------------------------------------
  63:code/main.c   **** 
  64:code/main.c   **** bool             setting(void){return BUTTON[3]?true:false;}
 129              		.loc 1 64 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134              		.loc 1 64 0
 135 0000 044B     		ldr	r3, .L3	@ tmp115,
 136 0002 1B68     		ldr	r3, [r3]	@ D.4690, BUTTON
 137 0004 0C33     		adds	r3, r3, #12	@ D.4690,
 138 0006 1B68     		ldr	r3, [r3]	@ D.4691, *_3
 139 0008 5A1E     		subs	r2, r3, #1	@ tmp118, D.4691
 140 000a 9341     		sbcs	r3, r3, r2	@ tmp117, D.4691, tmp118
 141 000c DBB2     		uxtb	r3, r3	@ D.4692, tmp116
 142 000e 1800     		movs	r0, r3	@, <retval>
 143              		@ sp needed	@
 144 0010 7047     		bx	lr
 145              	.L4:
 146 0012 C046     		.align	2
 147              	.L3:
 148 0014 00000000 		.word	BUTTON
 149              		.cfi_endproc
 150              	.LFE0:
 151              		.size	setting, .-setting
 152              		.align	2
 153              		.global	press_trip
 154              		.code	16
 155              		.thumb_func
 156              		.type	press_trip, %function
 157              	press_trip:
 158              	.LFB1:
  65:code/main.c   **** bool          press_trip(void){return BUTTON[2]?true:false;}
 159              		.loc 1 65 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
ARM GAS  /tmp/ccLwwf6o.s 			page 5


 164              		.loc 1 65 0
 165 0018 044B     		ldr	r3, .L7	@ tmp115,
 166 001a 1B68     		ldr	r3, [r3]	@ D.4693, BUTTON
 167 001c 0833     		adds	r3, r3, #8	@ D.4693,
 168 001e 1B68     		ldr	r3, [r3]	@ D.4694, *_3
 169 0020 5A1E     		subs	r2, r3, #1	@ tmp118, D.4694
 170 0022 9341     		sbcs	r3, r3, r2	@ tmp117, D.4694, tmp118
 171 0024 DBB2     		uxtb	r3, r3	@ D.4695, tmp116
 172 0026 1800     		movs	r0, r3	@, <retval>
 173              		@ sp needed	@
 174 0028 7047     		bx	lr
 175              	.L8:
 176 002a C046     		.align	2
 177              	.L7:
 178 002c 00000000 		.word	BUTTON
 179              		.cfi_endproc
 180              	.LFE1:
 181              		.size	press_trip, .-press_trip
 182              		.align	2
 183              		.global	press_mode
 184              		.code	16
 185              		.thumb_func
 186              		.type	press_mode, %function
 187              	press_mode:
 188              	.LFB2:
  66:code/main.c   **** bool          press_mode(void){return BUTTON[1]?true:false;}
 189              		.loc 1 66 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              		@ link register save eliminated.
 194              		.loc 1 66 0
 195 0030 044B     		ldr	r3, .L11	@ tmp115,
 196 0032 1B68     		ldr	r3, [r3]	@ D.4696, BUTTON
 197 0034 0433     		adds	r3, r3, #4	@ D.4696,
 198 0036 1B68     		ldr	r3, [r3]	@ D.4697, *_3
 199 0038 5A1E     		subs	r2, r3, #1	@ tmp118, D.4697
 200 003a 9341     		sbcs	r3, r3, r2	@ tmp117, D.4697, tmp118
 201 003c DBB2     		uxtb	r3, r3	@ D.4698, tmp116
 202 003e 1800     		movs	r0, r3	@, <retval>
 203              		@ sp needed	@
 204 0040 7047     		bx	lr
 205              	.L12:
 206 0042 C046     		.align	2
 207              	.L11:
 208 0044 00000000 		.word	BUTTON
 209              		.cfi_endproc
 210              	.LFE2:
 211              		.size	press_mode, .-press_mode
 212              		.align	2
 213              		.global	press_d_mode
 214              		.code	16
 215              		.thumb_func
 216              		.type	press_d_mode, %function
 217              	press_d_mode:
 218              	.LFB3:
  67:code/main.c   **** bool        press_d_mode(void){return BUTTON[0]?true:false;}
ARM GAS  /tmp/ccLwwf6o.s 			page 6


 219              		.loc 1 67 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224              		.loc 1 67 0
 225 0048 034B     		ldr	r3, .L15	@ tmp114,
 226 004a 1B68     		ldr	r3, [r3]	@ D.4699, BUTTON
 227 004c 1B68     		ldr	r3, [r3]	@ D.4700, *_2
 228 004e 5A1E     		subs	r2, r3, #1	@ tmp117, D.4700
 229 0050 9341     		sbcs	r3, r3, r2	@ tmp116, D.4700, tmp117
 230 0052 DBB2     		uxtb	r3, r3	@ D.4701, tmp115
 231 0054 1800     		movs	r0, r3	@, <retval>
 232              		@ sp needed	@
 233 0056 7047     		bx	lr
 234              	.L16:
 235              		.align	2
 236              	.L15:
 237 0058 00000000 		.word	BUTTON
 238              		.cfi_endproc
 239              	.LFE3:
 240              		.size	press_d_mode, .-press_d_mode
 241              		.align	2
 242              		.global	check_button
 243              		.code	16
 244              		.thumb_func
 245              		.type	check_button, %function
 246              	check_button:
 247              	.LFB4:
  68:code/main.c   **** bool        check_button(void){return BUTTON[4]?true:false;}
 248              		.loc 1 68 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253              		.loc 1 68 0
 254 005c 044B     		ldr	r3, .L19	@ tmp115,
 255 005e 1B68     		ldr	r3, [r3]	@ D.4702, BUTTON
 256 0060 1033     		adds	r3, r3, #16	@ D.4702,
 257 0062 1B68     		ldr	r3, [r3]	@ D.4703, *_3
 258 0064 5A1E     		subs	r2, r3, #1	@ tmp118, D.4703
 259 0066 9341     		sbcs	r3, r3, r2	@ tmp117, D.4703, tmp118
 260 0068 DBB2     		uxtb	r3, r3	@ D.4704, tmp116
 261 006a 1800     		movs	r0, r3	@, <retval>
 262              		@ sp needed	@
 263 006c 7047     		bx	lr
 264              	.L20:
 265 006e C046     		.align	2
 266              	.L19:
 267 0070 00000000 		.word	BUTTON
 268              		.cfi_endproc
 269              	.LFE4:
 270              		.size	check_button, .-check_button
 271              		.align	2
 272              		.global	time_up
 273              		.code	16
 274              		.thumb_func
ARM GAS  /tmp/ccLwwf6o.s 			page 7


 275              		.type	time_up, %function
 276              	time_up:
 277              	.LFB5:
  69:code/main.c   **** bool             time_up(void){return  TIMER[2]?true:false;}
 278              		.loc 1 69 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 283              		.loc 1 69 0
 284 0074 044B     		ldr	r3, .L23	@ tmp115,
 285 0076 1B68     		ldr	r3, [r3]	@ D.4705, TIMER
 286 0078 0833     		adds	r3, r3, #8	@ D.4705,
 287 007a 1B68     		ldr	r3, [r3]	@ D.4706, *_3
 288 007c 5A1E     		subs	r2, r3, #1	@ tmp118, D.4706
 289 007e 9341     		sbcs	r3, r3, r2	@ tmp117, D.4706, tmp118
 290 0080 DBB2     		uxtb	r3, r3	@ D.4707, tmp116
 291 0082 1800     		movs	r0, r3	@, <retval>
 292              		@ sp needed	@
 293 0084 7047     		bx	lr
 294              	.L24:
 295 0086 C046     		.align	2
 296              	.L23:
 297 0088 00000000 		.word	TIMER
 298              		.cfi_endproc
 299              	.LFE5:
 300              		.size	time_up, .-time_up
 301              		.align	2
 302              		.global	read_time_short
 303              		.code	16
 304              		.thumb_func
 305              		.type	read_time_short, %function
 306              	read_time_short:
 307              	.LFB6:
  70:code/main.c   **** uint32_t read_time_short(void){return  TIMER[1];}
 308              		.loc 1 70 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              		.loc 1 70 0
 314 008c 024B     		ldr	r3, .L27	@ tmp114,
 315 008e 1B68     		ldr	r3, [r3]	@ D.4708, TIMER
 316 0090 0433     		adds	r3, r3, #4	@ D.4708,
 317 0092 1B68     		ldr	r3, [r3]	@ D.4709, *_3
 318 0094 1800     		movs	r0, r3	@, <retval>
 319              		@ sp needed	@
 320 0096 7047     		bx	lr
 321              	.L28:
 322              		.align	2
 323              	.L27:
 324 0098 00000000 		.word	TIMER
 325              		.cfi_endproc
 326              	.LFE6:
 327              		.size	read_time_short, .-read_time_short
 328              		.align	2
 329              		.global	read_time_long
ARM GAS  /tmp/ccLwwf6o.s 			page 8


 330              		.code	16
 331              		.thumb_func
 332              		.type	read_time_long, %function
 333              	read_time_long:
 334              	.LFB7:
  71:code/main.c   **** uint32_t  read_time_long(void){return  TIMER[0];}
 335              		.loc 1 71 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              		.loc 1 71 0
 341 009c 024B     		ldr	r3, .L31	@ tmp113,
 342 009e 1B68     		ldr	r3, [r3]	@ D.4710, TIMER
 343 00a0 1B68     		ldr	r3, [r3]	@ D.4711, *_2
 344 00a2 1800     		movs	r0, r3	@, <retval>
 345              		@ sp needed	@
 346 00a4 7047     		bx	lr
 347              	.L32:
 348 00a6 C046     		.align	2
 349              	.L31:
 350 00a8 00000000 		.word	TIMER
 351              		.cfi_endproc
 352              	.LFE7:
 353              		.size	read_time_long, .-read_time_long
 354              		.align	2
 355              		.global	read_crank
 356              		.code	16
 357              		.thumb_func
 358              		.type	read_crank, %function
 359              	read_crank:
 360              	.LFB8:
  72:code/main.c   **** uint32_t      read_crank(void){return SENSOR[1];}
 361              		.loc 1 72 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 0
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365              		@ link register save eliminated.
 366              		.loc 1 72 0
 367 00ac 024B     		ldr	r3, .L35	@ tmp114,
 368 00ae 1B68     		ldr	r3, [r3]	@ D.4712, SENSOR
 369 00b0 0433     		adds	r3, r3, #4	@ D.4712,
 370 00b2 1B68     		ldr	r3, [r3]	@ D.4713, *_3
 371 00b4 1800     		movs	r0, r3	@, <retval>
 372              		@ sp needed	@
 373 00b6 7047     		bx	lr
 374              	.L36:
 375              		.align	2
 376              	.L35:
 377 00b8 00000000 		.word	SENSOR
 378              		.cfi_endproc
 379              	.LFE8:
 380              		.size	read_crank, .-read_crank
 381              		.align	2
 382              		.global	read_fork
 383              		.code	16
 384              		.thumb_func
ARM GAS  /tmp/ccLwwf6o.s 			page 9


 385              		.type	read_fork, %function
 386              	read_fork:
 387              	.LFB9:
  73:code/main.c   **** uint32_t       read_fork(void){return SENSOR[0];}
 388              		.loc 1 73 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 393              		.loc 1 73 0
 394 00bc 024B     		ldr	r3, .L39	@ tmp113,
 395 00be 1B68     		ldr	r3, [r3]	@ D.4714, SENSOR
 396 00c0 1B68     		ldr	r3, [r3]	@ D.4715, *_2
 397 00c2 1800     		movs	r0, r3	@, <retval>
 398              		@ sp needed	@
 399 00c4 7047     		bx	lr
 400              	.L40:
 401 00c6 C046     		.align	2
 402              	.L39:
 403 00c8 00000000 		.word	SENSOR
 404              		.cfi_endproc
 405              	.LFE9:
 406              		.size	read_fork, .-read_fork
 407              		.align	2
 408              		.global	clear_fork
 409              		.code	16
 410              		.thumb_func
 411              		.type	clear_fork, %function
 412              	clear_fork:
 413              	.LFB10:
  74:code/main.c   **** void          clear_fork(void){SENSOR[0] = 0; return;}
 414              		.loc 1 74 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 419              		.loc 1 74 0
 420 00cc 024B     		ldr	r3, .L43	@ tmp111,
 421 00ce 1B68     		ldr	r3, [r3]	@ D.4716, SENSOR
 422 00d0 0022     		movs	r2, #0	@ tmp112,
 423 00d2 1A60     		str	r2, [r3]	@ tmp112, *_2
 424 00d4 C046     		nop
 425              		@ sp needed	@
 426 00d6 7047     		bx	lr
 427              	.L44:
 428              		.align	2
 429              	.L43:
 430 00d8 00000000 		.word	SENSOR
 431              		.cfi_endproc
 432              	.LFE10:
 433              		.size	clear_fork, .-clear_fork
 434              		.align	2
 435              		.global	clear_timer_long
 436              		.code	16
 437              		.thumb_func
 438              		.type	clear_timer_long, %function
 439              	clear_timer_long:
ARM GAS  /tmp/ccLwwf6o.s 			page 10


 440              	.LFB11:
  75:code/main.c   **** void    clear_timer_long(void){TIMER[0] = 0; post_time = 0; return;}
 441              		.loc 1 75 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 446              		.loc 1 75 0
 447 00dc 044B     		ldr	r3, .L47	@ tmp111,
 448 00de 1B68     		ldr	r3, [r3]	@ D.4717, TIMER
 449 00e0 0022     		movs	r2, #0	@ tmp112,
 450 00e2 1A60     		str	r2, [r3]	@ tmp112, *_2
 451 00e4 034B     		ldr	r3, .L47+4	@ tmp113,
 452 00e6 0022     		movs	r2, #0	@ tmp114,
 453 00e8 1A60     		str	r2, [r3]	@ tmp114, post_time
 454 00ea C046     		nop
 455              		@ sp needed	@
 456 00ec 7047     		bx	lr
 457              	.L48:
 458 00ee C046     		.align	2
 459              	.L47:
 460 00f0 00000000 		.word	TIMER
 461 00f4 00000000 		.word	post_time
 462              		.cfi_endproc
 463              	.LFE11:
 464              		.size	clear_timer_long, .-clear_timer_long
 465              		.align	2
 466              		.global	display_segment
 467              		.code	16
 468              		.thumb_func
 469              		.type	display_segment, %function
 470              	display_segment:
 471              	.LFB12:
  76:code/main.c   **** void     display_segment(uint32_t Mode, uint32_t Integer, uint32_t Fraction){SEGMENT[0] = Fraction;
 472              		.loc 1 76 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 16
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 477 00f8 84B0     		sub	sp, sp, #16	@,,
 478              	.LCFI0:
 479              		.cfi_def_cfa_offset 16
 480 00fa 0390     		str	r0, [sp, #12]	@ Mode, Mode
 481 00fc 0291     		str	r1, [sp, #8]	@ Integer, Integer
 482 00fe 0192     		str	r2, [sp, #4]	@ Fraction, Fraction
 483              		.loc 1 76 0
 484 0100 084B     		ldr	r3, .L51	@ tmp115,
 485 0102 1B68     		ldr	r3, [r3]	@ D.4718, SEGMENT
 486 0104 019A     		ldr	r2, [sp, #4]	@ tmp116, Fraction
 487 0106 1A60     		str	r2, [r3]	@ tmp116, *_2
 488 0108 064B     		ldr	r3, .L51	@ tmp117,
 489 010a 1B68     		ldr	r3, [r3]	@ D.4718, SEGMENT
 490 010c 0433     		adds	r3, r3, #4	@ D.4718,
 491 010e 029A     		ldr	r2, [sp, #8]	@ tmp118, Integer
 492 0110 1A60     		str	r2, [r3]	@ tmp118, *_6
 493 0112 044B     		ldr	r3, .L51	@ tmp119,
 494 0114 1B68     		ldr	r3, [r3]	@ D.4718, SEGMENT
ARM GAS  /tmp/ccLwwf6o.s 			page 11


 495 0116 0833     		adds	r3, r3, #8	@ D.4718,
 496 0118 039A     		ldr	r2, [sp, #12]	@ tmp120, Mode
 497 011a 1A60     		str	r2, [r3]	@ tmp120, *_10
 498 011c C046     		nop
 499 011e 04B0     		add	sp, sp, #16	@,,
 500              		@ sp needed	@
 501 0120 7047     		bx	lr
 502              	.L52:
 503 0122 C046     		.align	2
 504              	.L51:
 505 0124 00000000 		.word	SEGMENT
 506              		.cfi_endproc
 507              	.LFE12:
 508              		.size	display_segment, .-display_segment
 509              		.global	__aeabi_uidivmod
 510              		.global	__aeabi_uidiv
 511              		.align	2
 512              		.global	int2bcd
 513              		.code	16
 514              		.thumb_func
 515              		.type	int2bcd, %function
 516              	int2bcd:
 517              	.LFB13:
  77:code/main.c   **** 
  78:code/main.c   **** //------------------------------------------------------------------------------
  79:code/main.c   **** // Compound Functions
  80:code/main.c   **** //------------------------------------------------------------------------------
  81:code/main.c   **** 
  82:code/main.c   **** uint32_t int2bcd(uint32_t value){
 518              		.loc 1 82 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 24
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522 0128 00B5     		push	{lr}	@
 523              	.LCFI1:
 524              		.cfi_def_cfa_offset 4
 525              		.cfi_offset 14, -4
 526 012a 87B0     		sub	sp, sp, #28	@,,
 527              	.LCFI2:
 528              		.cfi_def_cfa_offset 32
 529 012c 0190     		str	r0, [sp, #4]	@ value, value
  83:code/main.c   **** 
  84:code/main.c   ****     uint32_t bcd = 0;
 530              		.loc 1 84 0
 531 012e 0023     		movs	r3, #0	@ tmp113,
 532 0130 0593     		str	r3, [sp, #20]	@ tmp113, bcd
  85:code/main.c   ****     uint32_t shift = 0;
 533              		.loc 1 85 0
 534 0132 0023     		movs	r3, #0	@ tmp114,
 535 0134 0493     		str	r3, [sp, #16]	@ tmp114, shift
  86:code/main.c   **** 
  87:code/main.c   ****     while (value != 0) {
 536              		.loc 1 87 0
 537 0136 17E0     		b	.L54	@
 538              	.L55:
 539              	.LBB2:
  88:code/main.c   **** 
ARM GAS  /tmp/ccLwwf6o.s 			page 12


  89:code/main.c   ****       uint32_t num = value % 10;
 540              		.loc 1 89 0
 541 0138 019B     		ldr	r3, [sp, #4]	@ tmp116, value
 542 013a 0A21     		movs	r1, #10	@,
 543 013c 1800     		movs	r0, r3	@, tmp116
 544 013e FFF7FEFF 		bl	__aeabi_uidivmod	@
 545 0142 0B00     		movs	r3, r1	@ tmp121,
 546 0144 0393     		str	r3, [sp, #12]	@ tmp121, num
  90:code/main.c   ****       bcd = bcd | (num << shift);
 547              		.loc 1 90 0
 548 0146 039A     		ldr	r2, [sp, #12]	@ tmp122, num
 549 0148 049B     		ldr	r3, [sp, #16]	@ tmp123, shift
 550 014a 9A40     		lsls	r2, r2, r3	@ tmp122, tmp122, tmp123
 551 014c 1300     		movs	r3, r2	@ D.4719, tmp122
 552 014e 059A     		ldr	r2, [sp, #20]	@ tmp125, bcd
 553 0150 1343     		orrs	r3, r2	@ tmp124, tmp125
 554 0152 0593     		str	r3, [sp, #20]	@ tmp124, bcd
  91:code/main.c   ****       value = value / 10;
 555              		.loc 1 91 0
 556 0154 019B     		ldr	r3, [sp, #4]	@ tmp127, value
 557 0156 0A21     		movs	r1, #10	@,
 558 0158 1800     		movs	r0, r3	@, tmp127
 559 015a FFF7FEFF 		bl	__aeabi_uidiv	@
 560 015e 0300     		movs	r3, r0	@ tmp130,
 561 0160 0193     		str	r3, [sp, #4]	@ tmp130, value
  92:code/main.c   ****       shift = shift + 4;
 562              		.loc 1 92 0
 563 0162 049B     		ldr	r3, [sp, #16]	@ tmp132, shift
 564 0164 0433     		adds	r3, r3, #4	@ tmp131,
 565 0166 0493     		str	r3, [sp, #16]	@ tmp131, shift
 566              	.L54:
 567              	.LBE2:
  87:code/main.c   **** 
 568              		.loc 1 87 0
 569 0168 019B     		ldr	r3, [sp, #4]	@ tmp133, value
 570 016a 002B     		cmp	r3, #0	@ tmp133,
 571 016c E4D1     		bne	.L55	@,
  93:code/main.c   **** 
  94:code/main.c   ****     }
  95:code/main.c   **** 
  96:code/main.c   ****     return bcd;
 572              		.loc 1 96 0
 573 016e 059B     		ldr	r3, [sp, #20]	@ D.4720, bcd
  97:code/main.c   **** 
  98:code/main.c   **** }
 574              		.loc 1 98 0
 575 0170 1800     		movs	r0, r3	@, <retval>
 576 0172 07B0     		add	sp, sp, #28	@,,
 577              		@ sp needed	@
 578 0174 00BD     		pop	{pc}
 579              		.cfi_endproc
 580              	.LFE13:
 581              		.size	int2bcd, .-int2bcd
 582 0176 C046     		.align	2
 583              		.global	check_time_stop
 584              		.code	16
 585              		.thumb_func
ARM GAS  /tmp/ccLwwf6o.s 			page 13


 586              		.type	check_time_stop, %function
 587              	check_time_stop:
 588              	.LFB14:
  99:code/main.c   **** 
 100:code/main.c   **** void check_time_stop(void) {
 589              		.loc 1 100 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593 0178 10B5     		push	{r4, lr}	@
 594              	.LCFI3:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 4, -8
 597              		.cfi_offset 14, -4
 101:code/main.c   **** 
 102:code/main.c   ****   bike_fork = read_fork();
 598              		.loc 1 102 0
 599 017a FFF7FEFF 		bl	read_fork	@
 600 017e 0200     		movs	r2, r0	@ D.4721,
 601 0180 274B     		ldr	r3, .L65	@ tmp130,
 602 0182 1A60     		str	r2, [r3]	@ D.4721, bike_fork
 103:code/main.c   **** 
 104:code/main.c   ****   if (stop_time_mode == 0) {
 603              		.loc 1 104 0
 604 0184 274B     		ldr	r3, .L65+4	@ tmp131,
 605 0186 1B68     		ldr	r3, [r3]	@ D.4721, stop_time_mode
 606 0188 002B     		cmp	r3, #0	@ D.4721,
 607 018a 35D1     		bne	.L58	@,
 105:code/main.c   **** 
 106:code/main.c   ****     if (bike_fork == post_fork) {
 608              		.loc 1 106 0
 609 018c 244B     		ldr	r3, .L65	@ tmp132,
 610 018e 1A68     		ldr	r2, [r3]	@ D.4721, bike_fork
 611 0190 254B     		ldr	r3, .L65+8	@ tmp133,
 612 0192 1B68     		ldr	r3, [r3]	@ D.4721, post_fork
 613 0194 9A42     		cmp	r2, r3	@ D.4721, D.4721
 614 0196 28D1     		bne	.L59	@,
 107:code/main.c   **** 
 108:code/main.c   ****       fork_equal = fork_equal + 1;
 615              		.loc 1 108 0
 616 0198 244B     		ldr	r3, .L65+12	@ tmp134,
 617 019a 1B68     		ldr	r3, [r3]	@ D.4721, fork_equal
 618 019c 5A1C     		adds	r2, r3, #1	@ D.4721, D.4721,
 619 019e 234B     		ldr	r3, .L65+12	@ tmp135,
 620 01a0 1A60     		str	r2, [r3]	@ D.4721, fork_equal
 109:code/main.c   ****       now_stop_time = read_time_long();
 621              		.loc 1 109 0
 622 01a2 FFF7FEFF 		bl	read_time_long	@
 623 01a6 0200     		movs	r2, r0	@ D.4721,
 624 01a8 214B     		ldr	r3, .L65+16	@ tmp136,
 625 01aa 1A60     		str	r2, [r3]	@ D.4721, now_stop_time
 110:code/main.c   **** 
 111:code/main.c   ****       if (fork_equal == 1) {
 626              		.loc 1 111 0
 627 01ac 1F4B     		ldr	r3, .L65+12	@ tmp137,
 628 01ae 1B68     		ldr	r3, [r3]	@ D.4721, fork_equal
 629 01b0 012B     		cmp	r3, #1	@ D.4721,
ARM GAS  /tmp/ccLwwf6o.s 			page 14


 630 01b2 07D1     		bne	.L60	@,
 112:code/main.c   **** 
 113:code/main.c   ****         post_stop_time = now_stop_time;
 631              		.loc 1 113 0
 632 01b4 1E4B     		ldr	r3, .L65+16	@ tmp138,
 633 01b6 1A68     		ldr	r2, [r3]	@ D.4721, now_stop_time
 634 01b8 1E4B     		ldr	r3, .L65+20	@ tmp139,
 635 01ba 1A60     		str	r2, [r3]	@ D.4721, post_stop_time
 114:code/main.c   ****         store_stop_time = now_stop_time;
 636              		.loc 1 114 0
 637 01bc 1C4B     		ldr	r3, .L65+16	@ tmp140,
 638 01be 1A68     		ldr	r2, [r3]	@ D.4721, now_stop_time
 639 01c0 1D4B     		ldr	r3, .L65+24	@ tmp141,
 640 01c2 1A60     		str	r2, [r3]	@ D.4721, store_stop_time
 641              	.L60:
 115:code/main.c   **** 
 116:code/main.c   ****       }
 117:code/main.c   **** 
 118:code/main.c   ****       stop_time = now_stop_time - post_stop_time;
 642              		.loc 1 118 0
 643 01c4 1A4B     		ldr	r3, .L65+16	@ tmp142,
 644 01c6 1A68     		ldr	r2, [r3]	@ D.4721, now_stop_time
 645 01c8 1A4B     		ldr	r3, .L65+20	@ tmp143,
 646 01ca 1B68     		ldr	r3, [r3]	@ D.4721, post_stop_time
 647 01cc D21A     		subs	r2, r2, r3	@ D.4721, D.4721, D.4721
 648 01ce 1B4B     		ldr	r3, .L65+28	@ tmp144,
 649 01d0 1A60     		str	r2, [r3]	@ D.4721, stop_time
 119:code/main.c   **** 
 120:code/main.c   ****       if (stop_time >= 6) {
 650              		.loc 1 120 0
 651 01d2 1A4B     		ldr	r3, .L65+28	@ tmp145,
 652 01d4 1B68     		ldr	r3, [r3]	@ D.4721, stop_time
 653 01d6 052B     		cmp	r3, #5	@ D.4721,
 654 01d8 02D9     		bls	.L61	@,
 121:code/main.c   **** 
 122:code/main.c   ****         stop_time_mode = 1;
 655              		.loc 1 122 0
 656 01da 124B     		ldr	r3, .L65+4	@ tmp146,
 657 01dc 0122     		movs	r2, #1	@ tmp147,
 658 01de 1A60     		str	r2, [r3]	@ tmp147, stop_time_mode
 659              	.L61:
 123:code/main.c   **** 
 124:code/main.c   ****       }
 125:code/main.c   **** 
 126:code/main.c   ****       post_stop_time = now_stop_time;
 660              		.loc 1 126 0
 661 01e0 134B     		ldr	r3, .L65+16	@ tmp148,
 662 01e2 1A68     		ldr	r2, [r3]	@ D.4721, now_stop_time
 663 01e4 134B     		ldr	r3, .L65+20	@ tmp149,
 664 01e6 1A60     		str	r2, [r3]	@ D.4721, post_stop_time
 665 01e8 14E0     		b	.L63	@
 666              	.L59:
 127:code/main.c   **** 
 128:code/main.c   ****     } else {
 129:code/main.c   **** 
 130:code/main.c   ****       fork_equal = 0;
 667              		.loc 1 130 0
ARM GAS  /tmp/ccLwwf6o.s 			page 15


 668 01ea 104B     		ldr	r3, .L65+12	@ tmp150,
 669 01ec 0022     		movs	r2, #0	@ tmp151,
 670 01ee 1A60     		str	r2, [r3]	@ tmp151, fork_equal
 131:code/main.c   ****       store_stop_time = 0;
 671              		.loc 1 131 0
 672 01f0 114B     		ldr	r3, .L65+24	@ tmp152,
 673 01f2 0022     		movs	r2, #0	@ tmp153,
 674 01f4 1A60     		str	r2, [r3]	@ tmp153, store_stop_time
 675 01f6 0DE0     		b	.L63	@
 676              	.L58:
 132:code/main.c   **** 
 133:code/main.c   ****     }
 134:code/main.c   **** 
 135:code/main.c   ****   } else {
 136:code/main.c   **** 
 137:code/main.c   ****     if (bike_fork != post_fork) {
 677              		.loc 1 137 0
 678 01f8 094B     		ldr	r3, .L65	@ tmp154,
 679 01fa 1A68     		ldr	r2, [r3]	@ D.4721, bike_fork
 680 01fc 0A4B     		ldr	r3, .L65+8	@ tmp155,
 681 01fe 1B68     		ldr	r3, [r3]	@ D.4721, post_fork
 682 0200 9A42     		cmp	r2, r3	@ D.4721, D.4721
 683 0202 07D0     		beq	.L63	@,
 138:code/main.c   **** 
 139:code/main.c   ****       stop_time_mode = 0;
 684              		.loc 1 139 0
 685 0204 074B     		ldr	r3, .L65+4	@ tmp156,
 686 0206 0022     		movs	r2, #0	@ tmp157,
 687 0208 1A60     		str	r2, [r3]	@ tmp157, stop_time_mode
 140:code/main.c   ****       TIMER[0] = store_stop_time;
 688              		.loc 1 140 0
 689 020a 0D4B     		ldr	r3, .L65+32	@ tmp158,
 690 020c 1B68     		ldr	r3, [r3]	@ D.4722, TIMER
 691 020e 0A4A     		ldr	r2, .L65+24	@ tmp159,
 692 0210 1268     		ldr	r2, [r2]	@ D.4721, store_stop_time
 693 0212 1A60     		str	r2, [r3]	@ D.4721, *_36
 694              	.L63:
 141:code/main.c   **** 
 142:code/main.c   ****     }
 143:code/main.c   **** 
 144:code/main.c   ****   }
 145:code/main.c   **** 
 146:code/main.c   ****   post_fork = bike_fork;
 695              		.loc 1 146 0
 696 0214 024B     		ldr	r3, .L65	@ tmp160,
 697 0216 1A68     		ldr	r2, [r3]	@ D.4721, bike_fork
 698 0218 034B     		ldr	r3, .L65+8	@ tmp161,
 699 021a 1A60     		str	r2, [r3]	@ D.4721, post_fork
 147:code/main.c   **** 
 148:code/main.c   ****   return;
 700              		.loc 1 148 0
 701 021c C046     		nop
 149:code/main.c   **** 
 150:code/main.c   **** }
 702              		.loc 1 150 0
 703              		@ sp needed	@
 704 021e 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccLwwf6o.s 			page 16


 705              	.L66:
 706              		.align	2
 707              	.L65:
 708 0220 00000000 		.word	bike_fork
 709 0224 00000000 		.word	stop_time_mode
 710 0228 00000000 		.word	post_fork
 711 022c 00000000 		.word	fork_equal
 712 0230 00000000 		.word	now_stop_time
 713 0234 00000000 		.word	post_stop_time
 714 0238 00000000 		.word	store_stop_time
 715 023c 00000000 		.word	stop_time
 716 0240 00000000 		.word	TIMER
 717              		.cfi_endproc
 718              	.LFE14:
 719              		.size	check_time_stop, .-check_time_stop
 720              		.align	2
 721              		.global	wait_for_press
 722              		.code	16
 723              		.thumb_func
 724              		.type	wait_for_press, %function
 725              	wait_for_press:
 726              	.LFB15:
 151:code/main.c   **** 
 152:code/main.c   **** bool wait_for_press(void){
 727              		.loc 1 152 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731 0244 10B5     		push	{r4, lr}	@
 732              	.LCFI4:
 733              		.cfi_def_cfa_offset 8
 734              		.cfi_offset 4, -8
 735              		.cfi_offset 14, -4
 736              	.L71:
 153:code/main.c   **** 
 154:code/main.c   ****   // 若三秒内没有按下，则返回假
 155:code/main.c   ****   while(1) {
 156:code/main.c   **** 
 157:code/main.c   ****     check_time_stop();
 737              		.loc 1 157 0
 738 0246 FFF7FEFF 		bl	check_time_stop	@
 158:code/main.c   **** 
 159:code/main.c   ****     if (check_button())
 739              		.loc 1 159 0
 740 024a FFF7FEFF 		bl	check_button	@
 741 024e 031E     		subs	r3, r0, #0	@ tmp114,,
 742 0250 01D0     		beq	.L68	@,
 160:code/main.c   **** 
 161:code/main.c   ****       return true;
 743              		.loc 1 161 0
 744 0252 0123     		movs	r3, #1	@ D.4723,
 745 0254 06E0     		b	.L69	@
 746              	.L68:
 162:code/main.c   **** 
 163:code/main.c   ****     else if (time_up()) {
 747              		.loc 1 163 0
 748 0256 FFF7FEFF 		bl	time_up	@
ARM GAS  /tmp/ccLwwf6o.s 			page 17


 749 025a 031E     		subs	r3, r0, #0	@ tmp116,,
 750 025c F3D0     		beq	.L71	@,
 164:code/main.c   **** 
 165:code/main.c   ****       read_time_short();
 751              		.loc 1 165 0
 752 025e FFF7FEFF 		bl	read_time_short	@
 166:code/main.c   **** 
 167:code/main.c   ****       return false;
 753              		.loc 1 167 0
 754 0262 0023     		movs	r3, #0	@ D.4723,
 755              	.L69:
 168:code/main.c   **** 
 169:code/main.c   ****     }
 170:code/main.c   **** 
 171:code/main.c   ****   }
 172:code/main.c   **** 
 173:code/main.c   **** }
 756              		.loc 1 173 0
 757 0264 1800     		movs	r0, r3	@, <retval>
 758              		@ sp needed	@
 759 0266 10BD     		pop	{r4, pc}
 760              		.cfi_endproc
 761              	.LFE15:
 762              		.size	wait_for_press, .-wait_for_press
 763              		.align	2
 764              		.global	wait_for_setting
 765              		.code	16
 766              		.thumb_func
 767              		.type	wait_for_setting, %function
 768              	wait_for_setting:
 769              	.LFB16:
 174:code/main.c   **** 
 175:code/main.c   **** void wait_for_setting(void) {
 770              		.loc 1 175 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 24
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774 0268 00B5     		push	{lr}	@
 775              	.LCFI5:
 776              		.cfi_def_cfa_offset 4
 777              		.cfi_offset 14, -4
 778 026a 87B0     		sub	sp, sp, #28	@,,
 779              	.LCFI6:
 780              		.cfi_def_cfa_offset 32
 176:code/main.c   **** 
 177:code/main.c   ****   uint32_t press_times = 0;
 781              		.loc 1 177 0
 782 026c 0023     		movs	r3, #0	@ tmp130,
 783 026e 0593     		str	r3, [sp, #20]	@ tmp130, press_times
 178:code/main.c   ****   uint32_t wheel_1, wheel_2, wheel_3;
 179:code/main.c   ****   uint32_t wheel_f_bcd;
 180:code/main.c   **** 
 181:code/main.c   ****   check_time_stop();
 784              		.loc 1 181 0
 785 0270 FFF7FEFF 		bl	check_time_stop	@
 182:code/main.c   **** 
 183:code/main.c   ****   wheel_f_bcd = int2bcd(wheel);
ARM GAS  /tmp/ccLwwf6o.s 			page 18


 786              		.loc 1 183 0
 787 0274 404B     		ldr	r3, .L81	@ tmp131,
 788 0276 1B68     		ldr	r3, [r3]	@ D.4724, wheel
 789 0278 1800     		movs	r0, r3	@, D.4724
 790 027a FFF7FEFF 		bl	int2bcd	@
 791 027e 0300     		movs	r3, r0	@ tmp132,
 792 0280 0193     		str	r3, [sp, #4]	@ tmp132, wheel_f_bcd
 184:code/main.c   ****   display_segment(0xE, wheel_f_bcd, 0);
 793              		.loc 1 184 0
 794 0282 019B     		ldr	r3, [sp, #4]	@ tmp133, wheel_f_bcd
 795 0284 0022     		movs	r2, #0	@,
 796 0286 1900     		movs	r1, r3	@, tmp133
 797 0288 0E20     		movs	r0, #14	@,
 798 028a FFF7FEFF 		bl	display_segment	@
 799              	.L79:
 185:code/main.c   **** 
 186:code/main.c   ****   while (1){
 187:code/main.c   **** 
 188:code/main.c   ****     wheel_3 = wheel / 100;
 800              		.loc 1 188 0
 801 028e 3A4B     		ldr	r3, .L81	@ tmp134,
 802 0290 1B68     		ldr	r3, [r3]	@ D.4724, wheel
 803 0292 6421     		movs	r1, #100	@,
 804 0294 1800     		movs	r0, r3	@, D.4724
 805 0296 FFF7FEFF 		bl	__aeabi_uidiv	@
 806 029a 0300     		movs	r3, r0	@ tmp137,
 807 029c 0293     		str	r3, [sp, #8]	@ tmp137, wheel_3
 189:code/main.c   ****     wheel_2 = (wheel - wheel_3 * 100) / 10;
 808              		.loc 1 189 0
 809 029e 364B     		ldr	r3, .L81	@ tmp138,
 810 02a0 1A68     		ldr	r2, [r3]	@ D.4724, wheel
 811 02a2 029B     		ldr	r3, [sp, #8]	@ tmp139, wheel_3
 812 02a4 6421     		movs	r1, #100	@ tmp140,
 813 02a6 4B43     		muls	r3, r1	@ D.4724, tmp140
 814 02a8 D31A     		subs	r3, r2, r3	@ D.4724, D.4724, D.4724
 815 02aa 0A21     		movs	r1, #10	@,
 816 02ac 1800     		movs	r0, r3	@, D.4724
 817 02ae FFF7FEFF 		bl	__aeabi_uidiv	@
 818 02b2 0300     		movs	r3, r0	@ tmp143,
 819 02b4 0393     		str	r3, [sp, #12]	@ tmp143, wheel_2
 190:code/main.c   ****     wheel_1 = (wheel - wheel_3 * 100) - (wheel_2 * 10);
 820              		.loc 1 190 0
 821 02b6 304B     		ldr	r3, .L81	@ tmp144,
 822 02b8 1A68     		ldr	r2, [r3]	@ D.4724, wheel
 823 02ba 029B     		ldr	r3, [sp, #8]	@ tmp145, wheel_3
 824 02bc 6421     		movs	r1, #100	@ tmp146,
 825 02be 4B43     		muls	r3, r1	@ D.4724, tmp146
 826 02c0 D11A     		subs	r1, r2, r3	@ D.4724, D.4724, D.4724
 827 02c2 039A     		ldr	r2, [sp, #12]	@ tmp147, wheel_2
 828 02c4 1300     		movs	r3, r2	@ tmp148, tmp147
 829 02c6 9B00     		lsls	r3, r3, #2	@ tmp148, tmp148,
 830 02c8 9B18     		adds	r3, r3, r2	@ tmp148, tmp148, tmp147
 831 02ca 5B00     		lsls	r3, r3, #1	@ tmp149, tmp148,
 832 02cc CB1A     		subs	r3, r1, r3	@ tmp150, D.4724, D.4724
 833 02ce 0493     		str	r3, [sp, #16]	@ tmp150, wheel_1
 191:code/main.c   **** 
 192:code/main.c   ****     if (check_button()) {
ARM GAS  /tmp/ccLwwf6o.s 			page 19


 834              		.loc 1 192 0
 835 02d0 FFF7FEFF 		bl	check_button	@
 836 02d4 031E     		subs	r3, r0, #0	@ tmp151,,
 837 02d6 DAD0     		beq	.L79	@,
 193:code/main.c   ****           
 194:code/main.c   ****       if (press_mode()) {
 838              		.loc 1 194 0
 839 02d8 FFF7FEFF 		bl	press_mode	@
 840 02dc 031E     		subs	r3, r0, #0	@ tmp153,,
 841 02de 06D0     		beq	.L74	@,
 195:code/main.c   **** 
 196:code/main.c   ****         press_times ++;
 842              		.loc 1 196 0
 843 02e0 059B     		ldr	r3, [sp, #20]	@ tmp156, press_times
 844 02e2 0133     		adds	r3, r3, #1	@ tmp155,
 845 02e4 0593     		str	r3, [sp, #20]	@ tmp155, press_times
 197:code/main.c   ****         if (press_times == 3) {
 846              		.loc 1 197 0
 847 02e6 059B     		ldr	r3, [sp, #20]	@ tmp157, press_times
 848 02e8 032B     		cmp	r3, #3	@ tmp157,
 849 02ea D0D1     		bne	.L79	@,
 198:code/main.c   **** 
 199:code/main.c   ****           return;
 850              		.loc 1 199 0
 851 02ec 42E0     		b	.L80	@
 852              	.L74:
 200:code/main.c   ****              
 201:code/main.c   ****         }
 202:code/main.c   **** 
 203:code/main.c   ****       } else if(press_trip()) {
 853              		.loc 1 203 0
 854 02ee FFF7FEFF 		bl	press_trip	@
 855 02f2 031E     		subs	r3, r0, #0	@ tmp158,,
 856 02f4 CBD0     		beq	.L79	@,
 204:code/main.c   **** 
 205:code/main.c   ****         if (press_times == 0) {
 857              		.loc 1 205 0
 858 02f6 059B     		ldr	r3, [sp, #20]	@ tmp160, press_times
 859 02f8 002B     		cmp	r3, #0	@ tmp160,
 860 02fa 08D1     		bne	.L76	@,
 206:code/main.c   ****             
 207:code/main.c   ****             wheel_3 = (wheel_3 + 1) % 10;
 861              		.loc 1 207 0
 862 02fc 029B     		ldr	r3, [sp, #8]	@ tmp161, wheel_3
 863 02fe 0133     		adds	r3, r3, #1	@ D.4724,
 864 0300 0A21     		movs	r1, #10	@,
 865 0302 1800     		movs	r0, r3	@, D.4724
 866 0304 FFF7FEFF 		bl	__aeabi_uidivmod	@
 867 0308 0B00     		movs	r3, r1	@ tmp166,
 868 030a 0293     		str	r3, [sp, #8]	@ tmp166, wheel_3
 869 030c 16E0     		b	.L77	@
 870              	.L76:
 208:code/main.c   ****                 
 209:code/main.c   ****         } else if (press_times == 1) {
 871              		.loc 1 209 0
 872 030e 059B     		ldr	r3, [sp, #20]	@ tmp167, press_times
 873 0310 012B     		cmp	r3, #1	@ tmp167,
ARM GAS  /tmp/ccLwwf6o.s 			page 20


 874 0312 08D1     		bne	.L78	@,
 210:code/main.c   ****                
 211:code/main.c   ****             wheel_2 = (wheel_2 + 1) % 10;               
 875              		.loc 1 211 0
 876 0314 039B     		ldr	r3, [sp, #12]	@ tmp168, wheel_2
 877 0316 0133     		adds	r3, r3, #1	@ D.4724,
 878 0318 0A21     		movs	r1, #10	@,
 879 031a 1800     		movs	r0, r3	@, D.4724
 880 031c FFF7FEFF 		bl	__aeabi_uidivmod	@
 881 0320 0B00     		movs	r3, r1	@ tmp173,
 882 0322 0393     		str	r3, [sp, #12]	@ tmp173, wheel_2
 883 0324 0AE0     		b	.L77	@
 884              	.L78:
 212:code/main.c   **** 
 213:code/main.c   ****         } else if (press_times == 2) {                
 885              		.loc 1 213 0
 886 0326 059B     		ldr	r3, [sp, #20]	@ tmp174, press_times
 887 0328 022B     		cmp	r3, #2	@ tmp174,
 888 032a 07D1     		bne	.L77	@,
 214:code/main.c   ****                 
 215:code/main.c   ****             wheel_1 = (wheel_1 + 1) % 10;
 889              		.loc 1 215 0
 890 032c 049B     		ldr	r3, [sp, #16]	@ tmp175, wheel_1
 891 032e 0133     		adds	r3, r3, #1	@ D.4724,
 892 0330 0A21     		movs	r1, #10	@,
 893 0332 1800     		movs	r0, r3	@, D.4724
 894 0334 FFF7FEFF 		bl	__aeabi_uidivmod	@
 895 0338 0B00     		movs	r3, r1	@ tmp180,
 896 033a 0493     		str	r3, [sp, #16]	@ tmp180, wheel_1
 897              	.L77:
 216:code/main.c   ****                 
 217:code/main.c   ****         }
 218:code/main.c   ****             
 219:code/main.c   ****         wheel = wheel_3 * 100 + wheel_2 * 10 + wheel_1;
 898              		.loc 1 219 0
 899 033c 029B     		ldr	r3, [sp, #8]	@ tmp181, wheel_3
 900 033e 6422     		movs	r2, #100	@ tmp182,
 901 0340 5A43     		muls	r2, r3	@ tmp182, tmp181
 902 0342 1100     		movs	r1, r2	@ D.4724, tmp182
 903 0344 039A     		ldr	r2, [sp, #12]	@ tmp183, wheel_2
 904 0346 1300     		movs	r3, r2	@ tmp184, tmp183
 905 0348 9B00     		lsls	r3, r3, #2	@ tmp184, tmp184,
 906 034a 9B18     		adds	r3, r3, r2	@ tmp184, tmp184, tmp183
 907 034c 5B00     		lsls	r3, r3, #1	@ tmp185, tmp184,
 908 034e CA18     		adds	r2, r1, r3	@ D.4724, D.4724, D.4724
 909 0350 049B     		ldr	r3, [sp, #16]	@ tmp186, wheel_1
 910 0352 D218     		adds	r2, r2, r3	@ D.4724, D.4724, tmp186
 911 0354 084B     		ldr	r3, .L81	@ tmp187,
 912 0356 1A60     		str	r2, [r3]	@ D.4724, wheel
 220:code/main.c   ****         wheel_f_bcd = int2bcd(wheel);
 913              		.loc 1 220 0
 914 0358 074B     		ldr	r3, .L81	@ tmp188,
 915 035a 1B68     		ldr	r3, [r3]	@ D.4724, wheel
 916 035c 1800     		movs	r0, r3	@, D.4724
 917 035e FFF7FEFF 		bl	int2bcd	@
 918 0362 0300     		movs	r3, r0	@ tmp189,
 919 0364 0193     		str	r3, [sp, #4]	@ tmp189, wheel_f_bcd
ARM GAS  /tmp/ccLwwf6o.s 			page 21


 221:code/main.c   ****         display_segment(0xE, wheel_f_bcd, 0);
 920              		.loc 1 221 0
 921 0366 019B     		ldr	r3, [sp, #4]	@ tmp190, wheel_f_bcd
 922 0368 0022     		movs	r2, #0	@,
 923 036a 1900     		movs	r1, r3	@, tmp190
 924 036c 0E20     		movs	r0, #14	@,
 925 036e FFF7FEFF 		bl	display_segment	@
 222:code/main.c   ****           //get_setting_image();
 223:code/main.c   ****           //display_oled();
 224:code/main.c   **** 
 225:code/main.c   ****       }
 226:code/main.c   **** 
 227:code/main.c   ****     }
 228:code/main.c   **** 
 229:code/main.c   ****   }  
 926              		.loc 1 229 0
 927 0372 8CE7     		b	.L79	@
 928              	.L80:
 230:code/main.c   **** 
 231:code/main.c   **** }
 929              		.loc 1 231 0
 930 0374 07B0     		add	sp, sp, #28	@,,
 931              		@ sp needed	@
 932 0376 00BD     		pop	{pc}
 933              	.L82:
 934              		.align	2
 935              	.L81:
 936 0378 00000000 		.word	wheel
 937              		.cfi_endproc
 938              	.LFE16:
 939              		.size	wait_for_setting, .-wait_for_setting
 940              		.global	__aeabi_fcmplt
 941              		.global	__aeabi_fcmpgt
 942              		.align	2
 943              		.global	check_speed
 944              		.code	16
 945              		.thumb_func
 946              		.type	check_speed, %function
 947              	check_speed:
 948              	.LFB17:
 232:code/main.c   **** 
 233:code/main.c   **** void check_speed(void){
 949              		.loc 1 233 0
 950              		.cfi_startproc
 951              		@ args = 0, pretend = 0, frame = 0
 952              		@ frame_needed = 0, uses_anonymous_args = 0
 953 037c 10B5     		push	{r4, lr}	@
 954              	.LCFI7:
 955              		.cfi_def_cfa_offset 8
 956              		.cfi_offset 4, -8
 957              		.cfi_offset 14, -4
 234:code/main.c   **** 
 235:code/main.c   ****   if (max_speed < speed)
 958              		.loc 1 235 0
 959 037e 0F4B     		ldr	r3, .L93	@ tmp114,
 960 0380 1A68     		ldr	r2, [r3]	@ D.4726, max_speed
 961 0382 0F4B     		ldr	r3, .L93+4	@ tmp115,
ARM GAS  /tmp/ccLwwf6o.s 			page 22


 962 0384 1B68     		ldr	r3, [r3]	@ D.4726, speed
 963 0386 191C     		adds	r1, r3, #0	@, D.4726
 964 0388 101C     		adds	r0, r2, #0	@, D.4726
 965 038a FFF7FEFF 		bl	__aeabi_fcmplt	@
 966 038e 031E     		subs	r3, r0, #0	@ tmp116,,
 967 0390 03D0     		beq	.L84	@,
 236:code/main.c   ****       max_speed = speed;
 968              		.loc 1 236 0
 969 0392 0B4B     		ldr	r3, .L93+4	@ tmp117,
 970 0394 1A68     		ldr	r2, [r3]	@ D.4726, speed
 971 0396 094B     		ldr	r3, .L93	@ tmp118,
 972 0398 1A60     		str	r2, [r3]	@ D.4726, max_speed
 973              	.L84:
 237:code/main.c   ****   if (max_speed > 40)
 974              		.loc 1 237 0
 975 039a 084B     		ldr	r3, .L93	@ tmp119,
 976 039c 1B68     		ldr	r3, [r3]	@ D.4726, max_speed
 977 039e 0949     		ldr	r1, .L93+8	@,
 978 03a0 181C     		adds	r0, r3, #0	@, D.4726
 979 03a2 FFF7FEFF 		bl	__aeabi_fcmpgt	@
 980 03a6 031E     		subs	r3, r0, #0	@ tmp120,,
 981 03a8 03D0     		beq	.L92	@,
 238:code/main.c   ****       speed_red = true;
 982              		.loc 1 238 0
 983 03aa 074B     		ldr	r3, .L93+12	@ tmp121,
 984 03ac 0122     		movs	r2, #1	@ tmp122,
 985 03ae 1A70     		strb	r2, [r3]	@ tmp123, speed_red
 239:code/main.c   ****   else
 240:code/main.c   ****       speed_red = false;
 241:code/main.c   ****   return;
 986              		.loc 1 241 0
 987 03b0 03E0     		b	.L83	@
 988              	.L92:
 240:code/main.c   ****   return;
 989              		.loc 1 240 0
 990 03b2 054B     		ldr	r3, .L93+12	@ tmp124,
 991 03b4 0022     		movs	r2, #0	@ tmp125,
 992 03b6 1A70     		strb	r2, [r3]	@ tmp126, speed_red
 993              		.loc 1 241 0
 994 03b8 C046     		nop
 995              	.L83:
 242:code/main.c   **** 
 243:code/main.c   **** }
 996              		.loc 1 243 0
 997              		@ sp needed	@
 998 03ba 10BD     		pop	{r4, pc}
 999              	.L94:
 1000              		.align	2
 1001              	.L93:
 1002 03bc 00000000 		.word	max_speed
 1003 03c0 00000000 		.word	speed
 1004 03c4 00002042 		.word	1109393408
 1005 03c8 00000000 		.word	speed_red
 1006              		.cfi_endproc
 1007              	.LFE17:
 1008              		.size	check_speed, .-check_speed
 1009              		.global	__aeabi_ui2f
ARM GAS  /tmp/ccLwwf6o.s 			page 23


 1010              		.global	__aeabi_fdiv
 1011              		.global	__aeabi_f2d
 1012              		.global	__aeabi_dadd
 1013              		.global	__aeabi_d2f
 1014              		.global	__aeabi_dcmpgt
 1015              		.align	2
 1016              		.global	get_distance
 1017              		.code	16
 1018              		.thumb_func
 1019              		.type	get_distance, %function
 1020              	get_distance:
 1021              	.LFB18:
 244:code/main.c   **** 
 245:code/main.c   **** float get_distance(uint32_t bike_fork, uint32_t wheel){
 1022              		.loc 1 245 0
 1023              		.cfi_startproc
 1024              		@ args = 0, pretend = 0, frame = 24
 1025              		@ frame_needed = 0, uses_anonymous_args = 0
 1026 03cc 10B5     		push	{r4, lr}	@
 1027              	.LCFI8:
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 4, -8
 1030              		.cfi_offset 14, -4
 1031 03ce 86B0     		sub	sp, sp, #24	@,,
 1032              	.LCFI9:
 1033              		.cfi_def_cfa_offset 32
 1034 03d0 0190     		str	r0, [sp, #4]	@ bike_fork, bike_fork
 1035 03d2 0091     		str	r1, [sp]	@ wheel, wheel
 246:code/main.c   **** 
 247:code/main.c   ****   float f_distance, f_distance_mm, f_distance_m;
 248:code/main.c   **** 
 249:code/main.c   ****   f_distance_mm = bike_fork * wheel;
 1036              		.loc 1 249 0
 1037 03d4 019B     		ldr	r3, [sp, #4]	@ tmp117, bike_fork
 1038 03d6 009A     		ldr	r2, [sp]	@ tmp118, wheel
 1039 03d8 5343     		muls	r3, r2	@ D.4728, tmp118
 1040 03da 1800     		movs	r0, r3	@, D.4728
 1041 03dc FFF7FEFF 		bl	__aeabi_ui2f	@
 1042 03e0 031C     		adds	r3, r0, #0	@ tmp119,
 1043 03e2 0593     		str	r3, [sp, #20]	@ tmp119, f_distance_mm
 250:code/main.c   ****   f_distance_m = f_distance_mm / 1000;
 1044              		.loc 1 250 0
 1045 03e4 1549     		ldr	r1, .L101	@,
 1046 03e6 0598     		ldr	r0, [sp, #20]	@, f_distance_mm
 1047 03e8 FFF7FEFF 		bl	__aeabi_fdiv	@
 1048 03ec 031C     		adds	r3, r0, #0	@ tmp120,
 1049 03ee 0493     		str	r3, [sp, #16]	@ tmp120, f_distance_m
 251:code/main.c   ****   f_distance = f_distance_m / 1000 + 0.01;
 1050              		.loc 1 251 0
 1051 03f0 1249     		ldr	r1, .L101	@,
 1052 03f2 0498     		ldr	r0, [sp, #16]	@, f_distance_m
 1053 03f4 FFF7FEFF 		bl	__aeabi_fdiv	@
 1054 03f8 031C     		adds	r3, r0, #0	@ tmp121,
 1055 03fa 181C     		adds	r0, r3, #0	@, D.4727
 1056 03fc FFF7FEFF 		bl	__aeabi_f2d	@
 1057 0400 0F4A     		ldr	r2, .L101+4	@,
 1058 0402 104B     		ldr	r3, .L101+8	@,
ARM GAS  /tmp/ccLwwf6o.s 			page 24


 1059 0404 FFF7FEFF 		bl	__aeabi_dadd	@
 1060 0408 0300     		movs	r3, r0	@ tmp122,
 1061 040a 0C00     		movs	r4, r1	@,
 1062 040c 1800     		movs	r0, r3	@, D.4729
 1063 040e 2100     		movs	r1, r4	@, D.4729
 1064 0410 FFF7FEFF 		bl	__aeabi_d2f	@
 1065 0414 031C     		adds	r3, r0, #0	@ tmp123,
 1066 0416 0393     		str	r3, [sp, #12]	@ tmp123, f_distance
 252:code/main.c   **** 
 253:code/main.c   ****   if (f_distance > 99.99) {
 1067              		.loc 1 253 0
 1068 0418 0398     		ldr	r0, [sp, #12]	@, f_distance
 1069 041a FFF7FEFF 		bl	__aeabi_f2d	@
 1070 041e 0A4A     		ldr	r2, .L101+12	@,
 1071 0420 0A4B     		ldr	r3, .L101+16	@,
 1072 0422 FFF7FEFF 		bl	__aeabi_dcmpgt	@
 1073 0426 031E     		subs	r3, r0, #0	@ tmp124,,
 1074 0428 03D0     		beq	.L100	@,
 254:code/main.c   **** 
 255:code/main.c   ****     return f_distance = 99.99;
 1075              		.loc 1 255 0
 1076 042a 094B     		ldr	r3, .L101+20	@ tmp125,
 1077 042c 0393     		str	r3, [sp, #12]	@ tmp125, f_distance
 1078 042e 039B     		ldr	r3, [sp, #12]	@ D.4727, f_distance
 1079 0430 00E0     		b	.L98	@
 1080              	.L100:
 256:code/main.c   **** 
 257:code/main.c   ****   } else {
 258:code/main.c   **** 
 259:code/main.c   ****     return f_distance;
 1081              		.loc 1 259 0
 1082 0432 039B     		ldr	r3, [sp, #12]	@ D.4727, f_distance
 1083              	.L98:
 260:code/main.c   **** 
 261:code/main.c   ****   }
 262:code/main.c   **** 
 263:code/main.c   **** }
 1084              		.loc 1 263 0
 1085 0434 181C     		adds	r0, r3, #0	@, <retval>
 1086 0436 06B0     		add	sp, sp, #24	@,,
 1087              		@ sp needed	@
 1088 0438 10BD     		pop	{r4, pc}
 1089              	.L102:
 1090 043a C046     		.align	2
 1091              	.L101:
 1092 043c 00007A44 		.word	1148846080
 1093 0440 7B14AE47 		.word	1202590843
 1094 0444 E17A843F 		.word	1065646817
 1095 0448 8FC2F528 		.word	687194767
 1096 044c 5CFF5840 		.word	1079574364
 1097 0450 E1FAC742 		.word	1120402145
 1098              		.cfi_endproc
 1099              	.LFE18:
 1100              		.size	get_distance, .-get_distance
 1101              		.global	__aeabi_fmul
 1102              		.align	2
 1103              		.global	get_speed
ARM GAS  /tmp/ccLwwf6o.s 			page 25


 1104              		.code	16
 1105              		.thumb_func
 1106              		.type	get_speed, %function
 1107              	get_speed:
 1108              	.LFB19:
 264:code/main.c   **** 
 265:code/main.c   **** float get_speed(float distance, uint32_t time){
 1109              		.loc 1 265 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 16
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113 0454 10B5     		push	{r4, lr}	@
 1114              	.LCFI10:
 1115              		.cfi_def_cfa_offset 8
 1116              		.cfi_offset 4, -8
 1117              		.cfi_offset 14, -4
 1118 0456 84B0     		sub	sp, sp, #16	@,,
 1119              	.LCFI11:
 1120              		.cfi_def_cfa_offset 24
 1121 0458 0190     		str	r0, [sp, #4]	@ distance, distance
 1122 045a 0091     		str	r1, [sp]	@ time, time
 266:code/main.c   **** 
 267:code/main.c   ****   float f_speed;
 268:code/main.c   **** 
 269:code/main.c   ****   if (time == 0) {
 1123              		.loc 1 269 0
 1124 045c 009B     		ldr	r3, [sp]	@ tmp115, time
 1125 045e 002B     		cmp	r3, #0	@ tmp115,
 1126 0460 02D1     		bne	.L104	@,
 270:code/main.c   **** 
 271:code/main.c   ****     f_speed = 0;
 1127              		.loc 1 271 0
 1128 0462 0023     		movs	r3, #0	@ tmp116,
 1129 0464 0393     		str	r3, [sp, #12]	@ tmp116, f_speed
 1130 0466 0FE0     		b	.L105	@
 1131              	.L104:
 272:code/main.c   **** 
 273:code/main.c   ****   } else {
 274:code/main.c   **** 
 275:code/main.c   ****     f_speed = (distance * 3600) / time;
 1132              		.loc 1 275 0
 1133 0468 1049     		ldr	r1, .L111	@,
 1134 046a 0198     		ldr	r0, [sp, #4]	@, distance
 1135 046c FFF7FEFF 		bl	__aeabi_fmul	@
 1136 0470 031C     		adds	r3, r0, #0	@ tmp117,
 1137 0472 1C1C     		adds	r4, r3, #0	@ D.4730, tmp117
 1138 0474 0098     		ldr	r0, [sp]	@, time
 1139 0476 FFF7FEFF 		bl	__aeabi_ui2f	@
 1140 047a 031C     		adds	r3, r0, #0	@ D.4730,
 1141 047c 191C     		adds	r1, r3, #0	@, D.4730
 1142 047e 201C     		adds	r0, r4, #0	@, D.4730
 1143 0480 FFF7FEFF 		bl	__aeabi_fdiv	@
 1144 0484 031C     		adds	r3, r0, #0	@ tmp118,
 1145 0486 0393     		str	r3, [sp, #12]	@ tmp118, f_speed
 1146              	.L105:
 276:code/main.c   **** 
 277:code/main.c   ****   }
ARM GAS  /tmp/ccLwwf6o.s 			page 26


 278:code/main.c   ****   
 279:code/main.c   ****   if (f_speed > 99.99) {
 1147              		.loc 1 279 0
 1148 0488 0398     		ldr	r0, [sp, #12]	@, f_speed
 1149 048a FFF7FEFF 		bl	__aeabi_f2d	@
 1150 048e 084A     		ldr	r2, .L111+4	@,
 1151 0490 084B     		ldr	r3, .L111+8	@,
 1152 0492 FFF7FEFF 		bl	__aeabi_dcmpgt	@
 1153 0496 031E     		subs	r3, r0, #0	@ tmp119,,
 1154 0498 03D0     		beq	.L110	@,
 280:code/main.c   **** 
 281:code/main.c   ****     return f_speed = 99.99;
 1155              		.loc 1 281 0
 1156 049a 074B     		ldr	r3, .L111+12	@ tmp120,
 1157 049c 0393     		str	r3, [sp, #12]	@ tmp120, f_speed
 1158 049e 039B     		ldr	r3, [sp, #12]	@ D.4730, f_speed
 1159 04a0 00E0     		b	.L108	@
 1160              	.L110:
 282:code/main.c   **** 
 283:code/main.c   ****   } else {
 284:code/main.c   **** 
 285:code/main.c   ****     return f_speed;
 1161              		.loc 1 285 0
 1162 04a2 039B     		ldr	r3, [sp, #12]	@ D.4730, f_speed
 1163              	.L108:
 286:code/main.c   **** 
 287:code/main.c   ****   }
 288:code/main.c   **** 
 289:code/main.c   **** }
 1164              		.loc 1 289 0
 1165 04a4 181C     		adds	r0, r3, #0	@, <retval>
 1166 04a6 04B0     		add	sp, sp, #16	@,,
 1167              		@ sp needed	@
 1168 04a8 10BD     		pop	{r4, pc}
 1169              	.L112:
 1170 04aa C046     		.align	2
 1171              	.L111:
 1172 04ac 00006145 		.word	1163984896
 1173 04b0 8FC2F528 		.word	687194767
 1174 04b4 5CFF5840 		.word	1079574364
 1175 04b8 E1FAC742 		.word	1120402145
 1176              		.cfi_endproc
 1177              	.LFE19:
 1178              		.size	get_speed, .-get_speed
 1179              		.global	__aeabi_f2uiz
 1180              		.align	2
 1181              		.global	get_cadence
 1182              		.code	16
 1183              		.thumb_func
 1184              		.type	get_cadence, %function
 1185              	get_cadence:
 1186              	.LFB20:
 290:code/main.c   **** 
 291:code/main.c   **** uint32_t get_cadence(uint32_t crank, uint32_t time){
 1187              		.loc 1 291 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccLwwf6o.s 			page 27


 1190              		@ frame_needed = 0, uses_anonymous_args = 0
 1191 04bc 00B5     		push	{lr}	@
 1192              	.LCFI12:
 1193              		.cfi_def_cfa_offset 4
 1194              		.cfi_offset 14, -4
 1195 04be 85B0     		sub	sp, sp, #20	@,,
 1196              	.LCFI13:
 1197              		.cfi_def_cfa_offset 24
 1198 04c0 0190     		str	r0, [sp, #4]	@ crank, crank
 1199 04c2 0091     		str	r1, [sp]	@ time, time
 292:code/main.c   **** 
 293:code/main.c   ****   float cadence, cadence_5;
 294:code/main.c   **** 
 295:code/main.c   ****   if (time == 0) {
 1200              		.loc 1 295 0
 1201 04c4 009B     		ldr	r3, [sp]	@ tmp116, time
 1202 04c6 002B     		cmp	r3, #0	@ tmp116,
 1203 04c8 02D1     		bne	.L114	@,
 296:code/main.c   **** 
 297:code/main.c   ****     cadence = 0;
 1204              		.loc 1 297 0
 1205 04ca 0023     		movs	r3, #0	@ tmp117,
 1206 04cc 0393     		str	r3, [sp, #12]	@ tmp117, cadence
 1207 04ce 22E0     		b	.L115	@
 1208              	.L114:
 298:code/main.c   **** 
 299:code/main.c   ****   } else {
 300:code/main.c   **** 
 301:code/main.c   ****     cadence = (crank * 60) / time;
 1209              		.loc 1 301 0
 1210 04d0 019A     		ldr	r2, [sp, #4]	@ tmp118, crank
 1211 04d2 1300     		movs	r3, r2	@ tmp119, tmp118
 1212 04d4 1B01     		lsls	r3, r3, #4	@ tmp119, tmp119,
 1213 04d6 9B1A     		subs	r3, r3, r2	@ tmp119, tmp119, tmp118
 1214 04d8 9B00     		lsls	r3, r3, #2	@ tmp120, tmp119,
 1215 04da 0099     		ldr	r1, [sp]	@, time
 1216 04dc 1800     		movs	r0, r3	@, D.4733
 1217 04de FFF7FEFF 		bl	__aeabi_uidiv	@
 1218 04e2 0300     		movs	r3, r0	@ tmp123,
 1219 04e4 1800     		movs	r0, r3	@, D.4733
 1220 04e6 FFF7FEFF 		bl	__aeabi_ui2f	@
 1221 04ea 031C     		adds	r3, r0, #0	@ tmp124,
 1222 04ec 0393     		str	r3, [sp, #12]	@ tmp124, cadence
 302:code/main.c   ****     cadence_5 = cadence / 5;
 1223              		.loc 1 302 0
 1224 04ee 1249     		ldr	r1, .L121	@,
 1225 04f0 0398     		ldr	r0, [sp, #12]	@, cadence
 1226 04f2 FFF7FEFF 		bl	__aeabi_fdiv	@
 1227 04f6 031C     		adds	r3, r0, #0	@ tmp125,
 1228 04f8 0293     		str	r3, [sp, #8]	@ tmp125, cadence_5
 303:code/main.c   ****     cadence = (uint32_t) (5 * cadence_5);
 1229              		.loc 1 303 0
 1230 04fa 0F49     		ldr	r1, .L121	@,
 1231 04fc 0298     		ldr	r0, [sp, #8]	@, cadence_5
 1232 04fe FFF7FEFF 		bl	__aeabi_fmul	@
 1233 0502 031C     		adds	r3, r0, #0	@ tmp126,
 1234 0504 181C     		adds	r0, r3, #0	@, D.4734
ARM GAS  /tmp/ccLwwf6o.s 			page 28


 1235 0506 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1236 050a 0300     		movs	r3, r0	@ D.4733,
 1237 050c 1800     		movs	r0, r3	@, D.4733
 1238 050e FFF7FEFF 		bl	__aeabi_ui2f	@
 1239 0512 031C     		adds	r3, r0, #0	@ tmp127,
 1240 0514 0393     		str	r3, [sp, #12]	@ tmp127, cadence
 1241              	.L115:
 304:code/main.c   **** 
 305:code/main.c   ****   }
 306:code/main.c   **** 
 307:code/main.c   ****   if (cadence > 999) {
 1242              		.loc 1 307 0
 1243 0516 0949     		ldr	r1, .L121+4	@,
 1244 0518 0398     		ldr	r0, [sp, #12]	@, cadence
 1245 051a FFF7FEFF 		bl	__aeabi_fcmpgt	@
 1246 051e 031E     		subs	r3, r0, #0	@ tmp128,,
 1247 0520 03D0     		beq	.L120	@,
 308:code/main.c   **** 
 309:code/main.c   ****     return cadence = 999;
 1248              		.loc 1 309 0
 1249 0522 064B     		ldr	r3, .L121+4	@ tmp129,
 1250 0524 0393     		str	r3, [sp, #12]	@ tmp129, cadence
 1251 0526 064B     		ldr	r3, .L121+8	@ D.4732,
 1252 0528 03E0     		b	.L118	@
 1253              	.L120:
 310:code/main.c   **** 
 311:code/main.c   ****   } else {
 312:code/main.c   **** 
 313:code/main.c   ****     return cadence;
 1254              		.loc 1 313 0
 1255 052a 0398     		ldr	r0, [sp, #12]	@, cadence
 1256 052c FFF7FEFF 		bl	__aeabi_f2uiz	@
 1257 0530 0300     		movs	r3, r0	@ D.4732,
 1258              	.L118:
 314:code/main.c   **** 
 315:code/main.c   ****   }
 316:code/main.c   **** 
 317:code/main.c   **** }
 1259              		.loc 1 317 0
 1260 0532 1800     		movs	r0, r3	@, <retval>
 1261 0534 05B0     		add	sp, sp, #20	@,,
 1262              		@ sp needed	@
 1263 0536 00BD     		pop	{pc}
 1264              	.L122:
 1265              		.align	2
 1266              	.L121:
 1267 0538 0000A040 		.word	1084227584
 1268 053c 00C07944 		.word	1148829696
 1269 0540 E7030000 		.word	999
 1270              		.cfi_endproc
 1271              	.LFE20:
 1272              		.size	get_cadence, .-get_cadence
 1273              		.align	2
 1274              		.global	refresh_segment
 1275              		.code	16
 1276              		.thumb_func
 1277              		.type	refresh_segment, %function
ARM GAS  /tmp/ccLwwf6o.s 			page 29


 1278              	refresh_segment:
 1279              	.LFB21:
 318:code/main.c   **** 
 319:code/main.c   **** void refresh_segment(void) {
 1280              		.loc 1 319 0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 0
 1283              		@ frame_needed = 0, uses_anonymous_args = 0
 1284 0544 10B5     		push	{r4, lr}	@
 1285              	.LCFI14:
 1286              		.cfi_def_cfa_offset 8
 1287              		.cfi_offset 4, -8
 1288              		.cfi_offset 14, -4
 320:code/main.c   **** 
 321:code/main.c   ****   if (mode == 0xA){
 1289              		.loc 1 321 0
 1290 0546 1C4B     		ldr	r3, .L129	@ tmp125,
 1291 0548 1B68     		ldr	r3, [r3]	@ D.4735, mode
 1292 054a 0A2B     		cmp	r3, #10	@ D.4735,
 1293 054c 09D1     		bne	.L124	@,
 322:code/main.c   **** 
 323:code/main.c   ****     display_segment(mode, total_distance_f_bcd, total_distance_b_bcd);
 1294              		.loc 1 323 0
 1295 054e 1A4B     		ldr	r3, .L129	@ tmp126,
 1296 0550 1868     		ldr	r0, [r3]	@ D.4735, mode
 1297 0552 1A4B     		ldr	r3, .L129+4	@ tmp127,
 1298 0554 1968     		ldr	r1, [r3]	@ D.4735, total_distance_f_bcd
 1299 0556 1A4B     		ldr	r3, .L129+8	@ tmp128,
 1300 0558 1B68     		ldr	r3, [r3]	@ D.4735, total_distance_b_bcd
 1301 055a 1A00     		movs	r2, r3	@, D.4735
 1302 055c FFF7FEFF 		bl	display_segment	@
 324:code/main.c   **** 
 325:code/main.c   ****   } else if (mode == 0xB) {
 326:code/main.c   **** 
 327:code/main.c   ****     display_segment(mode, time_h_bcd, time_m_bcd);
 328:code/main.c   ****     
 329:code/main.c   **** 
 330:code/main.c   ****   } else if (mode == 0xC) {
 331:code/main.c   **** 
 332:code/main.c   ****     display_segment(mode, speed_f_bcd, speed_b_bcd);
 333:code/main.c   ****     
 334:code/main.c   **** 
 335:code/main.c   ****   } else if (mode == 0xD){
 336:code/main.c   **** 
 337:code/main.c   ****     display_segment(mode, cadence_bcd, 0);
 338:code/main.c   **** 
 339:code/main.c   ****   }
 340:code/main.c   **** 
 341:code/main.c   **** }
 1303              		.loc 1 341 0
 1304 0560 27E0     		b	.L128	@
 1305              	.L124:
 325:code/main.c   **** 
 1306              		.loc 1 325 0
 1307 0562 154B     		ldr	r3, .L129	@ tmp129,
 1308 0564 1B68     		ldr	r3, [r3]	@ D.4735, mode
 1309 0566 0B2B     		cmp	r3, #11	@ D.4735,
ARM GAS  /tmp/ccLwwf6o.s 			page 30


 1310 0568 09D1     		bne	.L126	@,
 327:code/main.c   ****     
 1311              		.loc 1 327 0
 1312 056a 134B     		ldr	r3, .L129	@ tmp130,
 1313 056c 1868     		ldr	r0, [r3]	@ D.4735, mode
 1314 056e 154B     		ldr	r3, .L129+12	@ tmp131,
 1315 0570 1968     		ldr	r1, [r3]	@ D.4735, time_h_bcd
 1316 0572 154B     		ldr	r3, .L129+16	@ tmp132,
 1317 0574 1B68     		ldr	r3, [r3]	@ D.4735, time_m_bcd
 1318 0576 1A00     		movs	r2, r3	@, D.4735
 1319 0578 FFF7FEFF 		bl	display_segment	@
 1320              		.loc 1 341 0
 1321 057c 19E0     		b	.L128	@
 1322              	.L126:
 330:code/main.c   **** 
 1323              		.loc 1 330 0
 1324 057e 0E4B     		ldr	r3, .L129	@ tmp133,
 1325 0580 1B68     		ldr	r3, [r3]	@ D.4735, mode
 1326 0582 0C2B     		cmp	r3, #12	@ D.4735,
 1327 0584 09D1     		bne	.L127	@,
 332:code/main.c   ****     
 1328              		.loc 1 332 0
 1329 0586 0C4B     		ldr	r3, .L129	@ tmp134,
 1330 0588 1868     		ldr	r0, [r3]	@ D.4735, mode
 1331 058a 104B     		ldr	r3, .L129+20	@ tmp135,
 1332 058c 1968     		ldr	r1, [r3]	@ D.4735, speed_f_bcd
 1333 058e 104B     		ldr	r3, .L129+24	@ tmp136,
 1334 0590 1B68     		ldr	r3, [r3]	@ D.4735, speed_b_bcd
 1335 0592 1A00     		movs	r2, r3	@, D.4735
 1336 0594 FFF7FEFF 		bl	display_segment	@
 1337              		.loc 1 341 0
 1338 0598 0BE0     		b	.L128	@
 1339              	.L127:
 335:code/main.c   **** 
 1340              		.loc 1 335 0
 1341 059a 074B     		ldr	r3, .L129	@ tmp137,
 1342 059c 1B68     		ldr	r3, [r3]	@ D.4735, mode
 1343 059e 0D2B     		cmp	r3, #13	@ D.4735,
 1344 05a0 07D1     		bne	.L128	@,
 337:code/main.c   **** 
 1345              		.loc 1 337 0
 1346 05a2 054B     		ldr	r3, .L129	@ tmp138,
 1347 05a4 1868     		ldr	r0, [r3]	@ D.4735, mode
 1348 05a6 0B4B     		ldr	r3, .L129+28	@ tmp139,
 1349 05a8 1B68     		ldr	r3, [r3]	@ D.4735, cadence_bcd
 1350 05aa 0022     		movs	r2, #0	@,
 1351 05ac 1900     		movs	r1, r3	@, D.4735
 1352 05ae FFF7FEFF 		bl	display_segment	@
 1353              	.L128:
 1354              		.loc 1 341 0
 1355 05b2 C046     		nop
 1356              		@ sp needed	@
 1357 05b4 10BD     		pop	{r4, pc}
 1358              	.L130:
 1359 05b6 C046     		.align	2
 1360              	.L129:
 1361 05b8 00000000 		.word	mode
ARM GAS  /tmp/ccLwwf6o.s 			page 31


 1362 05bc 00000000 		.word	total_distance_f_bcd
 1363 05c0 00000000 		.word	total_distance_b_bcd
 1364 05c4 00000000 		.word	time_h_bcd
 1365 05c8 00000000 		.word	time_m_bcd
 1366 05cc 00000000 		.word	speed_f_bcd
 1367 05d0 00000000 		.word	speed_b_bcd
 1368 05d4 00000000 		.word	cadence_bcd
 1369              		.cfi_endproc
 1370              	.LFE21:
 1371              		.size	refresh_segment, .-refresh_segment
 1372              		.align	2
 1373              		.global	initiate
 1374              		.code	16
 1375              		.thumb_func
 1376              		.type	initiate, %function
 1377              	initiate:
 1378              	.LFB22:
 342:code/main.c   **** 
 343:code/main.c   **** void initiate(void) {
 1379              		.loc 1 343 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 1383 05d8 10B5     		push	{r4, lr}	@
 1384              	.LCFI15:
 1385              		.cfi_def_cfa_offset 8
 1386              		.cfi_offset 4, -8
 1387              		.cfi_offset 14, -4
 344:code/main.c   **** 
 345:code/main.c   ****   post_time = 0;
 1388              		.loc 1 345 0
 1389 05da 1E4B     		ldr	r3, .L133	@ tmp113,
 1390 05dc 0022     		movs	r2, #0	@ tmp114,
 1391 05de 1A60     		str	r2, [r3]	@ tmp114, post_time
 346:code/main.c   ****   wheel = 700;
 1392              		.loc 1 346 0
 1393 05e0 1D4B     		ldr	r3, .L133+4	@ tmp115,
 1394 05e2 AF22     		movs	r2, #175	@ tmp151,
 1395 05e4 9200     		lsls	r2, r2, #2	@ tmp116, tmp151,
 1396 05e6 1A60     		str	r2, [r3]	@ tmp116, wheel
 347:code/main.c   ****   wheel_d = 2136;
 1397              		.loc 1 347 0
 1398 05e8 1C4B     		ldr	r3, .L133+8	@ tmp117,
 1399 05ea 1D4A     		ldr	r2, .L133+12	@ tmp118,
 1400 05ec 1A60     		str	r2, [r3]	@ tmp118, wheel_d
 348:code/main.c   ****   speed_red = false;
 1401              		.loc 1 348 0
 1402 05ee 1D4B     		ldr	r3, .L133+16	@ tmp119,
 1403 05f0 0022     		movs	r2, #0	@ tmp120,
 1404 05f2 1A70     		strb	r2, [r3]	@ tmp121, speed_red
 349:code/main.c   ****   isNight = false;
 1405              		.loc 1 349 0
 1406 05f4 1C4B     		ldr	r3, .L133+20	@ tmp122,
 1407 05f6 0022     		movs	r2, #0	@ tmp123,
 1408 05f8 1A70     		strb	r2, [r3]	@ tmp124, isNight
 350:code/main.c   ****   switchDisplay = false;
 1409              		.loc 1 350 0
ARM GAS  /tmp/ccLwwf6o.s 			page 32


 1410 05fa 1C4B     		ldr	r3, .L133+24	@ tmp125,
 1411 05fc 0022     		movs	r2, #0	@ tmp126,
 1412 05fe 1A70     		strb	r2, [r3]	@ tmp127, switchDisplay
 351:code/main.c   ****   distance = 0;
 1413              		.loc 1 351 0
 1414 0600 1B4B     		ldr	r3, .L133+28	@ tmp128,
 1415 0602 0022     		movs	r2, #0	@ tmp129,
 1416 0604 1A60     		str	r2, [r3]	@ tmp129, distance
 352:code/main.c   ****   speed_f = 0;
 1417              		.loc 1 352 0
 1418 0606 1B4B     		ldr	r3, .L133+32	@ tmp130,
 1419 0608 0022     		movs	r2, #0	@ tmp131,
 1420 060a 1A60     		str	r2, [r3]	@ tmp131, speed_f
 353:code/main.c   ****   speed_b = 0;
 1421              		.loc 1 353 0
 1422 060c 1A4B     		ldr	r3, .L133+36	@ tmp132,
 1423 060e 0022     		movs	r2, #0	@ tmp133,
 1424 0610 1A60     		str	r2, [r3]	@ tmp133, speed_b
 354:code/main.c   ****   max_speed = 0;
 1425              		.loc 1 354 0
 1426 0612 1A4B     		ldr	r3, .L133+40	@ tmp134,
 1427 0614 0022     		movs	r2, #0	@ tmp135,
 1428 0616 1A60     		str	r2, [r3]	@ tmp135, max_speed
 355:code/main.c   ****   total_distance_f = 0;
 1429              		.loc 1 355 0
 1430 0618 194B     		ldr	r3, .L133+44	@ tmp136,
 1431 061a 0022     		movs	r2, #0	@ tmp137,
 1432 061c 1A60     		str	r2, [r3]	@ tmp137, total_distance_f
 356:code/main.c   ****   total_distance_b = 0;
 1433              		.loc 1 356 0
 1434 061e 194B     		ldr	r3, .L133+48	@ tmp138,
 1435 0620 0022     		movs	r2, #0	@ tmp139,
 1436 0622 1A60     		str	r2, [r3]	@ tmp139, total_distance_b
 357:code/main.c   ****   post_distance = 0;
 1437              		.loc 1 357 0
 1438 0624 184B     		ldr	r3, .L133+52	@ tmp140,
 1439 0626 0022     		movs	r2, #0	@ tmp141,
 1440 0628 1A60     		str	r2, [r3]	@ tmp141, post_distance
 358:code/main.c   ****   mode = 0xA;
 1441              		.loc 1 358 0
 1442 062a 184B     		ldr	r3, .L133+56	@ tmp142,
 1443 062c 0A22     		movs	r2, #10	@ tmp143,
 1444 062e 1A60     		str	r2, [r3]	@ tmp143, mode
 359:code/main.c   ****   stop_time_mode = 0;
 1445              		.loc 1 359 0
 1446 0630 174B     		ldr	r3, .L133+60	@ tmp144,
 1447 0632 0022     		movs	r2, #0	@ tmp145,
 1448 0634 1A60     		str	r2, [r3]	@ tmp145, stop_time_mode
 360:code/main.c   ****   post_fork = 0;
 1449              		.loc 1 360 0
 1450 0636 174B     		ldr	r3, .L133+64	@ tmp146,
 1451 0638 0022     		movs	r2, #0	@ tmp147,
 1452 063a 1A60     		str	r2, [r3]	@ tmp147, post_fork
 361:code/main.c   **** 
 362:code/main.c   ****   display_segment(mode, total_distance_f, total_distance_b);
 1453              		.loc 1 362 0
 1454 063c 134B     		ldr	r3, .L133+56	@ tmp148,
ARM GAS  /tmp/ccLwwf6o.s 			page 33


 1455 063e 1868     		ldr	r0, [r3]	@ D.4736, mode
 1456 0640 0F4B     		ldr	r3, .L133+44	@ tmp149,
 1457 0642 1968     		ldr	r1, [r3]	@ D.4736, total_distance_f
 1458 0644 0F4B     		ldr	r3, .L133+48	@ tmp150,
 1459 0646 1B68     		ldr	r3, [r3]	@ D.4736, total_distance_b
 1460 0648 1A00     		movs	r2, r3	@, D.4736
 1461 064a FFF7FEFF 		bl	display_segment	@
 363:code/main.c   ****   //display_oled();
 364:code/main.c   **** 
 365:code/main.c   ****   return;
 1462              		.loc 1 365 0
 1463 064e C046     		nop
 366:code/main.c   ****     
 367:code/main.c   **** }
 1464              		.loc 1 367 0
 1465              		@ sp needed	@
 1466 0650 10BD     		pop	{r4, pc}
 1467              	.L134:
 1468 0652 C046     		.align	2
 1469              	.L133:
 1470 0654 00000000 		.word	post_time
 1471 0658 00000000 		.word	wheel
 1472 065c 00000000 		.word	wheel_d
 1473 0660 58080000 		.word	2136
 1474 0664 00000000 		.word	speed_red
 1475 0668 00000000 		.word	isNight
 1476 066c 00000000 		.word	switchDisplay
 1477 0670 00000000 		.word	distance
 1478 0674 00000000 		.word	speed_f
 1479 0678 00000000 		.word	speed_b
 1480 067c 00000000 		.word	max_speed
 1481 0680 00000000 		.word	total_distance_f
 1482 0684 00000000 		.word	total_distance_b
 1483 0688 00000000 		.word	post_distance
 1484 068c 00000000 		.word	mode
 1485 0690 00000000 		.word	stop_time_mode
 1486 0694 00000000 		.word	post_fork
 1487              		.cfi_endproc
 1488              	.LFE22:
 1489              		.size	initiate, .-initiate
 1490              		.global	__aeabi_fsub
 1491              		.align	2
 1492              		.global	main
 1493              		.code	16
 1494              		.thumb_func
 1495              		.type	main, %function
 1496              	main:
 1497              	.LFB23:
 368:code/main.c   **** 
 369:code/main.c   **** //------------------------------------------------------------------------------
 370:code/main.c   **** // Main Function
 371:code/main.c   **** //------------------------------------------------------------------------------
 372:code/main.c   **** 
 373:code/main.c   **** int main(void) {
 1498              		.loc 1 373 0
 1499              		.cfi_startproc
 1500              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccLwwf6o.s 			page 34


 1501              		@ frame_needed = 0, uses_anonymous_args = 0
 1502 0698 10B5     		push	{r4, lr}	@
 1503              	.LCFI16:
 1504              		.cfi_def_cfa_offset 8
 1505              		.cfi_offset 4, -8
 1506              		.cfi_offset 14, -4
 374:code/main.c   **** 
 375:code/main.c   ****   initiate();
 1507              		.loc 1 375 0
 1508 069a FFF7FEFF 		bl	initiate	@
 1509              	.L146:
 376:code/main.c   **** 
 377:code/main.c   ****   while(1) {
 378:code/main.c   **** 
 379:code/main.c   ****     check_time_stop();
 1510              		.loc 1 379 0
 1511 069e FFF7FEFF 		bl	check_time_stop	@
 380:code/main.c   **** 
 381:code/main.c   ****     if (wait_for_press()) { // 等待三秒或等待按钮按下后
 1512              		.loc 1 381 0
 1513 06a2 FFF7FEFF 		bl	wait_for_press	@
 1514 06a6 031E     		subs	r3, r0, #0	@ tmp192,,
 1515 06a8 00D1     		bne	.LCB1194	@
 1516 06aa 72E0     		b	.L136	@long jump	@
 1517              	.LCB1194:
 382:code/main.c   **** 
 383:code/main.c   ****       // 按钮按下后，处理按钮操作
 384:code/main.c   ****       if (setting()) {
 1518              		.loc 1 384 0
 1519 06ac FFF7FEFF 		bl	setting	@
 1520 06b0 031E     		subs	r3, r0, #0	@ tmp194,,
 1521 06b2 02D0     		beq	.L137	@,
 385:code/main.c   ****         
 386:code/main.c   ****         // 设置操作，更改wheel 
 387:code/main.c   ****         wait_for_setting();
 1522              		.loc 1 387 0
 1523 06b4 FFF7FEFF 		bl	wait_for_setting	@
 1524 06b8 6BE0     		b	.L136	@
 1525              	.L137:
 388:code/main.c   **** 
 389:code/main.c   ****       } else {
 390:code/main.c   **** 
 391:code/main.c   ****         if (press_trip()) {
 1526              		.loc 1 391 0
 1527 06ba FFF7FEFF 		bl	press_trip	@
 1528 06be 031E     		subs	r3, r0, #0	@ tmp196,,
 1529 06c0 11D0     		beq	.L138	@,
 392:code/main.c   **** 
 393:code/main.c   ****           total_distance = 0;
 1530              		.loc 1 393 0
 1531 06c2 AA4B     		ldr	r3, .L147	@ tmp198,
 1532 06c4 0022     		movs	r2, #0	@ tmp199,
 1533 06c6 1A60     		str	r2, [r3]	@ tmp199, total_distance
 394:code/main.c   ****           clear_fork();
 1534              		.loc 1 394 0
 1535 06c8 FFF7FEFF 		bl	clear_fork	@
 395:code/main.c   ****           post_time = 0;
ARM GAS  /tmp/ccLwwf6o.s 			page 35


 1536              		.loc 1 395 0
 1537 06cc A84B     		ldr	r3, .L147+4	@ tmp200,
 1538 06ce 0022     		movs	r2, #0	@ tmp201,
 1539 06d0 1A60     		str	r2, [r3]	@ tmp201, post_time
 396:code/main.c   ****           clear_timer_long();
 1540              		.loc 1 396 0
 1541 06d2 FFF7FEFF 		bl	clear_timer_long	@
 397:code/main.c   ****           display_segment(mode, 0, 0);
 1542              		.loc 1 397 0
 1543 06d6 A74B     		ldr	r3, .L147+8	@ tmp202,
 1544 06d8 1B68     		ldr	r3, [r3]	@ D.4738, mode
 1545 06da 0022     		movs	r2, #0	@,
 1546 06dc 0021     		movs	r1, #0	@,
 1547 06de 1800     		movs	r0, r3	@, D.4738
 1548 06e0 FFF7FEFF 		bl	display_segment	@
 1549 06e4 55E0     		b	.L136	@
 1550              	.L138:
 398:code/main.c   ****                
 399:code/main.c   ****         } else if (press_mode()) {     // A里程  B时间  C速度  D踏频  E设置
 1551              		.loc 1 399 0
 1552 06e6 FFF7FEFF 		bl	press_mode	@
 1553 06ea 031E     		subs	r3, r0, #0	@ tmp203,,
 1554 06ec 45D0     		beq	.L139	@,
 400:code/main.c   **** 
 401:code/main.c   ****           if (mode == 0xA){
 1555              		.loc 1 401 0
 1556 06ee A14B     		ldr	r3, .L147+8	@ tmp205,
 1557 06f0 1B68     		ldr	r3, [r3]	@ D.4738, mode
 1558 06f2 0A2B     		cmp	r3, #10	@ D.4738,
 1559 06f4 0CD1     		bne	.L140	@,
 402:code/main.c   **** 
 403:code/main.c   ****             mode = 0xB;
 1560              		.loc 1 403 0
 1561 06f6 9F4B     		ldr	r3, .L147+8	@ tmp206,
 1562 06f8 0B22     		movs	r2, #11	@ tmp207,
 1563 06fa 1A60     		str	r2, [r3]	@ tmp207, mode
 404:code/main.c   ****             display_segment(mode, time_h_bcd, time_m_bcd);
 1564              		.loc 1 404 0
 1565 06fc 9D4B     		ldr	r3, .L147+8	@ tmp208,
 1566 06fe 1868     		ldr	r0, [r3]	@ D.4738, mode
 1567 0700 9D4B     		ldr	r3, .L147+12	@ tmp209,
 1568 0702 1968     		ldr	r1, [r3]	@ D.4738, time_h_bcd
 1569 0704 9D4B     		ldr	r3, .L147+16	@ tmp210,
 1570 0706 1B68     		ldr	r3, [r3]	@ D.4738, time_m_bcd
 1571 0708 1A00     		movs	r2, r3	@, D.4738
 1572 070a FFF7FEFF 		bl	display_segment	@
 1573 070e 30E0     		b	.L141	@
 1574              	.L140:
 405:code/main.c   **** 
 406:code/main.c   ****           } else if (mode == 0xB) {
 1575              		.loc 1 406 0
 1576 0710 984B     		ldr	r3, .L147+8	@ tmp211,
 1577 0712 1B68     		ldr	r3, [r3]	@ D.4738, mode
 1578 0714 0B2B     		cmp	r3, #11	@ D.4738,
 1579 0716 0CD1     		bne	.L142	@,
 407:code/main.c   **** 
 408:code/main.c   ****             mode = 0xC;
ARM GAS  /tmp/ccLwwf6o.s 			page 36


 1580              		.loc 1 408 0
 1581 0718 964B     		ldr	r3, .L147+8	@ tmp212,
 1582 071a 0C22     		movs	r2, #12	@ tmp213,
 1583 071c 1A60     		str	r2, [r3]	@ tmp213, mode
 409:code/main.c   ****             display_segment(mode, speed_f_bcd, speed_b_bcd);
 1584              		.loc 1 409 0
 1585 071e 954B     		ldr	r3, .L147+8	@ tmp214,
 1586 0720 1868     		ldr	r0, [r3]	@ D.4738, mode
 1587 0722 974B     		ldr	r3, .L147+20	@ tmp215,
 1588 0724 1968     		ldr	r1, [r3]	@ D.4738, speed_f_bcd
 1589 0726 974B     		ldr	r3, .L147+24	@ tmp216,
 1590 0728 1B68     		ldr	r3, [r3]	@ D.4738, speed_b_bcd
 1591 072a 1A00     		movs	r2, r3	@, D.4738
 1592 072c FFF7FEFF 		bl	display_segment	@
 1593 0730 1FE0     		b	.L141	@
 1594              	.L142:
 410:code/main.c   **** 
 411:code/main.c   ****           } else if (mode == 0xC) {
 1595              		.loc 1 411 0
 1596 0732 904B     		ldr	r3, .L147+8	@ tmp217,
 1597 0734 1B68     		ldr	r3, [r3]	@ D.4738, mode
 1598 0736 0C2B     		cmp	r3, #12	@ D.4738,
 1599 0738 0BD1     		bne	.L143	@,
 412:code/main.c   **** 
 413:code/main.c   ****             mode = 0xD;
 1600              		.loc 1 413 0
 1601 073a 8E4B     		ldr	r3, .L147+8	@ tmp218,
 1602 073c 0D22     		movs	r2, #13	@ tmp219,
 1603 073e 1A60     		str	r2, [r3]	@ tmp219, mode
 414:code/main.c   ****             display_segment(mode, cadence_bcd, 0);
 1604              		.loc 1 414 0
 1605 0740 8C4B     		ldr	r3, .L147+8	@ tmp220,
 1606 0742 1868     		ldr	r0, [r3]	@ D.4738, mode
 1607 0744 904B     		ldr	r3, .L147+28	@ tmp221,
 1608 0746 1B68     		ldr	r3, [r3]	@ D.4738, cadence_bcd
 1609 0748 0022     		movs	r2, #0	@,
 1610 074a 1900     		movs	r1, r3	@, D.4738
 1611 074c FFF7FEFF 		bl	display_segment	@
 1612 0750 0FE0     		b	.L141	@
 1613              	.L143:
 415:code/main.c   **** 
 416:code/main.c   ****           } else if (mode == 0xD){
 1614              		.loc 1 416 0
 1615 0752 884B     		ldr	r3, .L147+8	@ tmp222,
 1616 0754 1B68     		ldr	r3, [r3]	@ D.4738, mode
 1617 0756 0D2B     		cmp	r3, #13	@ D.4738,
 1618 0758 0BD1     		bne	.L141	@,
 417:code/main.c   **** 
 418:code/main.c   ****             mode = 0xA;
 1619              		.loc 1 418 0
 1620 075a 864B     		ldr	r3, .L147+8	@ tmp223,
 1621 075c 0A22     		movs	r2, #10	@ tmp224,
 1622 075e 1A60     		str	r2, [r3]	@ tmp224, mode
 419:code/main.c   ****             display_segment(mode, total_distance_f_bcd, total_distance_b_bcd);
 1623              		.loc 1 419 0
 1624 0760 844B     		ldr	r3, .L147+8	@ tmp225,
 1625 0762 1868     		ldr	r0, [r3]	@ D.4738, mode
ARM GAS  /tmp/ccLwwf6o.s 			page 37


 1626 0764 894B     		ldr	r3, .L147+32	@ tmp226,
 1627 0766 1968     		ldr	r1, [r3]	@ D.4738, total_distance_f_bcd
 1628 0768 894B     		ldr	r3, .L147+36	@ tmp227,
 1629 076a 1B68     		ldr	r3, [r3]	@ D.4738, total_distance_b_bcd
 1630 076c 1A00     		movs	r2, r3	@, D.4738
 1631 076e FFF7FEFF 		bl	display_segment	@
 1632              	.L141:
 420:code/main.c   **** 
 421:code/main.c   ****           }
 422:code/main.c   ****             switchDisplay = true;
 1633              		.loc 1 422 0
 1634 0772 884B     		ldr	r3, .L147+40	@ tmp228,
 1635 0774 0122     		movs	r2, #1	@ tmp229,
 1636 0776 1A70     		strb	r2, [r3]	@ tmp230, switchDisplay
 1637 0778 0BE0     		b	.L136	@
 1638              	.L139:
 423:code/main.c   **** 
 424:code/main.c   ****         } else if (press_d_mode()) {
 1639              		.loc 1 424 0
 1640 077a FFF7FEFF 		bl	press_d_mode	@
 1641 077e 031E     		subs	r3, r0, #0	@ tmp231,,
 1642 0780 07D0     		beq	.L136	@,
 425:code/main.c   **** 
 426:code/main.c   ****           isNight = ~ isNight;
 1643              		.loc 1 426 0
 1644 0782 854B     		ldr	r3, .L147+44	@ tmp233,
 1645 0784 1B78     		ldrb	r3, [r3]	@ D.4737, isNight
 1646 0786 DB43     		mvns	r3, r3	@ D.4739, D.4739
 1647 0788 5A1E     		subs	r2, r3, #1	@ tmp236, D.4739
 1648 078a 9341     		sbcs	r3, r3, r2	@ tmp235, D.4739, tmp236
 1649 078c DAB2     		uxtb	r2, r3	@ D.4737, tmp234
 1650 078e 824B     		ldr	r3, .L147+44	@ tmp237,
 1651 0790 1A70     		strb	r2, [r3]	@ tmp238, isNight
 1652              	.L136:
 427:code/main.c   **** 
 428:code/main.c   ****         }
 429:code/main.c   **** 
 430:code/main.c   ****       }
 431:code/main.c   **** 
 432:code/main.c   ****     }
 433:code/main.c   ****     // 按钮按下则在处理完按钮操作后立即刷新，没有按下则三秒刷新一次
 434:code/main.c   ****     
 435:code/main.c   ****     crank = read_crank();
 1653              		.loc 1 435 0
 1654 0792 FFF7FEFF 		bl	read_crank	@
 1655 0796 0200     		movs	r2, r0	@ D.4738,
 1656 0798 804B     		ldr	r3, .L147+48	@ tmp239,
 1657 079a 1A60     		str	r2, [r3]	@ D.4738, crank
 436:code/main.c   **** 
 437:code/main.c   ****     check_time_stop();
 1658              		.loc 1 437 0
 1659 079c FFF7FEFF 		bl	check_time_stop	@
 438:code/main.c   ****     
 439:code/main.c   ****     total_distance = get_distance(bike_fork, wheel_d);
 1660              		.loc 1 439 0
 1661 07a0 7F4B     		ldr	r3, .L147+52	@ tmp240,
 1662 07a2 1A68     		ldr	r2, [r3]	@ D.4738, bike_fork
ARM GAS  /tmp/ccLwwf6o.s 			page 38


 1663 07a4 7F4B     		ldr	r3, .L147+56	@ tmp241,
 1664 07a6 1B68     		ldr	r3, [r3]	@ D.4738, wheel_d
 1665 07a8 1900     		movs	r1, r3	@, D.4738
 1666 07aa 1000     		movs	r0, r2	@, D.4738
 1667 07ac FFF7FEFF 		bl	get_distance	@
 1668 07b0 021C     		adds	r2, r0, #0	@ D.4740,
 1669 07b2 6E4B     		ldr	r3, .L147	@ tmp242,
 1670 07b4 1A60     		str	r2, [r3]	@ D.4740, total_distance
 440:code/main.c   ****     distance = total_distance - post_distance;
 1671              		.loc 1 440 0
 1672 07b6 6D4B     		ldr	r3, .L147	@ tmp243,
 1673 07b8 1A68     		ldr	r2, [r3]	@ D.4740, total_distance
 1674 07ba 7B4B     		ldr	r3, .L147+60	@ tmp244,
 1675 07bc 1B68     		ldr	r3, [r3]	@ D.4740, post_distance
 1676 07be 191C     		adds	r1, r3, #0	@, D.4740
 1677 07c0 101C     		adds	r0, r2, #0	@, D.4740
 1678 07c2 FFF7FEFF 		bl	__aeabi_fsub	@
 1679 07c6 031C     		adds	r3, r0, #0	@ tmp245,
 1680 07c8 1A1C     		adds	r2, r3, #0	@ D.4740, tmp245
 1681 07ca 784B     		ldr	r3, .L147+64	@ tmp246,
 1682 07cc 1A60     		str	r2, [r3]	@ D.4740, distance
 441:code/main.c   ****     post_distance = total_distance;
 1683              		.loc 1 441 0
 1684 07ce 674B     		ldr	r3, .L147	@ tmp247,
 1685 07d0 1A68     		ldr	r2, [r3]	@ D.4740, total_distance
 1686 07d2 754B     		ldr	r3, .L147+60	@ tmp248,
 1687 07d4 1A60     		str	r2, [r3]	@ D.4740, post_distance
 442:code/main.c   ****     total_distance_f = (uint32_t) total_distance;
 1688              		.loc 1 442 0
 1689 07d6 654B     		ldr	r3, .L147	@ tmp249,
 1690 07d8 1B68     		ldr	r3, [r3]	@ D.4740, total_distance
 1691 07da 181C     		adds	r0, r3, #0	@, D.4740
 1692 07dc FFF7FEFF 		bl	__aeabi_f2uiz	@
 1693 07e0 0200     		movs	r2, r0	@ D.4738,
 1694 07e2 734B     		ldr	r3, .L147+68	@ tmp250,
 1695 07e4 1A60     		str	r2, [r3]	@ D.4738, total_distance_f
 443:code/main.c   ****     total_distance_b = (uint32_t) ((total_distance - total_distance_f) * 100);
 1696              		.loc 1 443 0
 1697 07e6 614B     		ldr	r3, .L147	@ tmp251,
 1698 07e8 1C68     		ldr	r4, [r3]	@ D.4740, total_distance
 1699 07ea 714B     		ldr	r3, .L147+68	@ tmp252,
 1700 07ec 1B68     		ldr	r3, [r3]	@ D.4738, total_distance_f
 1701 07ee 1800     		movs	r0, r3	@, D.4738
 1702 07f0 FFF7FEFF 		bl	__aeabi_ui2f	@
 1703 07f4 031C     		adds	r3, r0, #0	@ D.4740,
 1704 07f6 191C     		adds	r1, r3, #0	@, D.4740
 1705 07f8 201C     		adds	r0, r4, #0	@, D.4740
 1706 07fa FFF7FEFF 		bl	__aeabi_fsub	@
 1707 07fe 031C     		adds	r3, r0, #0	@ tmp253,
 1708 0800 6C49     		ldr	r1, .L147+72	@,
 1709 0802 181C     		adds	r0, r3, #0	@, D.4740
 1710 0804 FFF7FEFF 		bl	__aeabi_fmul	@
 1711 0808 031C     		adds	r3, r0, #0	@ tmp254,
 1712 080a 181C     		adds	r0, r3, #0	@, D.4740
 1713 080c FFF7FEFF 		bl	__aeabi_f2uiz	@
 1714 0810 0200     		movs	r2, r0	@ D.4738,
 1715 0812 694B     		ldr	r3, .L147+76	@ tmp255,
ARM GAS  /tmp/ccLwwf6o.s 			page 39


 1716 0814 1A60     		str	r2, [r3]	@ D.4738, total_distance_b
 444:code/main.c   ****     total_distance_f_bcd = int2bcd(total_distance_f);
 1717              		.loc 1 444 0
 1718 0816 664B     		ldr	r3, .L147+68	@ tmp256,
 1719 0818 1B68     		ldr	r3, [r3]	@ D.4738, total_distance_f
 1720 081a 1800     		movs	r0, r3	@, D.4738
 1721 081c FFF7FEFF 		bl	int2bcd	@
 1722 0820 0200     		movs	r2, r0	@ D.4738,
 1723 0822 5A4B     		ldr	r3, .L147+32	@ tmp257,
 1724 0824 1A60     		str	r2, [r3]	@ D.4738, total_distance_f_bcd
 445:code/main.c   ****     total_distance_b_bcd = int2bcd(total_distance_b);
 1725              		.loc 1 445 0
 1726 0826 644B     		ldr	r3, .L147+76	@ tmp258,
 1727 0828 1B68     		ldr	r3, [r3]	@ D.4738, total_distance_b
 1728 082a 1800     		movs	r0, r3	@, D.4738
 1729 082c FFF7FEFF 		bl	int2bcd	@
 1730 0830 0200     		movs	r2, r0	@ D.4738,
 1731 0832 574B     		ldr	r3, .L147+36	@ tmp259,
 1732 0834 1A60     		str	r2, [r3]	@ D.4738, total_distance_b_bcd
 446:code/main.c   **** 
 447:code/main.c   ****     if (stop_time_mode == 1) {
 1733              		.loc 1 447 0
 1734 0836 614B     		ldr	r3, .L147+80	@ tmp260,
 1735 0838 1B68     		ldr	r3, [r3]	@ D.4738, stop_time_mode
 1736 083a 012B     		cmp	r3, #1	@ D.4738,
 1737 083c 04D1     		bne	.L144	@,
 448:code/main.c   **** 
 449:code/main.c   ****       now_time = store_stop_time;
 1738              		.loc 1 449 0
 1739 083e 604B     		ldr	r3, .L147+84	@ tmp261,
 1740 0840 1A68     		ldr	r2, [r3]	@ D.4738, store_stop_time
 1741 0842 604B     		ldr	r3, .L147+88	@ tmp262,
 1742 0844 1A60     		str	r2, [r3]	@ D.4738, now_time
 1743 0846 04E0     		b	.L145	@
 1744              	.L144:
 450:code/main.c   **** 
 451:code/main.c   ****     } else {
 452:code/main.c   **** 
 453:code/main.c   ****       now_time = read_time_long();
 1745              		.loc 1 453 0
 1746 0848 FFF7FEFF 		bl	read_time_long	@
 1747 084c 0200     		movs	r2, r0	@ D.4738,
 1748 084e 5D4B     		ldr	r3, .L147+88	@ tmp263,
 1749 0850 1A60     		str	r2, [r3]	@ D.4738, now_time
 1750              	.L145:
 454:code/main.c   **** 
 455:code/main.c   ****     }
 456:code/main.c   ****     
 457:code/main.c   ****     time = now_time - post_time;
 1751              		.loc 1 457 0
 1752 0852 5C4B     		ldr	r3, .L147+88	@ tmp264,
 1753 0854 1A68     		ldr	r2, [r3]	@ D.4738, now_time
 1754 0856 464B     		ldr	r3, .L147+4	@ tmp265,
 1755 0858 1B68     		ldr	r3, [r3]	@ D.4738, post_time
 1756 085a D21A     		subs	r2, r2, r3	@ D.4738, D.4738, D.4738
 1757 085c 5A4B     		ldr	r3, .L147+92	@ tmp266,
 1758 085e 1A60     		str	r2, [r3]	@ D.4738, time
ARM GAS  /tmp/ccLwwf6o.s 			page 40


 458:code/main.c   ****     speed = get_speed(distance, time);
 1759              		.loc 1 458 0
 1760 0860 524B     		ldr	r3, .L147+64	@ tmp267,
 1761 0862 1A68     		ldr	r2, [r3]	@ D.4740, distance
 1762 0864 584B     		ldr	r3, .L147+92	@ tmp268,
 1763 0866 1B68     		ldr	r3, [r3]	@ D.4738, time
 1764 0868 1900     		movs	r1, r3	@, D.4738
 1765 086a 101C     		adds	r0, r2, #0	@, D.4740
 1766 086c FFF7FEFF 		bl	get_speed	@
 1767 0870 021C     		adds	r2, r0, #0	@ D.4740,
 1768 0872 564B     		ldr	r3, .L147+96	@ tmp269,
 1769 0874 1A60     		str	r2, [r3]	@ D.4740, speed
 459:code/main.c   ****     post_time = now_time;
 1770              		.loc 1 459 0
 1771 0876 534B     		ldr	r3, .L147+88	@ tmp270,
 1772 0878 1A68     		ldr	r2, [r3]	@ D.4738, now_time
 1773 087a 3D4B     		ldr	r3, .L147+4	@ tmp271,
 1774 087c 1A60     		str	r2, [r3]	@ D.4738, post_time
 460:code/main.c   **** 
 461:code/main.c   ****     time_h = now_time / 3600;
 1775              		.loc 1 461 0
 1776 087e 514B     		ldr	r3, .L147+88	@ tmp272,
 1777 0880 1A68     		ldr	r2, [r3]	@ D.4738, now_time
 1778 0882 E123     		movs	r3, #225	@ tmp310,
 1779 0884 1901     		lsls	r1, r3, #4	@, tmp310,
 1780 0886 1000     		movs	r0, r2	@, D.4738
 1781 0888 FFF7FEFF 		bl	__aeabi_uidiv	@
 1782 088c 0300     		movs	r3, r0	@ tmp275,
 1783 088e 1A00     		movs	r2, r3	@ D.4738, tmp275
 1784 0890 4F4B     		ldr	r3, .L147+100	@ tmp276,
 1785 0892 1A60     		str	r2, [r3]	@ D.4738, time_h
 462:code/main.c   ****     time_m = (now_time % 3600) / 60;
 1786              		.loc 1 462 0
 1787 0894 4B4B     		ldr	r3, .L147+88	@ tmp277,
 1788 0896 1A68     		ldr	r2, [r3]	@ D.4738, now_time
 1789 0898 E123     		movs	r3, #225	@ tmp311,
 1790 089a 1901     		lsls	r1, r3, #4	@, tmp311,
 1791 089c 1000     		movs	r0, r2	@, D.4738
 1792 089e FFF7FEFF 		bl	__aeabi_uidivmod	@
 1793 08a2 0B00     		movs	r3, r1	@ tmp282,
 1794 08a4 3C21     		movs	r1, #60	@,
 1795 08a6 1800     		movs	r0, r3	@, D.4738
 1796 08a8 FFF7FEFF 		bl	__aeabi_uidiv	@
 1797 08ac 0300     		movs	r3, r0	@ tmp285,
 1798 08ae 1A00     		movs	r2, r3	@ D.4738, tmp285
 1799 08b0 484B     		ldr	r3, .L147+104	@ tmp286,
 1800 08b2 1A60     		str	r2, [r3]	@ D.4738, time_m
 463:code/main.c   ****     time_h_bcd = int2bcd(time_h);
 1801              		.loc 1 463 0
 1802 08b4 464B     		ldr	r3, .L147+100	@ tmp287,
 1803 08b6 1B68     		ldr	r3, [r3]	@ D.4738, time_h
 1804 08b8 1800     		movs	r0, r3	@, D.4738
 1805 08ba FFF7FEFF 		bl	int2bcd	@
 1806 08be 0200     		movs	r2, r0	@ D.4738,
 1807 08c0 2D4B     		ldr	r3, .L147+12	@ tmp288,
 1808 08c2 1A60     		str	r2, [r3]	@ D.4738, time_h_bcd
 464:code/main.c   ****     time_m_bcd = int2bcd(time_m);
ARM GAS  /tmp/ccLwwf6o.s 			page 41


 1809              		.loc 1 464 0
 1810 08c4 434B     		ldr	r3, .L147+104	@ tmp289,
 1811 08c6 1B68     		ldr	r3, [r3]	@ D.4738, time_m
 1812 08c8 1800     		movs	r0, r3	@, D.4738
 1813 08ca FFF7FEFF 		bl	int2bcd	@
 1814 08ce 0200     		movs	r2, r0	@ D.4738,
 1815 08d0 2A4B     		ldr	r3, .L147+16	@ tmp290,
 1816 08d2 1A60     		str	r2, [r3]	@ D.4738, time_m_bcd
 465:code/main.c   ****     
 466:code/main.c   ****     speed_f = (uint32_t) speed;
 1817              		.loc 1 466 0
 1818 08d4 3D4B     		ldr	r3, .L147+96	@ tmp291,
 1819 08d6 1B68     		ldr	r3, [r3]	@ D.4740, speed
 1820 08d8 181C     		adds	r0, r3, #0	@, D.4740
 1821 08da FFF7FEFF 		bl	__aeabi_f2uiz	@
 1822 08de 0200     		movs	r2, r0	@ D.4738,
 1823 08e0 3D4B     		ldr	r3, .L147+108	@ tmp292,
 1824 08e2 1A60     		str	r2, [r3]	@ D.4738, speed_f
 467:code/main.c   ****     speed_b = (uint32_t) ((speed - speed_f) * 100);
 1825              		.loc 1 467 0
 1826 08e4 394B     		ldr	r3, .L147+96	@ tmp293,
 1827 08e6 1C68     		ldr	r4, [r3]	@ D.4740, speed
 1828 08e8 3B4B     		ldr	r3, .L147+108	@ tmp294,
 1829 08ea 1B68     		ldr	r3, [r3]	@ D.4738, speed_f
 1830 08ec 1800     		movs	r0, r3	@, D.4738
 1831 08ee FFF7FEFF 		bl	__aeabi_ui2f	@
 1832 08f2 031C     		adds	r3, r0, #0	@ D.4740,
 1833 08f4 191C     		adds	r1, r3, #0	@, D.4740
 1834 08f6 201C     		adds	r0, r4, #0	@, D.4740
 1835 08f8 FFF7FEFF 		bl	__aeabi_fsub	@
 1836 08fc 031C     		adds	r3, r0, #0	@ tmp295,
 1837 08fe 2D49     		ldr	r1, .L147+72	@,
 1838 0900 181C     		adds	r0, r3, #0	@, D.4740
 1839 0902 FFF7FEFF 		bl	__aeabi_fmul	@
 1840 0906 031C     		adds	r3, r0, #0	@ tmp296,
 1841 0908 181C     		adds	r0, r3, #0	@, D.4740
 1842 090a FFF7FEFF 		bl	__aeabi_f2uiz	@
 1843 090e 0200     		movs	r2, r0	@ D.4738,
 1844 0910 324B     		ldr	r3, .L147+112	@ tmp297,
 1845 0912 1A60     		str	r2, [r3]	@ D.4738, speed_b
 468:code/main.c   ****     speed_f_bcd = int2bcd(speed_f);
 1846              		.loc 1 468 0
 1847 0914 304B     		ldr	r3, .L147+108	@ tmp298,
 1848 0916 1B68     		ldr	r3, [r3]	@ D.4738, speed_f
 1849 0918 1800     		movs	r0, r3	@, D.4738
 1850 091a FFF7FEFF 		bl	int2bcd	@
 1851 091e 0200     		movs	r2, r0	@ D.4738,
 1852 0920 174B     		ldr	r3, .L147+20	@ tmp299,
 1853 0922 1A60     		str	r2, [r3]	@ D.4738, speed_f_bcd
 469:code/main.c   ****     speed_b_bcd = int2bcd(speed_b);
 1854              		.loc 1 469 0
 1855 0924 2D4B     		ldr	r3, .L147+112	@ tmp300,
 1856 0926 1B68     		ldr	r3, [r3]	@ D.4738, speed_b
 1857 0928 1800     		movs	r0, r3	@, D.4738
 1858 092a FFF7FEFF 		bl	int2bcd	@
 1859 092e 0200     		movs	r2, r0	@ D.4738,
 1860 0930 144B     		ldr	r3, .L147+24	@ tmp301,
ARM GAS  /tmp/ccLwwf6o.s 			page 42


 1861 0932 1A60     		str	r2, [r3]	@ D.4738, speed_b_bcd
 470:code/main.c   **** 
 471:code/main.c   ****     cadence = get_cadence(crank, time);
 1862              		.loc 1 471 0
 1863 0934 194B     		ldr	r3, .L147+48	@ tmp302,
 1864 0936 1A68     		ldr	r2, [r3]	@ D.4738, crank
 1865 0938 234B     		ldr	r3, .L147+92	@ tmp303,
 1866 093a 1B68     		ldr	r3, [r3]	@ D.4738, time
 1867 093c 1900     		movs	r1, r3	@, D.4738
 1868 093e 1000     		movs	r0, r2	@, D.4738
 1869 0940 FFF7FEFF 		bl	get_cadence	@
 1870 0944 0200     		movs	r2, r0	@ D.4738,
 1871 0946 264B     		ldr	r3, .L147+116	@ tmp304,
 1872 0948 1A60     		str	r2, [r3]	@ D.4738, cadence
 472:code/main.c   ****     cadence_bcd = int2bcd(cadence);
 1873              		.loc 1 472 0
 1874 094a 254B     		ldr	r3, .L147+116	@ tmp305,
 1875 094c 1B68     		ldr	r3, [r3]	@ D.4738, cadence
 1876 094e 1800     		movs	r0, r3	@, D.4738
 1877 0950 FFF7FEFF 		bl	int2bcd	@
 1878 0954 0200     		movs	r2, r0	@ D.4738,
 1879 0956 0C4B     		ldr	r3, .L147+28	@ tmp306,
 1880 0958 1A60     		str	r2, [r3]	@ D.4738, cadence_bcd
 473:code/main.c   **** 
 474:code/main.c   ****     check_speed();
 1881              		.loc 1 474 0
 1882 095a FFF7FEFF 		bl	check_speed	@
 475:code/main.c   **** 
 476:code/main.c   ****     refresh_segment();
 1883              		.loc 1 476 0
 1884 095e FFF7FEFF 		bl	refresh_segment	@
 477:code/main.c   **** 
 478:code/main.c   ****     //display_segment(total_distance_f, total_distance_b);
 479:code/main.c   **** 
 480:code/main.c   ****     //get_oled_image(distance, speed, ave_speed, energe, max_speed, time, crank, switchDisplay, isN
 481:code/main.c   ****     //display_oled();
 482:code/main.c   **** 
 483:code/main.c   ****     switchDisplay = false;
 1885              		.loc 1 483 0
 1886 0962 0C4B     		ldr	r3, .L147+40	@ tmp307,
 1887 0964 0022     		movs	r2, #0	@ tmp308,
 1888 0966 1A70     		strb	r2, [r3]	@ tmp309, switchDisplay
 484:code/main.c   ****   }
 1889              		.loc 1 484 0
 1890 0968 99E6     		b	.L146	@
 1891              	.L148:
 1892 096a C046     		.align	2
 1893              	.L147:
 1894 096c 00000000 		.word	total_distance
 1895 0970 00000000 		.word	post_time
 1896 0974 00000000 		.word	mode
 1897 0978 00000000 		.word	time_h_bcd
 1898 097c 00000000 		.word	time_m_bcd
 1899 0980 00000000 		.word	speed_f_bcd
 1900 0984 00000000 		.word	speed_b_bcd
 1901 0988 00000000 		.word	cadence_bcd
 1902 098c 00000000 		.word	total_distance_f_bcd
ARM GAS  /tmp/ccLwwf6o.s 			page 43


 1903 0990 00000000 		.word	total_distance_b_bcd
 1904 0994 00000000 		.word	switchDisplay
 1905 0998 00000000 		.word	isNight
 1906 099c 00000000 		.word	crank
 1907 09a0 00000000 		.word	bike_fork
 1908 09a4 00000000 		.word	wheel_d
 1909 09a8 00000000 		.word	post_distance
 1910 09ac 00000000 		.word	distance
 1911 09b0 00000000 		.word	total_distance_f
 1912 09b4 0000C842 		.word	1120403456
 1913 09b8 00000000 		.word	total_distance_b
 1914 09bc 00000000 		.word	stop_time_mode
 1915 09c0 00000000 		.word	store_stop_time
 1916 09c4 00000000 		.word	now_time
 1917 09c8 00000000 		.word	time
 1918 09cc 00000000 		.word	speed
 1919 09d0 00000000 		.word	time_h
 1920 09d4 00000000 		.word	time_m
 1921 09d8 00000000 		.word	speed_f
 1922 09dc 00000000 		.word	speed_b
 1923 09e0 00000000 		.word	cadence
 1924              		.cfi_endproc
 1925              	.LFE23:
 1926              		.size	main, .-main
 1927              	.Letext0:
 1928              		.file 2 "/srv/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1929              		.file 3 "/srv/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1930              		.section	.debug_info,"",%progbits
 1931              	.Ldebug_info0:
 1932 0000 53070000 		.4byte	0x753
 1933 0004 0200     		.2byte	0x2
 1934 0006 00000000 		.4byte	.Ldebug_abbrev0
 1935 000a 04       		.byte	0x4
 1936 000b 01       		.uleb128 0x1
 1937 000c D7030000 		.4byte	.LASF94
 1938 0010 0C       		.byte	0xc
 1939 0011 90010000 		.4byte	.LASF95
 1940 0015 6D040000 		.4byte	.LASF96
 1941 0019 00000000 		.4byte	.Ltext0
 1942 001d E4090000 		.4byte	.Letext0
 1943 0021 00000000 		.4byte	.Ldebug_line0
 1944 0025 02       		.uleb128 0x2
 1945 0026 01       		.byte	0x1
 1946 0027 06       		.byte	0x6
 1947 0028 39020000 		.4byte	.LASF0
 1948 002c 02       		.uleb128 0x2
 1949 002d 01       		.byte	0x1
 1950 002e 08       		.byte	0x8
 1951 002f FA010000 		.4byte	.LASF1
 1952 0033 02       		.uleb128 0x2
 1953 0034 02       		.byte	0x2
 1954 0035 05       		.byte	0x5
 1955 0036 3C000000 		.4byte	.LASF2
 1956 003a 02       		.uleb128 0x2
 1957 003b 02       		.byte	0x2
 1958 003c 07       		.byte	0x7
 1959 003d B2020000 		.4byte	.LASF3
ARM GAS  /tmp/ccLwwf6o.s 			page 44


 1960 0041 02       		.uleb128 0x2
 1961 0042 04       		.byte	0x4
 1962 0043 05       		.byte	0x5
 1963 0044 79010000 		.4byte	.LASF4
 1964 0048 03       		.uleb128 0x3
 1965 0049 92000000 		.4byte	.LASF9
 1966 004d 02       		.byte	0x2
 1967 004e 41       		.byte	0x41
 1968 004f 53000000 		.4byte	0x53
 1969 0053 02       		.uleb128 0x2
 1970 0054 04       		.byte	0x4
 1971 0055 07       		.byte	0x7
 1972 0056 56030000 		.4byte	.LASF5
 1973 005a 02       		.uleb128 0x2
 1974 005b 08       		.byte	0x8
 1975 005c 05       		.byte	0x5
 1976 005d 59010000 		.4byte	.LASF6
 1977 0061 02       		.uleb128 0x2
 1978 0062 08       		.byte	0x8
 1979 0063 07       		.byte	0x7
 1980 0064 45020000 		.4byte	.LASF7
 1981 0068 04       		.uleb128 0x4
 1982 0069 04       		.byte	0x4
 1983 006a 05       		.byte	0x5
 1984 006b 696E7400 		.ascii	"int\000"
 1985 006f 02       		.uleb128 0x2
 1986 0070 04       		.byte	0x4
 1987 0071 07       		.byte	0x7
 1988 0072 65020000 		.4byte	.LASF8
 1989 0076 03       		.uleb128 0x3
 1990 0077 5C020000 		.4byte	.LASF10
 1991 007b 03       		.byte	0x3
 1992 007c 30       		.byte	0x30
 1993 007d 48000000 		.4byte	0x48
 1994 0081 05       		.uleb128 0x5
 1995 0082 01       		.byte	0x1
 1996 0083 29000000 		.4byte	.LASF12
 1997 0087 01       		.byte	0x1
 1998 0088 40       		.byte	0x40
 1999 0089 01       		.byte	0x1
 2000 008a 9A000000 		.4byte	0x9a
 2001 008e 00000000 		.4byte	.LFB0
 2002 0092 18000000 		.4byte	.LFE0
 2003 0096 02       		.byte	0x2
 2004 0097 7D       		.byte	0x7d
 2005 0098 00       		.sleb128 0
 2006 0099 01       		.byte	0x1
 2007 009a 02       		.uleb128 0x2
 2008 009b 01       		.byte	0x1
 2009 009c 02       		.byte	0x2
 2010 009d 12030000 		.4byte	.LASF11
 2011 00a1 05       		.uleb128 0x5
 2012 00a2 01       		.byte	0x1
 2013 00a3 33010000 		.4byte	.LASF13
 2014 00a7 01       		.byte	0x1
 2015 00a8 41       		.byte	0x41
 2016 00a9 01       		.byte	0x1
ARM GAS  /tmp/ccLwwf6o.s 			page 45


 2017 00aa 9A000000 		.4byte	0x9a
 2018 00ae 18000000 		.4byte	.LFB1
 2019 00b2 30000000 		.4byte	.LFE1
 2020 00b6 02       		.byte	0x2
 2021 00b7 7D       		.byte	0x7d
 2022 00b8 00       		.sleb128 0
 2023 00b9 01       		.byte	0x1
 2024 00ba 05       		.uleb128 0x5
 2025 00bb 01       		.byte	0x1
 2026 00bc CB010000 		.4byte	.LASF14
 2027 00c0 01       		.byte	0x1
 2028 00c1 42       		.byte	0x42
 2029 00c2 01       		.byte	0x1
 2030 00c3 9A000000 		.4byte	0x9a
 2031 00c7 30000000 		.4byte	.LFB2
 2032 00cb 48000000 		.4byte	.LFE2
 2033 00cf 02       		.byte	0x2
 2034 00d0 7D       		.byte	0x7d
 2035 00d1 00       		.sleb128 0
 2036 00d2 01       		.byte	0x1
 2037 00d3 05       		.uleb128 0x5
 2038 00d4 01       		.byte	0x1
 2039 00d5 BE040000 		.4byte	.LASF15
 2040 00d9 01       		.byte	0x1
 2041 00da 43       		.byte	0x43
 2042 00db 01       		.byte	0x1
 2043 00dc 9A000000 		.4byte	0x9a
 2044 00e0 48000000 		.4byte	.LFB3
 2045 00e4 5C000000 		.4byte	.LFE3
 2046 00e8 02       		.byte	0x2
 2047 00e9 7D       		.byte	0x7d
 2048 00ea 00       		.sleb128 0
 2049 00eb 01       		.byte	0x1
 2050 00ec 05       		.uleb128 0x5
 2051 00ed 01       		.byte	0x1
 2052 00ee 76000000 		.4byte	.LASF16
 2053 00f2 01       		.byte	0x1
 2054 00f3 44       		.byte	0x44
 2055 00f4 01       		.byte	0x1
 2056 00f5 9A000000 		.4byte	0x9a
 2057 00f9 5C000000 		.4byte	.LFB4
 2058 00fd 74000000 		.4byte	.LFE4
 2059 0101 02       		.byte	0x2
 2060 0102 7D       		.byte	0x7d
 2061 0103 00       		.sleb128 0
 2062 0104 01       		.byte	0x1
 2063 0105 05       		.uleb128 0x5
 2064 0106 01       		.byte	0x1
 2065 0107 68030000 		.4byte	.LASF17
 2066 010b 01       		.byte	0x1
 2067 010c 45       		.byte	0x45
 2068 010d 01       		.byte	0x1
 2069 010e 9A000000 		.4byte	0x9a
 2070 0112 74000000 		.4byte	.LFB5
 2071 0116 8C000000 		.4byte	.LFE5
 2072 011a 02       		.byte	0x2
 2073 011b 7D       		.byte	0x7d
ARM GAS  /tmp/ccLwwf6o.s 			page 46


 2074 011c 00       		.sleb128 0
 2075 011d 01       		.byte	0x1
 2076 011e 05       		.uleb128 0x5
 2077 011f 01       		.byte	0x1
 2078 0120 7A020000 		.4byte	.LASF18
 2079 0124 01       		.byte	0x1
 2080 0125 46       		.byte	0x46
 2081 0126 01       		.byte	0x1
 2082 0127 76000000 		.4byte	0x76
 2083 012b 8C000000 		.4byte	.LFB6
 2084 012f 9C000000 		.4byte	.LFE6
 2085 0133 02       		.byte	0x2
 2086 0134 7D       		.byte	0x7d
 2087 0135 00       		.sleb128 0
 2088 0136 01       		.byte	0x1
 2089 0137 05       		.uleb128 0x5
 2090 0138 01       		.byte	0x1
 2091 0139 28030000 		.4byte	.LASF19
 2092 013d 01       		.byte	0x1
 2093 013e 47       		.byte	0x47
 2094 013f 01       		.byte	0x1
 2095 0140 76000000 		.4byte	0x76
 2096 0144 9C000000 		.4byte	.LFB7
 2097 0148 AC000000 		.4byte	.LFE7
 2098 014c 02       		.byte	0x2
 2099 014d 7D       		.byte	0x7d
 2100 014e 00       		.sleb128 0
 2101 014f 01       		.byte	0x1
 2102 0150 05       		.uleb128 0x5
 2103 0151 01       		.byte	0x1
 2104 0152 9C010000 		.4byte	.LASF20
 2105 0156 01       		.byte	0x1
 2106 0157 48       		.byte	0x48
 2107 0158 01       		.byte	0x1
 2108 0159 76000000 		.4byte	0x76
 2109 015d AC000000 		.4byte	.LFB8
 2110 0161 BC000000 		.4byte	.LFE8
 2111 0165 02       		.byte	0x2
 2112 0166 7D       		.byte	0x7d
 2113 0167 00       		.sleb128 0
 2114 0168 01       		.byte	0x1
 2115 0169 05       		.uleb128 0x5
 2116 016a 01       		.byte	0x1
 2117 016b CE020000 		.4byte	.LASF21
 2118 016f 01       		.byte	0x1
 2119 0170 49       		.byte	0x49
 2120 0171 01       		.byte	0x1
 2121 0172 76000000 		.4byte	0x76
 2122 0176 BC000000 		.4byte	.LFB9
 2123 017a CC000000 		.4byte	.LFE9
 2124 017e 02       		.byte	0x2
 2125 017f 7D       		.byte	0x7d
 2126 0180 00       		.sleb128 0
 2127 0181 01       		.byte	0x1
 2128 0182 06       		.uleb128 0x6
 2129 0183 01       		.byte	0x1
 2130 0184 37030000 		.4byte	.LASF22
ARM GAS  /tmp/ccLwwf6o.s 			page 47


 2131 0188 01       		.byte	0x1
 2132 0189 4A       		.byte	0x4a
 2133 018a 01       		.byte	0x1
 2134 018b CC000000 		.4byte	.LFB10
 2135 018f DC000000 		.4byte	.LFE10
 2136 0193 02       		.byte	0x2
 2137 0194 7D       		.byte	0x7d
 2138 0195 00       		.sleb128 0
 2139 0196 01       		.byte	0x1
 2140 0197 06       		.uleb128 0x6
 2141 0198 01       		.byte	0x1
 2142 0199 90020000 		.4byte	.LASF23
 2143 019d 01       		.byte	0x1
 2144 019e 4B       		.byte	0x4b
 2145 019f 01       		.byte	0x1
 2146 01a0 DC000000 		.4byte	.LFB11
 2147 01a4 F8000000 		.4byte	.LFE11
 2148 01a8 02       		.byte	0x2
 2149 01a9 7D       		.byte	0x7d
 2150 01aa 00       		.sleb128 0
 2151 01ab 01       		.byte	0x1
 2152 01ac 07       		.uleb128 0x7
 2153 01ad 01       		.byte	0x1
 2154 01ae DF000000 		.4byte	.LASF31
 2155 01b2 01       		.byte	0x1
 2156 01b3 4C       		.byte	0x4c
 2157 01b4 01       		.byte	0x1
 2158 01b5 F8000000 		.4byte	.LFB12
 2159 01b9 28010000 		.4byte	.LFE12
 2160 01bd 00000000 		.4byte	.LLST0
 2161 01c1 01       		.byte	0x1
 2162 01c2 F1010000 		.4byte	0x1f1
 2163 01c6 08       		.uleb128 0x8
 2164 01c7 B9030000 		.4byte	.LASF24
 2165 01cb 01       		.byte	0x1
 2166 01cc 4C       		.byte	0x4c
 2167 01cd 76000000 		.4byte	0x76
 2168 01d1 02       		.byte	0x2
 2169 01d2 91       		.byte	0x91
 2170 01d3 7C       		.sleb128 -4
 2171 01d4 08       		.uleb128 0x8
 2172 01d5 4E030000 		.4byte	.LASF25
 2173 01d9 01       		.byte	0x1
 2174 01da 4C       		.byte	0x4c
 2175 01db 76000000 		.4byte	0x76
 2176 01df 02       		.byte	0x2
 2177 01e0 91       		.byte	0x91
 2178 01e1 78       		.sleb128 -8
 2179 01e2 08       		.uleb128 0x8
 2180 01e3 A9020000 		.4byte	.LASF26
 2181 01e7 01       		.byte	0x1
 2182 01e8 4C       		.byte	0x4c
 2183 01e9 76000000 		.4byte	0x76
 2184 01ed 02       		.byte	0x2
 2185 01ee 91       		.byte	0x91
 2186 01ef 74       		.sleb128 -12
 2187 01f0 00       		.byte	0
ARM GAS  /tmp/ccLwwf6o.s 			page 48


 2188 01f1 09       		.uleb128 0x9
 2189 01f2 01       		.byte	0x1
 2190 01f3 84030000 		.4byte	.LASF39
 2191 01f7 01       		.byte	0x1
 2192 01f8 52       		.byte	0x52
 2193 01f9 01       		.byte	0x1
 2194 01fa 76000000 		.4byte	0x76
 2195 01fe 28010000 		.4byte	.LFB13
 2196 0202 76010000 		.4byte	.LFE13
 2197 0206 20000000 		.4byte	.LLST1
 2198 020a 01       		.byte	0x1
 2199 020b 52020000 		.4byte	0x252
 2200 020f 08       		.uleb128 0x8
 2201 0210 D9000000 		.4byte	.LASF27
 2202 0214 01       		.byte	0x1
 2203 0215 52       		.byte	0x52
 2204 0216 76000000 		.4byte	0x76
 2205 021a 02       		.byte	0x2
 2206 021b 91       		.byte	0x91
 2207 021c 64       		.sleb128 -28
 2208 021d 0A       		.uleb128 0xa
 2209 021e 62636400 		.ascii	"bcd\000"
 2210 0222 01       		.byte	0x1
 2211 0223 54       		.byte	0x54
 2212 0224 76000000 		.4byte	0x76
 2213 0228 02       		.byte	0x2
 2214 0229 91       		.byte	0x91
 2215 022a 74       		.sleb128 -12
 2216 022b 0B       		.uleb128 0xb
 2217 022c 82010000 		.4byte	.LASF28
 2218 0230 01       		.byte	0x1
 2219 0231 55       		.byte	0x55
 2220 0232 76000000 		.4byte	0x76
 2221 0236 02       		.byte	0x2
 2222 0237 91       		.byte	0x91
 2223 0238 70       		.sleb128 -16
 2224 0239 0C       		.uleb128 0xc
 2225 023a 38010000 		.4byte	.LBB2
 2226 023e 68010000 		.4byte	.LBE2
 2227 0242 0A       		.uleb128 0xa
 2228 0243 6E756D00 		.ascii	"num\000"
 2229 0247 01       		.byte	0x1
 2230 0248 59       		.byte	0x59
 2231 0249 76000000 		.4byte	0x76
 2232 024d 02       		.byte	0x2
 2233 024e 91       		.byte	0x91
 2234 024f 6C       		.sleb128 -20
 2235 0250 00       		.byte	0
 2236 0251 00       		.byte	0
 2237 0252 0D       		.uleb128 0xd
 2238 0253 01       		.byte	0x1
 2239 0254 19020000 		.4byte	.LASF29
 2240 0258 01       		.byte	0x1
 2241 0259 64       		.byte	0x64
 2242 025a 01       		.byte	0x1
 2243 025b 78010000 		.4byte	.LFB14
 2244 025f 44020000 		.4byte	.LFE14
ARM GAS  /tmp/ccLwwf6o.s 			page 49


 2245 0263 4C000000 		.4byte	.LLST2
 2246 0267 01       		.byte	0x1
 2247 0268 0E       		.uleb128 0xe
 2248 0269 01       		.byte	0x1
 2249 026a AF040000 		.4byte	.LASF30
 2250 026e 01       		.byte	0x1
 2251 026f 98       		.byte	0x98
 2252 0270 01       		.byte	0x1
 2253 0271 9A000000 		.4byte	0x9a
 2254 0275 44020000 		.4byte	.LFB15
 2255 0279 68020000 		.4byte	.LFE15
 2256 027d 6C000000 		.4byte	.LLST3
 2257 0281 01       		.byte	0x1
 2258 0282 0F       		.uleb128 0xf
 2259 0283 01       		.byte	0x1
 2260 0284 08020000 		.4byte	.LASF32
 2261 0288 01       		.byte	0x1
 2262 0289 AF       		.byte	0xaf
 2263 028a 01       		.byte	0x1
 2264 028b 68020000 		.4byte	.LFB16
 2265 028f 7C030000 		.4byte	.LFE16
 2266 0293 8C000000 		.4byte	.LLST4
 2267 0297 01       		.byte	0x1
 2268 0298 E3020000 		.4byte	0x2e3
 2269 029c 0B       		.uleb128 0xb
 2270 029d B7000000 		.4byte	.LASF33
 2271 02a1 01       		.byte	0x1
 2272 02a2 B1       		.byte	0xb1
 2273 02a3 76000000 		.4byte	0x76
 2274 02a7 02       		.byte	0x2
 2275 02a8 91       		.byte	0x91
 2276 02a9 74       		.sleb128 -12
 2277 02aa 0B       		.uleb128 0xb
 2278 02ab 29020000 		.4byte	.LASF34
 2279 02af 01       		.byte	0x1
 2280 02b0 B2       		.byte	0xb2
 2281 02b1 76000000 		.4byte	0x76
 2282 02b5 02       		.byte	0x2
 2283 02b6 91       		.byte	0x91
 2284 02b7 70       		.sleb128 -16
 2285 02b8 0B       		.uleb128 0xb
 2286 02b9 31020000 		.4byte	.LASF35
 2287 02bd 01       		.byte	0x1
 2288 02be B2       		.byte	0xb2
 2289 02bf 76000000 		.4byte	0x76
 2290 02c3 02       		.byte	0x2
 2291 02c4 91       		.byte	0x91
 2292 02c5 6C       		.sleb128 -20
 2293 02c6 0B       		.uleb128 0xb
 2294 02c7 BE030000 		.4byte	.LASF36
 2295 02cb 01       		.byte	0x1
 2296 02cc B2       		.byte	0xb2
 2297 02cd 76000000 		.4byte	0x76
 2298 02d1 02       		.byte	0x2
 2299 02d2 91       		.byte	0x91
 2300 02d3 68       		.sleb128 -24
 2301 02d4 0B       		.uleb128 0xb
ARM GAS  /tmp/ccLwwf6o.s 			page 50


 2302 02d5 42030000 		.4byte	.LASF37
 2303 02d9 01       		.byte	0x1
 2304 02da B3       		.byte	0xb3
 2305 02db 76000000 		.4byte	0x76
 2306 02df 02       		.byte	0x2
 2307 02e0 91       		.byte	0x91
 2308 02e1 64       		.sleb128 -28
 2309 02e2 00       		.byte	0
 2310 02e3 0D       		.uleb128 0xd
 2311 02e4 01       		.byte	0x1
 2312 02e5 5B040000 		.4byte	.LASF38
 2313 02e9 01       		.byte	0x1
 2314 02ea E9       		.byte	0xe9
 2315 02eb 01       		.byte	0x1
 2316 02ec 7C030000 		.4byte	.LFB17
 2317 02f0 CC030000 		.4byte	.LFE17
 2318 02f4 B8000000 		.4byte	.LLST5
 2319 02f8 01       		.byte	0x1
 2320 02f9 09       		.uleb128 0x9
 2321 02fa 01       		.byte	0x1
 2322 02fb 00000000 		.4byte	.LASF40
 2323 02ff 01       		.byte	0x1
 2324 0300 F5       		.byte	0xf5
 2325 0301 01       		.byte	0x1
 2326 0302 5E030000 		.4byte	0x35e
 2327 0306 CC030000 		.4byte	.LFB18
 2328 030a 54040000 		.4byte	.LFE18
 2329 030e D8000000 		.4byte	.LLST6
 2330 0312 01       		.byte	0x1
 2331 0313 5E030000 		.4byte	0x35e
 2332 0317 08       		.uleb128 0x8
 2333 0318 7A030000 		.4byte	.LASF41
 2334 031c 01       		.byte	0x1
 2335 031d F5       		.byte	0xf5
 2336 031e 76000000 		.4byte	0x76
 2337 0322 02       		.byte	0x2
 2338 0323 91       		.byte	0x91
 2339 0324 64       		.sleb128 -28
 2340 0325 08       		.uleb128 0x8
 2341 0326 67040000 		.4byte	.LASF42
 2342 032a 01       		.byte	0x1
 2343 032b F5       		.byte	0xf5
 2344 032c 76000000 		.4byte	0x76
 2345 0330 02       		.byte	0x2
 2346 0331 91       		.byte	0x91
 2347 0332 60       		.sleb128 -32
 2348 0333 0B       		.uleb128 0xb
 2349 0334 31000000 		.4byte	.LASF43
 2350 0338 01       		.byte	0x1
 2351 0339 F7       		.byte	0xf7
 2352 033a 5E030000 		.4byte	0x35e
 2353 033e 02       		.byte	0x2
 2354 033f 91       		.byte	0x91
 2355 0340 6C       		.sleb128 -20
 2356 0341 0B       		.uleb128 0xb
 2357 0342 B5010000 		.4byte	.LASF44
 2358 0346 01       		.byte	0x1
ARM GAS  /tmp/ccLwwf6o.s 			page 51


 2359 0347 F7       		.byte	0xf7
 2360 0348 5E030000 		.4byte	0x35e
 2361 034c 02       		.byte	0x2
 2362 034d 91       		.byte	0x91
 2363 034e 74       		.sleb128 -12
 2364 034f 0B       		.uleb128 0xb
 2365 0350 EB020000 		.4byte	.LASF45
 2366 0354 01       		.byte	0x1
 2367 0355 F7       		.byte	0xf7
 2368 0356 5E030000 		.4byte	0x35e
 2369 035a 02       		.byte	0x2
 2370 035b 91       		.byte	0x91
 2371 035c 70       		.sleb128 -16
 2372 035d 00       		.byte	0
 2373 035e 02       		.uleb128 0x2
 2374 035f 04       		.byte	0x4
 2375 0360 04       		.byte	0x4
 2376 0361 53010000 		.4byte	.LASF46
 2377 0365 10       		.uleb128 0x10
 2378 0366 01       		.byte	0x1
 2379 0367 67010000 		.4byte	.LASF47
 2380 036b 01       		.byte	0x1
 2381 036c 0901     		.2byte	0x109
 2382 036e 01       		.byte	0x1
 2383 036f 5E030000 		.4byte	0x35e
 2384 0373 54040000 		.4byte	.LFB19
 2385 0377 BC040000 		.4byte	.LFE19
 2386 037b 04010000 		.4byte	.LLST7
 2387 037f 01       		.byte	0x1
 2388 0380 B2030000 		.4byte	0x3b2
 2389 0384 11       		.uleb128 0x11
 2390 0385 D8020000 		.4byte	.LASF48
 2391 0389 01       		.byte	0x1
 2392 038a 0901     		.2byte	0x109
 2393 038c 5E030000 		.4byte	0x35e
 2394 0390 02       		.byte	0x2
 2395 0391 91       		.byte	0x91
 2396 0392 6C       		.sleb128 -20
 2397 0393 11       		.uleb128 0x11
 2398 0394 CD000000 		.4byte	.LASF49
 2399 0398 01       		.byte	0x1
 2400 0399 0901     		.2byte	0x109
 2401 039b 76000000 		.4byte	0x76
 2402 039f 02       		.byte	0x2
 2403 03a0 91       		.byte	0x91
 2404 03a1 68       		.sleb128 -24
 2405 03a2 12       		.uleb128 0x12
 2406 03a3 13010000 		.4byte	.LASF50
 2407 03a7 01       		.byte	0x1
 2408 03a8 0B01     		.2byte	0x10b
 2409 03aa 5E030000 		.4byte	0x35e
 2410 03ae 02       		.byte	0x2
 2411 03af 91       		.byte	0x91
 2412 03b0 74       		.sleb128 -12
 2413 03b1 00       		.byte	0
 2414 03b2 10       		.uleb128 0x10
 2415 03b3 01       		.byte	0x1
ARM GAS  /tmp/ccLwwf6o.s 			page 52


 2416 03b4 9C040000 		.4byte	.LASF51
 2417 03b8 01       		.byte	0x1
 2418 03b9 2301     		.2byte	0x123
 2419 03bb 01       		.byte	0x1
 2420 03bc 76000000 		.4byte	0x76
 2421 03c0 BC040000 		.4byte	.LFB20
 2422 03c4 44050000 		.4byte	.LFE20
 2423 03c8 30010000 		.4byte	.LLST8
 2424 03cc 01       		.byte	0x1
 2425 03cd 0E040000 		.4byte	0x40e
 2426 03d1 11       		.uleb128 0x11
 2427 03d2 8C030000 		.4byte	.LASF52
 2428 03d6 01       		.byte	0x1
 2429 03d7 2301     		.2byte	0x123
 2430 03d9 76000000 		.4byte	0x76
 2431 03dd 02       		.byte	0x2
 2432 03de 91       		.byte	0x91
 2433 03df 6C       		.sleb128 -20
 2434 03e0 11       		.uleb128 0x11
 2435 03e1 CD000000 		.4byte	.LASF49
 2436 03e5 01       		.byte	0x1
 2437 03e6 2301     		.2byte	0x123
 2438 03e8 76000000 		.4byte	0x76
 2439 03ec 02       		.byte	0x2
 2440 03ed 91       		.byte	0x91
 2441 03ee 68       		.sleb128 -24
 2442 03ef 12       		.uleb128 0x12
 2443 03f0 71010000 		.4byte	.LASF53
 2444 03f4 01       		.byte	0x1
 2445 03f5 2501     		.2byte	0x125
 2446 03f7 5E030000 		.4byte	0x35e
 2447 03fb 02       		.byte	0x2
 2448 03fc 91       		.byte	0x91
 2449 03fd 74       		.sleb128 -12
 2450 03fe 12       		.uleb128 0x12
 2451 03ff C3000000 		.4byte	.LASF54
 2452 0403 01       		.byte	0x1
 2453 0404 2501     		.2byte	0x125
 2454 0406 5E030000 		.4byte	0x35e
 2455 040a 02       		.byte	0x2
 2456 040b 91       		.byte	0x91
 2457 040c 70       		.sleb128 -16
 2458 040d 00       		.byte	0
 2459 040e 13       		.uleb128 0x13
 2460 040f 01       		.byte	0x1
 2461 0410 1B010000 		.4byte	.LASF55
 2462 0414 01       		.byte	0x1
 2463 0415 3F01     		.2byte	0x13f
 2464 0417 01       		.byte	0x1
 2465 0418 44050000 		.4byte	.LFB21
 2466 041c D8050000 		.4byte	.LFE21
 2467 0420 5C010000 		.4byte	.LLST9
 2468 0424 01       		.byte	0x1
 2469 0425 13       		.uleb128 0x13
 2470 0426 01       		.byte	0x1
 2471 0427 0A010000 		.4byte	.LASF56
 2472 042b 01       		.byte	0x1
ARM GAS  /tmp/ccLwwf6o.s 			page 53


 2473 042c 5701     		.2byte	0x157
 2474 042e 01       		.byte	0x1
 2475 042f D8050000 		.4byte	.LFB22
 2476 0433 98060000 		.4byte	.LFE22
 2477 0437 7C010000 		.4byte	.LLST10
 2478 043b 01       		.byte	0x1
 2479 043c 14       		.uleb128 0x14
 2480 043d 01       		.byte	0x1
 2481 043e 8D000000 		.4byte	.LASF57
 2482 0442 01       		.byte	0x1
 2483 0443 7501     		.2byte	0x175
 2484 0445 01       		.byte	0x1
 2485 0446 68000000 		.4byte	0x68
 2486 044a 98060000 		.4byte	.LFB23
 2487 044e E4090000 		.4byte	.LFE23
 2488 0452 9C010000 		.4byte	.LLST11
 2489 0456 01       		.byte	0x1
 2490 0457 15       		.uleb128 0x15
 2491 0458 18000000 		.4byte	.LASF58
 2492 045c 01       		.byte	0x1
 2493 045d 17       		.byte	0x17
 2494 045e 69040000 		.4byte	0x469
 2495 0462 01       		.byte	0x1
 2496 0463 05       		.byte	0x5
 2497 0464 03       		.byte	0x3
 2498 0465 00000000 		.4byte	OLED
 2499 0469 16       		.uleb128 0x16
 2500 046a 04       		.byte	0x4
 2501 046b 6F040000 		.4byte	0x46f
 2502 046f 17       		.uleb128 0x17
 2503 0470 76000000 		.4byte	0x76
 2504 0474 15       		.uleb128 0x15
 2505 0475 A1020000 		.4byte	.LASF59
 2506 0479 01       		.byte	0x1
 2507 047a 1C       		.byte	0x1c
 2508 047b 69040000 		.4byte	0x469
 2509 047f 01       		.byte	0x1
 2510 0480 05       		.byte	0x5
 2511 0481 03       		.byte	0x3
 2512 0482 00000000 		.4byte	SEGMENT
 2513 0486 15       		.uleb128 0x15
 2514 0487 9E030000 		.4byte	.LASF60
 2515 048b 01       		.byte	0x1
 2516 048c 20       		.byte	0x20
 2517 048d 69040000 		.4byte	0x469
 2518 0491 01       		.byte	0x1
 2519 0492 05       		.byte	0x5
 2520 0493 03       		.byte	0x3
 2521 0494 00000000 		.4byte	TIMER
 2522 0498 15       		.uleb128 0x15
 2523 0499 A8040000 		.4byte	.LASF61
 2524 049d 01       		.byte	0x1
 2525 049e 24       		.byte	0x24
 2526 049f 69040000 		.4byte	0x469
 2527 04a3 01       		.byte	0x1
 2528 04a4 05       		.byte	0x5
 2529 04a5 03       		.byte	0x3
ARM GAS  /tmp/ccLwwf6o.s 			page 54


 2530 04a6 00000000 		.4byte	SENSOR
 2531 04aa 15       		.uleb128 0x15
 2532 04ab 6F000000 		.4byte	.LASF62
 2533 04af 01       		.byte	0x1
 2534 04b0 27       		.byte	0x27
 2535 04b1 69040000 		.4byte	0x469
 2536 04b5 01       		.byte	0x1
 2537 04b6 05       		.byte	0x5
 2538 04b7 03       		.byte	0x3
 2539 04b8 00000000 		.4byte	BUTTON
 2540 04bc 15       		.uleb128 0x15
 2541 04bd E1020000 		.4byte	.LASF63
 2542 04c1 01       		.byte	0x1
 2543 04c2 32       		.byte	0x32
 2544 04c3 9A000000 		.4byte	0x9a
 2545 04c7 01       		.byte	0x1
 2546 04c8 05       		.byte	0x5
 2547 04c9 03       		.byte	0x3
 2548 04ca 00000000 		.4byte	speed_red
 2549 04ce 15       		.uleb128 0x15
 2550 04cf 72020000 		.4byte	.LASF64
 2551 04d3 01       		.byte	0x1
 2552 04d4 32       		.byte	0x32
 2553 04d5 9A000000 		.4byte	0x9a
 2554 04d9 01       		.byte	0x1
 2555 04da 05       		.byte	0x5
 2556 04db 03       		.byte	0x3
 2557 04dc 00000000 		.4byte	isNight
 2558 04e0 15       		.uleb128 0x15
 2559 04e1 A7010000 		.4byte	.LASF65
 2560 04e5 01       		.byte	0x1
 2561 04e6 32       		.byte	0x32
 2562 04e7 9A000000 		.4byte	0x9a
 2563 04eb 01       		.byte	0x1
 2564 04ec 05       		.byte	0x5
 2565 04ed 03       		.byte	0x3
 2566 04ee 00000000 		.4byte	switchDisplay
 2567 04f2 15       		.uleb128 0x15
 2568 04f3 D8020000 		.4byte	.LASF48
 2569 04f7 01       		.byte	0x1
 2570 04f8 33       		.byte	0x33
 2571 04f9 5E030000 		.4byte	0x35e
 2572 04fd 01       		.byte	0x1
 2573 04fe 05       		.byte	0x5
 2574 04ff 03       		.byte	0x3
 2575 0500 00000000 		.4byte	distance
 2576 0504 15       		.uleb128 0x15
 2577 0505 8A020000 		.4byte	.LASF66
 2578 0509 01       		.byte	0x1
 2579 050a 33       		.byte	0x33
 2580 050b 5E030000 		.4byte	0x35e
 2581 050f 01       		.byte	0x1
 2582 0510 05       		.byte	0x5
 2583 0511 03       		.byte	0x3
 2584 0512 00000000 		.4byte	speed
 2585 0516 15       		.uleb128 0x15
 2586 0517 70030000 		.4byte	.LASF67
ARM GAS  /tmp/ccLwwf6o.s 			page 55


 2587 051b 01       		.byte	0x1
 2588 051c 33       		.byte	0x33
 2589 051d 5E030000 		.4byte	0x35e
 2590 0521 01       		.byte	0x1
 2591 0522 05       		.byte	0x5
 2592 0523 03       		.byte	0x3
 2593 0524 00000000 		.4byte	max_speed
 2594 0528 15       		.uleb128 0x15
 2595 0529 EF000000 		.4byte	.LASF68
 2596 052d 01       		.byte	0x1
 2597 052e 33       		.byte	0x33
 2598 052f 5E030000 		.4byte	0x35e
 2599 0533 01       		.byte	0x1
 2600 0534 05       		.byte	0x5
 2601 0535 03       		.byte	0x3
 2602 0536 00000000 		.4byte	total_distance
 2603 053a 15       		.uleb128 0x15
 2604 053b A9000000 		.4byte	.LASF69
 2605 053f 01       		.byte	0x1
 2606 0540 33       		.byte	0x33
 2607 0541 5E030000 		.4byte	0x35e
 2608 0545 01       		.byte	0x1
 2609 0546 05       		.byte	0x5
 2610 0547 03       		.byte	0x3
 2611 0548 00000000 		.4byte	post_distance
 2612 054c 15       		.uleb128 0x15
 2613 054d 9D000000 		.4byte	.LASF70
 2614 0551 01       		.byte	0x1
 2615 0552 34       		.byte	0x34
 2616 0553 76000000 		.4byte	0x76
 2617 0557 01       		.byte	0x1
 2618 0558 05       		.byte	0x5
 2619 0559 03       		.byte	0x3
 2620 055a 00000000 		.4byte	mode
 2621 055e 15       		.uleb128 0x15
 2622 055f 67040000 		.4byte	.LASF42
 2623 0563 01       		.byte	0x1
 2624 0564 34       		.byte	0x34
 2625 0565 76000000 		.4byte	0x76
 2626 0569 01       		.byte	0x1
 2627 056a 05       		.byte	0x5
 2628 056b 03       		.byte	0x3
 2629 056c 00000000 		.4byte	wheel
 2630 0570 15       		.uleb128 0x15
 2631 0571 2B010000 		.4byte	.LASF71
 2632 0575 01       		.byte	0x1
 2633 0576 34       		.byte	0x34
 2634 0577 76000000 		.4byte	0x76
 2635 057b 01       		.byte	0x1
 2636 057c 05       		.byte	0x5
 2637 057d 03       		.byte	0x3
 2638 057e 00000000 		.4byte	wheel_d
 2639 0582 15       		.uleb128 0x15
 2640 0583 CD000000 		.4byte	.LASF49
 2641 0587 01       		.byte	0x1
 2642 0588 35       		.byte	0x35
 2643 0589 76000000 		.4byte	0x76
ARM GAS  /tmp/ccLwwf6o.s 			page 56


 2644 058d 01       		.byte	0x1
 2645 058e 05       		.byte	0x5
 2646 058f 03       		.byte	0x3
 2647 0590 00000000 		.4byte	time
 2648 0594 15       		.uleb128 0x15
 2649 0595 C5020000 		.4byte	.LASF72
 2650 0599 01       		.byte	0x1
 2651 059a 35       		.byte	0x35
 2652 059b 76000000 		.4byte	0x76
 2653 059f 01       		.byte	0x1
 2654 05a0 05       		.byte	0x5
 2655 05a1 03       		.byte	0x3
 2656 05a2 00000000 		.4byte	now_time
 2657 05a6 15       		.uleb128 0x15
 2658 05a7 57000000 		.4byte	.LASF73
 2659 05ab 01       		.byte	0x1
 2660 05ac 35       		.byte	0x35
 2661 05ad 76000000 		.4byte	0x76
 2662 05b1 01       		.byte	0x1
 2663 05b2 05       		.byte	0x5
 2664 05b3 03       		.byte	0x3
 2665 05b4 00000000 		.4byte	post_time
 2666 05b8 15       		.uleb128 0x15
 2667 05b9 A2000000 		.4byte	.LASF74
 2668 05bd 01       		.byte	0x1
 2669 05be 35       		.byte	0x35
 2670 05bf 76000000 		.4byte	0x76
 2671 05c3 01       		.byte	0x1
 2672 05c4 05       		.byte	0x5
 2673 05c5 03       		.byte	0x3
 2674 05c6 00000000 		.4byte	time_h
 2675 05ca 15       		.uleb128 0x15
 2676 05cb D2000000 		.4byte	.LASF75
 2677 05cf 01       		.byte	0x1
 2678 05d0 35       		.byte	0x35
 2679 05d1 76000000 		.4byte	0x76
 2680 05d5 01       		.byte	0x1
 2681 05d6 05       		.byte	0x5
 2682 05d7 03       		.byte	0x3
 2683 05d8 00000000 		.4byte	time_m
 2684 05dc 15       		.uleb128 0x15
 2685 05dd 3E010000 		.4byte	.LASF76
 2686 05e1 01       		.byte	0x1
 2687 05e2 35       		.byte	0x35
 2688 05e3 76000000 		.4byte	0x76
 2689 05e7 01       		.byte	0x1
 2690 05e8 05       		.byte	0x5
 2691 05e9 03       		.byte	0x3
 2692 05ea 00000000 		.4byte	time_h_bcd
 2693 05ee 15       		.uleb128 0x15
 2694 05ef 0D000000 		.4byte	.LASF77
 2695 05f3 01       		.byte	0x1
 2696 05f4 35       		.byte	0x35
 2697 05f5 76000000 		.4byte	0x76
 2698 05f9 01       		.byte	0x1
 2699 05fa 05       		.byte	0x5
 2700 05fb 03       		.byte	0x3
ARM GAS  /tmp/ccLwwf6o.s 			page 57


 2701 05fc 00000000 		.4byte	time_m_bcd
 2702 0600 15       		.uleb128 0x15
 2703 0601 8C030000 		.4byte	.LASF52
 2704 0605 01       		.byte	0x1
 2705 0606 36       		.byte	0x36
 2706 0607 76000000 		.4byte	0x76
 2707 060b 01       		.byte	0x1
 2708 060c 05       		.byte	0x5
 2709 060d 03       		.byte	0x3
 2710 060e 00000000 		.4byte	crank
 2711 0612 15       		.uleb128 0x15
 2712 0613 7A030000 		.4byte	.LASF41
 2713 0617 01       		.byte	0x1
 2714 0618 36       		.byte	0x36
 2715 0619 76000000 		.4byte	0x76
 2716 061d 01       		.byte	0x1
 2717 061e 05       		.byte	0x5
 2718 061f 03       		.byte	0x3
 2719 0620 00000000 		.4byte	bike_fork
 2720 0624 15       		.uleb128 0x15
 2721 0625 C3010000 		.4byte	.LASF78
 2722 0629 01       		.byte	0x1
 2723 062a 37       		.byte	0x37
 2724 062b 76000000 		.4byte	0x76
 2725 062f 01       		.byte	0x1
 2726 0630 05       		.byte	0x5
 2727 0631 03       		.byte	0x3
 2728 0632 00000000 		.4byte	speed_f
 2729 0636 15       		.uleb128 0x15
 2730 0637 88010000 		.4byte	.LASF79
 2731 063b 01       		.byte	0x1
 2732 063c 37       		.byte	0x37
 2733 063d 76000000 		.4byte	0x76
 2734 0641 01       		.byte	0x1
 2735 0642 05       		.byte	0x5
 2736 0643 03       		.byte	0x3
 2737 0644 00000000 		.4byte	speed_b
 2738 0648 15       		.uleb128 0x15
 2739 0649 FE000000 		.4byte	.LASF80
 2740 064d 01       		.byte	0x1
 2741 064e 37       		.byte	0x37
 2742 064f 76000000 		.4byte	0x76
 2743 0653 01       		.byte	0x1
 2744 0654 05       		.byte	0x5
 2745 0655 03       		.byte	0x3
 2746 0656 00000000 		.4byte	speed_f_bcd
 2747 065a 15       		.uleb128 0x15
 2748 065b 1D000000 		.4byte	.LASF81
 2749 065f 01       		.byte	0x1
 2750 0660 37       		.byte	0x37
 2751 0661 76000000 		.4byte	0x76
 2752 0665 01       		.byte	0x1
 2753 0666 05       		.byte	0x5
 2754 0667 03       		.byte	0x3
 2755 0668 00000000 		.4byte	speed_b_bcd
 2756 066c 15       		.uleb128 0x15
 2757 066d C6030000 		.4byte	.LASF82
ARM GAS  /tmp/ccLwwf6o.s 			page 58


 2758 0671 01       		.byte	0x1
 2759 0672 38       		.byte	0x38
 2760 0673 76000000 		.4byte	0x76
 2761 0677 01       		.byte	0x1
 2762 0678 05       		.byte	0x5
 2763 0679 03       		.byte	0x3
 2764 067a 00000000 		.4byte	total_distance_f
 2765 067e 15       		.uleb128 0x15
 2766 067f 46000000 		.4byte	.LASF83
 2767 0683 01       		.byte	0x1
 2768 0684 38       		.byte	0x38
 2769 0685 76000000 		.4byte	0x76
 2770 0689 01       		.byte	0x1
 2771 068a 05       		.byte	0x5
 2772 068b 03       		.byte	0x3
 2773 068c 00000000 		.4byte	total_distance_b
 2774 0690 15       		.uleb128 0x15
 2775 0691 A4030000 		.4byte	.LASF84
 2776 0695 01       		.byte	0x1
 2777 0696 38       		.byte	0x38
 2778 0697 76000000 		.4byte	0x76
 2779 069b 01       		.byte	0x1
 2780 069c 05       		.byte	0x5
 2781 069d 03       		.byte	0x3
 2782 069e 00000000 		.4byte	total_distance_f_bcd
 2783 06a2 15       		.uleb128 0x15
 2784 06a3 E5010000 		.4byte	.LASF85
 2785 06a7 01       		.byte	0x1
 2786 06a8 38       		.byte	0x38
 2787 06a9 76000000 		.4byte	0x76
 2788 06ad 01       		.byte	0x1
 2789 06ae 05       		.byte	0x5
 2790 06af 03       		.byte	0x3
 2791 06b0 00000000 		.4byte	total_distance_b_bcd
 2792 06b4 15       		.uleb128 0x15
 2793 06b5 71010000 		.4byte	.LASF53
 2794 06b9 01       		.byte	0x1
 2795 06ba 39       		.byte	0x39
 2796 06bb 76000000 		.4byte	0x76
 2797 06bf 01       		.byte	0x1
 2798 06c0 05       		.byte	0x5
 2799 06c1 03       		.byte	0x3
 2800 06c2 00000000 		.4byte	cadence
 2801 06c6 15       		.uleb128 0x15
 2802 06c7 92030000 		.4byte	.LASF86
 2803 06cb 01       		.byte	0x1
 2804 06cc 39       		.byte	0x39
 2805 06cd 76000000 		.4byte	0x76
 2806 06d1 01       		.byte	0x1
 2807 06d2 05       		.byte	0x5
 2808 06d3 03       		.byte	0x3
 2809 06d4 00000000 		.4byte	cadence_bcd
 2810 06d8 15       		.uleb128 0x15
 2811 06d9 03030000 		.4byte	.LASF87
 2812 06dd 01       		.byte	0x1
 2813 06de 3A       		.byte	0x3a
 2814 06df 76000000 		.4byte	0x76
ARM GAS  /tmp/ccLwwf6o.s 			page 59


 2815 06e3 01       		.byte	0x1
 2816 06e4 05       		.byte	0x5
 2817 06e5 03       		.byte	0x3
 2818 06e6 00000000 		.4byte	stop_time_mode
 2819 06ea 15       		.uleb128 0x15
 2820 06eb 83000000 		.4byte	.LASF88
 2821 06ef 01       		.byte	0x1
 2822 06f0 3A       		.byte	0x3a
 2823 06f1 76000000 		.4byte	0x76
 2824 06f5 01       		.byte	0x1
 2825 06f6 05       		.byte	0x5
 2826 06f7 03       		.byte	0x3
 2827 06f8 00000000 		.4byte	post_fork
 2828 06fc 15       		.uleb128 0x15
 2829 06fd F8020000 		.4byte	.LASF89
 2830 0701 01       		.byte	0x1
 2831 0702 3A       		.byte	0x3a
 2832 0703 76000000 		.4byte	0x76
 2833 0707 01       		.byte	0x1
 2834 0708 05       		.byte	0x5
 2835 0709 03       		.byte	0x3
 2836 070a 00000000 		.4byte	fork_equal
 2837 070e 15       		.uleb128 0x15
 2838 070f 61000000 		.4byte	.LASF90
 2839 0713 01       		.byte	0x1
 2840 0714 3A       		.byte	0x3a
 2841 0715 76000000 		.4byte	0x76
 2842 0719 01       		.byte	0x1
 2843 071a 05       		.byte	0x5
 2844 071b 03       		.byte	0x3
 2845 071c 00000000 		.4byte	now_stop_time
 2846 0720 15       		.uleb128 0x15
 2847 0721 D6010000 		.4byte	.LASF91
 2848 0725 01       		.byte	0x1
 2849 0726 3A       		.byte	0x3a
 2850 0727 76000000 		.4byte	0x76
 2851 072b 01       		.byte	0x1
 2852 072c 05       		.byte	0x5
 2853 072d 03       		.byte	0x3
 2854 072e 00000000 		.4byte	post_stop_time
 2855 0732 15       		.uleb128 0x15
 2856 0733 49010000 		.4byte	.LASF92
 2857 0737 01       		.byte	0x1
 2858 0738 3A       		.byte	0x3a
 2859 0739 76000000 		.4byte	0x76
 2860 073d 01       		.byte	0x1
 2861 073e 05       		.byte	0x5
 2862 073f 03       		.byte	0x3
 2863 0740 00000000 		.4byte	stop_time
 2864 0744 15       		.uleb128 0x15
 2865 0745 18030000 		.4byte	.LASF93
 2866 0749 01       		.byte	0x1
 2867 074a 3A       		.byte	0x3a
 2868 074b 76000000 		.4byte	0x76
 2869 074f 01       		.byte	0x1
 2870 0750 05       		.byte	0x5
 2871 0751 03       		.byte	0x3
ARM GAS  /tmp/ccLwwf6o.s 			page 60


 2872 0752 00000000 		.4byte	store_stop_time
 2873 0756 00       		.byte	0
 2874              		.section	.debug_abbrev,"",%progbits
 2875              	.Ldebug_abbrev0:
 2876 0000 01       		.uleb128 0x1
 2877 0001 11       		.uleb128 0x11
 2878 0002 01       		.byte	0x1
 2879 0003 25       		.uleb128 0x25
 2880 0004 0E       		.uleb128 0xe
 2881 0005 13       		.uleb128 0x13
 2882 0006 0B       		.uleb128 0xb
 2883 0007 03       		.uleb128 0x3
 2884 0008 0E       		.uleb128 0xe
 2885 0009 1B       		.uleb128 0x1b
 2886 000a 0E       		.uleb128 0xe
 2887 000b 11       		.uleb128 0x11
 2888 000c 01       		.uleb128 0x1
 2889 000d 12       		.uleb128 0x12
 2890 000e 01       		.uleb128 0x1
 2891 000f 10       		.uleb128 0x10
 2892 0010 06       		.uleb128 0x6
 2893 0011 00       		.byte	0
 2894 0012 00       		.byte	0
 2895 0013 02       		.uleb128 0x2
 2896 0014 24       		.uleb128 0x24
 2897 0015 00       		.byte	0
 2898 0016 0B       		.uleb128 0xb
 2899 0017 0B       		.uleb128 0xb
 2900 0018 3E       		.uleb128 0x3e
 2901 0019 0B       		.uleb128 0xb
 2902 001a 03       		.uleb128 0x3
 2903 001b 0E       		.uleb128 0xe
 2904 001c 00       		.byte	0
 2905 001d 00       		.byte	0
 2906 001e 03       		.uleb128 0x3
 2907 001f 16       		.uleb128 0x16
 2908 0020 00       		.byte	0
 2909 0021 03       		.uleb128 0x3
 2910 0022 0E       		.uleb128 0xe
 2911 0023 3A       		.uleb128 0x3a
 2912 0024 0B       		.uleb128 0xb
 2913 0025 3B       		.uleb128 0x3b
 2914 0026 0B       		.uleb128 0xb
 2915 0027 49       		.uleb128 0x49
 2916 0028 13       		.uleb128 0x13
 2917 0029 00       		.byte	0
 2918 002a 00       		.byte	0
 2919 002b 04       		.uleb128 0x4
 2920 002c 24       		.uleb128 0x24
 2921 002d 00       		.byte	0
 2922 002e 0B       		.uleb128 0xb
 2923 002f 0B       		.uleb128 0xb
 2924 0030 3E       		.uleb128 0x3e
 2925 0031 0B       		.uleb128 0xb
 2926 0032 03       		.uleb128 0x3
 2927 0033 08       		.uleb128 0x8
 2928 0034 00       		.byte	0
ARM GAS  /tmp/ccLwwf6o.s 			page 61


 2929 0035 00       		.byte	0
 2930 0036 05       		.uleb128 0x5
 2931 0037 2E       		.uleb128 0x2e
 2932 0038 00       		.byte	0
 2933 0039 3F       		.uleb128 0x3f
 2934 003a 0C       		.uleb128 0xc
 2935 003b 03       		.uleb128 0x3
 2936 003c 0E       		.uleb128 0xe
 2937 003d 3A       		.uleb128 0x3a
 2938 003e 0B       		.uleb128 0xb
 2939 003f 3B       		.uleb128 0x3b
 2940 0040 0B       		.uleb128 0xb
 2941 0041 27       		.uleb128 0x27
 2942 0042 0C       		.uleb128 0xc
 2943 0043 49       		.uleb128 0x49
 2944 0044 13       		.uleb128 0x13
 2945 0045 11       		.uleb128 0x11
 2946 0046 01       		.uleb128 0x1
 2947 0047 12       		.uleb128 0x12
 2948 0048 01       		.uleb128 0x1
 2949 0049 40       		.uleb128 0x40
 2950 004a 0A       		.uleb128 0xa
 2951 004b 9742     		.uleb128 0x2117
 2952 004d 0C       		.uleb128 0xc
 2953 004e 00       		.byte	0
 2954 004f 00       		.byte	0
 2955 0050 06       		.uleb128 0x6
 2956 0051 2E       		.uleb128 0x2e
 2957 0052 00       		.byte	0
 2958 0053 3F       		.uleb128 0x3f
 2959 0054 0C       		.uleb128 0xc
 2960 0055 03       		.uleb128 0x3
 2961 0056 0E       		.uleb128 0xe
 2962 0057 3A       		.uleb128 0x3a
 2963 0058 0B       		.uleb128 0xb
 2964 0059 3B       		.uleb128 0x3b
 2965 005a 0B       		.uleb128 0xb
 2966 005b 27       		.uleb128 0x27
 2967 005c 0C       		.uleb128 0xc
 2968 005d 11       		.uleb128 0x11
 2969 005e 01       		.uleb128 0x1
 2970 005f 12       		.uleb128 0x12
 2971 0060 01       		.uleb128 0x1
 2972 0061 40       		.uleb128 0x40
 2973 0062 0A       		.uleb128 0xa
 2974 0063 9742     		.uleb128 0x2117
 2975 0065 0C       		.uleb128 0xc
 2976 0066 00       		.byte	0
 2977 0067 00       		.byte	0
 2978 0068 07       		.uleb128 0x7
 2979 0069 2E       		.uleb128 0x2e
 2980 006a 01       		.byte	0x1
 2981 006b 3F       		.uleb128 0x3f
 2982 006c 0C       		.uleb128 0xc
 2983 006d 03       		.uleb128 0x3
 2984 006e 0E       		.uleb128 0xe
 2985 006f 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccLwwf6o.s 			page 62


 2986 0070 0B       		.uleb128 0xb
 2987 0071 3B       		.uleb128 0x3b
 2988 0072 0B       		.uleb128 0xb
 2989 0073 27       		.uleb128 0x27
 2990 0074 0C       		.uleb128 0xc
 2991 0075 11       		.uleb128 0x11
 2992 0076 01       		.uleb128 0x1
 2993 0077 12       		.uleb128 0x12
 2994 0078 01       		.uleb128 0x1
 2995 0079 40       		.uleb128 0x40
 2996 007a 06       		.uleb128 0x6
 2997 007b 9742     		.uleb128 0x2117
 2998 007d 0C       		.uleb128 0xc
 2999 007e 01       		.uleb128 0x1
 3000 007f 13       		.uleb128 0x13
 3001 0080 00       		.byte	0
 3002 0081 00       		.byte	0
 3003 0082 08       		.uleb128 0x8
 3004 0083 05       		.uleb128 0x5
 3005 0084 00       		.byte	0
 3006 0085 03       		.uleb128 0x3
 3007 0086 0E       		.uleb128 0xe
 3008 0087 3A       		.uleb128 0x3a
 3009 0088 0B       		.uleb128 0xb
 3010 0089 3B       		.uleb128 0x3b
 3011 008a 0B       		.uleb128 0xb
 3012 008b 49       		.uleb128 0x49
 3013 008c 13       		.uleb128 0x13
 3014 008d 02       		.uleb128 0x2
 3015 008e 0A       		.uleb128 0xa
 3016 008f 00       		.byte	0
 3017 0090 00       		.byte	0
 3018 0091 09       		.uleb128 0x9
 3019 0092 2E       		.uleb128 0x2e
 3020 0093 01       		.byte	0x1
 3021 0094 3F       		.uleb128 0x3f
 3022 0095 0C       		.uleb128 0xc
 3023 0096 03       		.uleb128 0x3
 3024 0097 0E       		.uleb128 0xe
 3025 0098 3A       		.uleb128 0x3a
 3026 0099 0B       		.uleb128 0xb
 3027 009a 3B       		.uleb128 0x3b
 3028 009b 0B       		.uleb128 0xb
 3029 009c 27       		.uleb128 0x27
 3030 009d 0C       		.uleb128 0xc
 3031 009e 49       		.uleb128 0x49
 3032 009f 13       		.uleb128 0x13
 3033 00a0 11       		.uleb128 0x11
 3034 00a1 01       		.uleb128 0x1
 3035 00a2 12       		.uleb128 0x12
 3036 00a3 01       		.uleb128 0x1
 3037 00a4 40       		.uleb128 0x40
 3038 00a5 06       		.uleb128 0x6
 3039 00a6 9642     		.uleb128 0x2116
 3040 00a8 0C       		.uleb128 0xc
 3041 00a9 01       		.uleb128 0x1
 3042 00aa 13       		.uleb128 0x13
ARM GAS  /tmp/ccLwwf6o.s 			page 63


 3043 00ab 00       		.byte	0
 3044 00ac 00       		.byte	0
 3045 00ad 0A       		.uleb128 0xa
 3046 00ae 34       		.uleb128 0x34
 3047 00af 00       		.byte	0
 3048 00b0 03       		.uleb128 0x3
 3049 00b1 08       		.uleb128 0x8
 3050 00b2 3A       		.uleb128 0x3a
 3051 00b3 0B       		.uleb128 0xb
 3052 00b4 3B       		.uleb128 0x3b
 3053 00b5 0B       		.uleb128 0xb
 3054 00b6 49       		.uleb128 0x49
 3055 00b7 13       		.uleb128 0x13
 3056 00b8 02       		.uleb128 0x2
 3057 00b9 0A       		.uleb128 0xa
 3058 00ba 00       		.byte	0
 3059 00bb 00       		.byte	0
 3060 00bc 0B       		.uleb128 0xb
 3061 00bd 34       		.uleb128 0x34
 3062 00be 00       		.byte	0
 3063 00bf 03       		.uleb128 0x3
 3064 00c0 0E       		.uleb128 0xe
 3065 00c1 3A       		.uleb128 0x3a
 3066 00c2 0B       		.uleb128 0xb
 3067 00c3 3B       		.uleb128 0x3b
 3068 00c4 0B       		.uleb128 0xb
 3069 00c5 49       		.uleb128 0x49
 3070 00c6 13       		.uleb128 0x13
 3071 00c7 02       		.uleb128 0x2
 3072 00c8 0A       		.uleb128 0xa
 3073 00c9 00       		.byte	0
 3074 00ca 00       		.byte	0
 3075 00cb 0C       		.uleb128 0xc
 3076 00cc 0B       		.uleb128 0xb
 3077 00cd 01       		.byte	0x1
 3078 00ce 11       		.uleb128 0x11
 3079 00cf 01       		.uleb128 0x1
 3080 00d0 12       		.uleb128 0x12
 3081 00d1 01       		.uleb128 0x1
 3082 00d2 00       		.byte	0
 3083 00d3 00       		.byte	0
 3084 00d4 0D       		.uleb128 0xd
 3085 00d5 2E       		.uleb128 0x2e
 3086 00d6 00       		.byte	0
 3087 00d7 3F       		.uleb128 0x3f
 3088 00d8 0C       		.uleb128 0xc
 3089 00d9 03       		.uleb128 0x3
 3090 00da 0E       		.uleb128 0xe
 3091 00db 3A       		.uleb128 0x3a
 3092 00dc 0B       		.uleb128 0xb
 3093 00dd 3B       		.uleb128 0x3b
 3094 00de 0B       		.uleb128 0xb
 3095 00df 27       		.uleb128 0x27
 3096 00e0 0C       		.uleb128 0xc
 3097 00e1 11       		.uleb128 0x11
 3098 00e2 01       		.uleb128 0x1
 3099 00e3 12       		.uleb128 0x12
ARM GAS  /tmp/ccLwwf6o.s 			page 64


 3100 00e4 01       		.uleb128 0x1
 3101 00e5 40       		.uleb128 0x40
 3102 00e6 06       		.uleb128 0x6
 3103 00e7 9642     		.uleb128 0x2116
 3104 00e9 0C       		.uleb128 0xc
 3105 00ea 00       		.byte	0
 3106 00eb 00       		.byte	0
 3107 00ec 0E       		.uleb128 0xe
 3108 00ed 2E       		.uleb128 0x2e
 3109 00ee 00       		.byte	0
 3110 00ef 3F       		.uleb128 0x3f
 3111 00f0 0C       		.uleb128 0xc
 3112 00f1 03       		.uleb128 0x3
 3113 00f2 0E       		.uleb128 0xe
 3114 00f3 3A       		.uleb128 0x3a
 3115 00f4 0B       		.uleb128 0xb
 3116 00f5 3B       		.uleb128 0x3b
 3117 00f6 0B       		.uleb128 0xb
 3118 00f7 27       		.uleb128 0x27
 3119 00f8 0C       		.uleb128 0xc
 3120 00f9 49       		.uleb128 0x49
 3121 00fa 13       		.uleb128 0x13
 3122 00fb 11       		.uleb128 0x11
 3123 00fc 01       		.uleb128 0x1
 3124 00fd 12       		.uleb128 0x12
 3125 00fe 01       		.uleb128 0x1
 3126 00ff 40       		.uleb128 0x40
 3127 0100 06       		.uleb128 0x6
 3128 0101 9642     		.uleb128 0x2116
 3129 0103 0C       		.uleb128 0xc
 3130 0104 00       		.byte	0
 3131 0105 00       		.byte	0
 3132 0106 0F       		.uleb128 0xf
 3133 0107 2E       		.uleb128 0x2e
 3134 0108 01       		.byte	0x1
 3135 0109 3F       		.uleb128 0x3f
 3136 010a 0C       		.uleb128 0xc
 3137 010b 03       		.uleb128 0x3
 3138 010c 0E       		.uleb128 0xe
 3139 010d 3A       		.uleb128 0x3a
 3140 010e 0B       		.uleb128 0xb
 3141 010f 3B       		.uleb128 0x3b
 3142 0110 0B       		.uleb128 0xb
 3143 0111 27       		.uleb128 0x27
 3144 0112 0C       		.uleb128 0xc
 3145 0113 11       		.uleb128 0x11
 3146 0114 01       		.uleb128 0x1
 3147 0115 12       		.uleb128 0x12
 3148 0116 01       		.uleb128 0x1
 3149 0117 40       		.uleb128 0x40
 3150 0118 06       		.uleb128 0x6
 3151 0119 9642     		.uleb128 0x2116
 3152 011b 0C       		.uleb128 0xc
 3153 011c 01       		.uleb128 0x1
 3154 011d 13       		.uleb128 0x13
 3155 011e 00       		.byte	0
 3156 011f 00       		.byte	0
ARM GAS  /tmp/ccLwwf6o.s 			page 65


 3157 0120 10       		.uleb128 0x10
 3158 0121 2E       		.uleb128 0x2e
 3159 0122 01       		.byte	0x1
 3160 0123 3F       		.uleb128 0x3f
 3161 0124 0C       		.uleb128 0xc
 3162 0125 03       		.uleb128 0x3
 3163 0126 0E       		.uleb128 0xe
 3164 0127 3A       		.uleb128 0x3a
 3165 0128 0B       		.uleb128 0xb
 3166 0129 3B       		.uleb128 0x3b
 3167 012a 05       		.uleb128 0x5
 3168 012b 27       		.uleb128 0x27
 3169 012c 0C       		.uleb128 0xc
 3170 012d 49       		.uleb128 0x49
 3171 012e 13       		.uleb128 0x13
 3172 012f 11       		.uleb128 0x11
 3173 0130 01       		.uleb128 0x1
 3174 0131 12       		.uleb128 0x12
 3175 0132 01       		.uleb128 0x1
 3176 0133 40       		.uleb128 0x40
 3177 0134 06       		.uleb128 0x6
 3178 0135 9642     		.uleb128 0x2116
 3179 0137 0C       		.uleb128 0xc
 3180 0138 01       		.uleb128 0x1
 3181 0139 13       		.uleb128 0x13
 3182 013a 00       		.byte	0
 3183 013b 00       		.byte	0
 3184 013c 11       		.uleb128 0x11
 3185 013d 05       		.uleb128 0x5
 3186 013e 00       		.byte	0
 3187 013f 03       		.uleb128 0x3
 3188 0140 0E       		.uleb128 0xe
 3189 0141 3A       		.uleb128 0x3a
 3190 0142 0B       		.uleb128 0xb
 3191 0143 3B       		.uleb128 0x3b
 3192 0144 05       		.uleb128 0x5
 3193 0145 49       		.uleb128 0x49
 3194 0146 13       		.uleb128 0x13
 3195 0147 02       		.uleb128 0x2
 3196 0148 0A       		.uleb128 0xa
 3197 0149 00       		.byte	0
 3198 014a 00       		.byte	0
 3199 014b 12       		.uleb128 0x12
 3200 014c 34       		.uleb128 0x34
 3201 014d 00       		.byte	0
 3202 014e 03       		.uleb128 0x3
 3203 014f 0E       		.uleb128 0xe
 3204 0150 3A       		.uleb128 0x3a
 3205 0151 0B       		.uleb128 0xb
 3206 0152 3B       		.uleb128 0x3b
 3207 0153 05       		.uleb128 0x5
 3208 0154 49       		.uleb128 0x49
 3209 0155 13       		.uleb128 0x13
 3210 0156 02       		.uleb128 0x2
 3211 0157 0A       		.uleb128 0xa
 3212 0158 00       		.byte	0
 3213 0159 00       		.byte	0
ARM GAS  /tmp/ccLwwf6o.s 			page 66


 3214 015a 13       		.uleb128 0x13
 3215 015b 2E       		.uleb128 0x2e
 3216 015c 00       		.byte	0
 3217 015d 3F       		.uleb128 0x3f
 3218 015e 0C       		.uleb128 0xc
 3219 015f 03       		.uleb128 0x3
 3220 0160 0E       		.uleb128 0xe
 3221 0161 3A       		.uleb128 0x3a
 3222 0162 0B       		.uleb128 0xb
 3223 0163 3B       		.uleb128 0x3b
 3224 0164 05       		.uleb128 0x5
 3225 0165 27       		.uleb128 0x27
 3226 0166 0C       		.uleb128 0xc
 3227 0167 11       		.uleb128 0x11
 3228 0168 01       		.uleb128 0x1
 3229 0169 12       		.uleb128 0x12
 3230 016a 01       		.uleb128 0x1
 3231 016b 40       		.uleb128 0x40
 3232 016c 06       		.uleb128 0x6
 3233 016d 9642     		.uleb128 0x2116
 3234 016f 0C       		.uleb128 0xc
 3235 0170 00       		.byte	0
 3236 0171 00       		.byte	0
 3237 0172 14       		.uleb128 0x14
 3238 0173 2E       		.uleb128 0x2e
 3239 0174 00       		.byte	0
 3240 0175 3F       		.uleb128 0x3f
 3241 0176 0C       		.uleb128 0xc
 3242 0177 03       		.uleb128 0x3
 3243 0178 0E       		.uleb128 0xe
 3244 0179 3A       		.uleb128 0x3a
 3245 017a 0B       		.uleb128 0xb
 3246 017b 3B       		.uleb128 0x3b
 3247 017c 05       		.uleb128 0x5
 3248 017d 27       		.uleb128 0x27
 3249 017e 0C       		.uleb128 0xc
 3250 017f 49       		.uleb128 0x49
 3251 0180 13       		.uleb128 0x13
 3252 0181 11       		.uleb128 0x11
 3253 0182 01       		.uleb128 0x1
 3254 0183 12       		.uleb128 0x12
 3255 0184 01       		.uleb128 0x1
 3256 0185 40       		.uleb128 0x40
 3257 0186 06       		.uleb128 0x6
 3258 0187 9642     		.uleb128 0x2116
 3259 0189 0C       		.uleb128 0xc
 3260 018a 00       		.byte	0
 3261 018b 00       		.byte	0
 3262 018c 15       		.uleb128 0x15
 3263 018d 34       		.uleb128 0x34
 3264 018e 00       		.byte	0
 3265 018f 03       		.uleb128 0x3
 3266 0190 0E       		.uleb128 0xe
 3267 0191 3A       		.uleb128 0x3a
 3268 0192 0B       		.uleb128 0xb
 3269 0193 3B       		.uleb128 0x3b
 3270 0194 0B       		.uleb128 0xb
ARM GAS  /tmp/ccLwwf6o.s 			page 67


 3271 0195 49       		.uleb128 0x49
 3272 0196 13       		.uleb128 0x13
 3273 0197 3F       		.uleb128 0x3f
 3274 0198 0C       		.uleb128 0xc
 3275 0199 02       		.uleb128 0x2
 3276 019a 0A       		.uleb128 0xa
 3277 019b 00       		.byte	0
 3278 019c 00       		.byte	0
 3279 019d 16       		.uleb128 0x16
 3280 019e 0F       		.uleb128 0xf
 3281 019f 00       		.byte	0
 3282 01a0 0B       		.uleb128 0xb
 3283 01a1 0B       		.uleb128 0xb
 3284 01a2 49       		.uleb128 0x49
 3285 01a3 13       		.uleb128 0x13
 3286 01a4 00       		.byte	0
 3287 01a5 00       		.byte	0
 3288 01a6 17       		.uleb128 0x17
 3289 01a7 35       		.uleb128 0x35
 3290 01a8 00       		.byte	0
 3291 01a9 49       		.uleb128 0x49
 3292 01aa 13       		.uleb128 0x13
 3293 01ab 00       		.byte	0
 3294 01ac 00       		.byte	0
 3295 01ad 00       		.byte	0
 3296              		.section	.debug_loc,"",%progbits
 3297              	.Ldebug_loc0:
 3298              	.LLST0:
 3299 0000 F8000000 		.4byte	.LFB12-.Ltext0
 3300 0004 FA000000 		.4byte	.LCFI0-.Ltext0
 3301 0008 0200     		.2byte	0x2
 3302 000a 7D       		.byte	0x7d
 3303 000b 00       		.sleb128 0
 3304 000c FA000000 		.4byte	.LCFI0-.Ltext0
 3305 0010 28010000 		.4byte	.LFE12-.Ltext0
 3306 0014 0200     		.2byte	0x2
 3307 0016 7D       		.byte	0x7d
 3308 0017 10       		.sleb128 16
 3309 0018 00000000 		.4byte	0
 3310 001c 00000000 		.4byte	0
 3311              	.LLST1:
 3312 0020 28010000 		.4byte	.LFB13-.Ltext0
 3313 0024 2A010000 		.4byte	.LCFI1-.Ltext0
 3314 0028 0200     		.2byte	0x2
 3315 002a 7D       		.byte	0x7d
 3316 002b 00       		.sleb128 0
 3317 002c 2A010000 		.4byte	.LCFI1-.Ltext0
 3318 0030 2C010000 		.4byte	.LCFI2-.Ltext0
 3319 0034 0200     		.2byte	0x2
 3320 0036 7D       		.byte	0x7d
 3321 0037 04       		.sleb128 4
 3322 0038 2C010000 		.4byte	.LCFI2-.Ltext0
 3323 003c 76010000 		.4byte	.LFE13-.Ltext0
 3324 0040 0200     		.2byte	0x2
 3325 0042 7D       		.byte	0x7d
 3326 0043 20       		.sleb128 32
 3327 0044 00000000 		.4byte	0
ARM GAS  /tmp/ccLwwf6o.s 			page 68


 3328 0048 00000000 		.4byte	0
 3329              	.LLST2:
 3330 004c 78010000 		.4byte	.LFB14-.Ltext0
 3331 0050 7A010000 		.4byte	.LCFI3-.Ltext0
 3332 0054 0200     		.2byte	0x2
 3333 0056 7D       		.byte	0x7d
 3334 0057 00       		.sleb128 0
 3335 0058 7A010000 		.4byte	.LCFI3-.Ltext0
 3336 005c 44020000 		.4byte	.LFE14-.Ltext0
 3337 0060 0200     		.2byte	0x2
 3338 0062 7D       		.byte	0x7d
 3339 0063 08       		.sleb128 8
 3340 0064 00000000 		.4byte	0
 3341 0068 00000000 		.4byte	0
 3342              	.LLST3:
 3343 006c 44020000 		.4byte	.LFB15-.Ltext0
 3344 0070 46020000 		.4byte	.LCFI4-.Ltext0
 3345 0074 0200     		.2byte	0x2
 3346 0076 7D       		.byte	0x7d
 3347 0077 00       		.sleb128 0
 3348 0078 46020000 		.4byte	.LCFI4-.Ltext0
 3349 007c 68020000 		.4byte	.LFE15-.Ltext0
 3350 0080 0200     		.2byte	0x2
 3351 0082 7D       		.byte	0x7d
 3352 0083 08       		.sleb128 8
 3353 0084 00000000 		.4byte	0
 3354 0088 00000000 		.4byte	0
 3355              	.LLST4:
 3356 008c 68020000 		.4byte	.LFB16-.Ltext0
 3357 0090 6A020000 		.4byte	.LCFI5-.Ltext0
 3358 0094 0200     		.2byte	0x2
 3359 0096 7D       		.byte	0x7d
 3360 0097 00       		.sleb128 0
 3361 0098 6A020000 		.4byte	.LCFI5-.Ltext0
 3362 009c 6C020000 		.4byte	.LCFI6-.Ltext0
 3363 00a0 0200     		.2byte	0x2
 3364 00a2 7D       		.byte	0x7d
 3365 00a3 04       		.sleb128 4
 3366 00a4 6C020000 		.4byte	.LCFI6-.Ltext0
 3367 00a8 7C030000 		.4byte	.LFE16-.Ltext0
 3368 00ac 0200     		.2byte	0x2
 3369 00ae 7D       		.byte	0x7d
 3370 00af 20       		.sleb128 32
 3371 00b0 00000000 		.4byte	0
 3372 00b4 00000000 		.4byte	0
 3373              	.LLST5:
 3374 00b8 7C030000 		.4byte	.LFB17-.Ltext0
 3375 00bc 7E030000 		.4byte	.LCFI7-.Ltext0
 3376 00c0 0200     		.2byte	0x2
 3377 00c2 7D       		.byte	0x7d
 3378 00c3 00       		.sleb128 0
 3379 00c4 7E030000 		.4byte	.LCFI7-.Ltext0
 3380 00c8 CC030000 		.4byte	.LFE17-.Ltext0
 3381 00cc 0200     		.2byte	0x2
 3382 00ce 7D       		.byte	0x7d
 3383 00cf 08       		.sleb128 8
 3384 00d0 00000000 		.4byte	0
ARM GAS  /tmp/ccLwwf6o.s 			page 69


 3385 00d4 00000000 		.4byte	0
 3386              	.LLST6:
 3387 00d8 CC030000 		.4byte	.LFB18-.Ltext0
 3388 00dc CE030000 		.4byte	.LCFI8-.Ltext0
 3389 00e0 0200     		.2byte	0x2
 3390 00e2 7D       		.byte	0x7d
 3391 00e3 00       		.sleb128 0
 3392 00e4 CE030000 		.4byte	.LCFI8-.Ltext0
 3393 00e8 D0030000 		.4byte	.LCFI9-.Ltext0
 3394 00ec 0200     		.2byte	0x2
 3395 00ee 7D       		.byte	0x7d
 3396 00ef 08       		.sleb128 8
 3397 00f0 D0030000 		.4byte	.LCFI9-.Ltext0
 3398 00f4 54040000 		.4byte	.LFE18-.Ltext0
 3399 00f8 0200     		.2byte	0x2
 3400 00fa 7D       		.byte	0x7d
 3401 00fb 20       		.sleb128 32
 3402 00fc 00000000 		.4byte	0
 3403 0100 00000000 		.4byte	0
 3404              	.LLST7:
 3405 0104 54040000 		.4byte	.LFB19-.Ltext0
 3406 0108 56040000 		.4byte	.LCFI10-.Ltext0
 3407 010c 0200     		.2byte	0x2
 3408 010e 7D       		.byte	0x7d
 3409 010f 00       		.sleb128 0
 3410 0110 56040000 		.4byte	.LCFI10-.Ltext0
 3411 0114 58040000 		.4byte	.LCFI11-.Ltext0
 3412 0118 0200     		.2byte	0x2
 3413 011a 7D       		.byte	0x7d
 3414 011b 08       		.sleb128 8
 3415 011c 58040000 		.4byte	.LCFI11-.Ltext0
 3416 0120 BC040000 		.4byte	.LFE19-.Ltext0
 3417 0124 0200     		.2byte	0x2
 3418 0126 7D       		.byte	0x7d
 3419 0127 18       		.sleb128 24
 3420 0128 00000000 		.4byte	0
 3421 012c 00000000 		.4byte	0
 3422              	.LLST8:
 3423 0130 BC040000 		.4byte	.LFB20-.Ltext0
 3424 0134 BE040000 		.4byte	.LCFI12-.Ltext0
 3425 0138 0200     		.2byte	0x2
 3426 013a 7D       		.byte	0x7d
 3427 013b 00       		.sleb128 0
 3428 013c BE040000 		.4byte	.LCFI12-.Ltext0
 3429 0140 C0040000 		.4byte	.LCFI13-.Ltext0
 3430 0144 0200     		.2byte	0x2
 3431 0146 7D       		.byte	0x7d
 3432 0147 04       		.sleb128 4
 3433 0148 C0040000 		.4byte	.LCFI13-.Ltext0
 3434 014c 44050000 		.4byte	.LFE20-.Ltext0
 3435 0150 0200     		.2byte	0x2
 3436 0152 7D       		.byte	0x7d
 3437 0153 18       		.sleb128 24
 3438 0154 00000000 		.4byte	0
 3439 0158 00000000 		.4byte	0
 3440              	.LLST9:
 3441 015c 44050000 		.4byte	.LFB21-.Ltext0
ARM GAS  /tmp/ccLwwf6o.s 			page 70


 3442 0160 46050000 		.4byte	.LCFI14-.Ltext0
 3443 0164 0200     		.2byte	0x2
 3444 0166 7D       		.byte	0x7d
 3445 0167 00       		.sleb128 0
 3446 0168 46050000 		.4byte	.LCFI14-.Ltext0
 3447 016c D8050000 		.4byte	.LFE21-.Ltext0
 3448 0170 0200     		.2byte	0x2
 3449 0172 7D       		.byte	0x7d
 3450 0173 08       		.sleb128 8
 3451 0174 00000000 		.4byte	0
 3452 0178 00000000 		.4byte	0
 3453              	.LLST10:
 3454 017c D8050000 		.4byte	.LFB22-.Ltext0
 3455 0180 DA050000 		.4byte	.LCFI15-.Ltext0
 3456 0184 0200     		.2byte	0x2
 3457 0186 7D       		.byte	0x7d
 3458 0187 00       		.sleb128 0
 3459 0188 DA050000 		.4byte	.LCFI15-.Ltext0
 3460 018c 98060000 		.4byte	.LFE22-.Ltext0
 3461 0190 0200     		.2byte	0x2
 3462 0192 7D       		.byte	0x7d
 3463 0193 08       		.sleb128 8
 3464 0194 00000000 		.4byte	0
 3465 0198 00000000 		.4byte	0
 3466              	.LLST11:
 3467 019c 98060000 		.4byte	.LFB23-.Ltext0
 3468 01a0 9A060000 		.4byte	.LCFI16-.Ltext0
 3469 01a4 0200     		.2byte	0x2
 3470 01a6 7D       		.byte	0x7d
 3471 01a7 00       		.sleb128 0
 3472 01a8 9A060000 		.4byte	.LCFI16-.Ltext0
 3473 01ac E4090000 		.4byte	.LFE23-.Ltext0
 3474 01b0 0200     		.2byte	0x2
 3475 01b2 7D       		.byte	0x7d
 3476 01b3 08       		.sleb128 8
 3477 01b4 00000000 		.4byte	0
 3478 01b8 00000000 		.4byte	0
 3479              		.section	.debug_aranges,"",%progbits
 3480 0000 1C000000 		.4byte	0x1c
 3481 0004 0200     		.2byte	0x2
 3482 0006 00000000 		.4byte	.Ldebug_info0
 3483 000a 04       		.byte	0x4
 3484 000b 00       		.byte	0
 3485 000c 0000     		.2byte	0
 3486 000e 0000     		.2byte	0
 3487 0010 00000000 		.4byte	.Ltext0
 3488 0014 E4090000 		.4byte	.Letext0-.Ltext0
 3489 0018 00000000 		.4byte	0
 3490 001c 00000000 		.4byte	0
 3491              		.section	.debug_line,"",%progbits
 3492              	.Ldebug_line0:
 3493 0000 C3010000 		.section	.debug_str,"MS",%progbits,1
 3493      0200BF00 
 3493      00000201 
 3493      FB0E0D00 
 3493      01010101 
 3494              	.LASF40:
ARM GAS  /tmp/ccLwwf6o.s 			page 71


 3495 0000 6765745F 		.ascii	"get_distance\000"
 3495      64697374 
 3495      616E6365 
 3495      00
 3496              	.LASF77:
 3497 000d 74696D65 		.ascii	"time_m_bcd\000"
 3497      5F6D5F62 
 3497      636400
 3498              	.LASF58:
 3499 0018 4F4C4544 		.ascii	"OLED\000"
 3499      00
 3500              	.LASF81:
 3501 001d 73706565 		.ascii	"speed_b_bcd\000"
 3501      645F625F 
 3501      62636400 
 3502              	.LASF12:
 3503 0029 73657474 		.ascii	"setting\000"
 3503      696E6700 
 3504              	.LASF43:
 3505 0031 665F6469 		.ascii	"f_distance\000"
 3505      7374616E 
 3505      636500
 3506              	.LASF2:
 3507 003c 73686F72 		.ascii	"short int\000"
 3507      7420696E 
 3507      7400
 3508              	.LASF83:
 3509 0046 746F7461 		.ascii	"total_distance_b\000"
 3509      6C5F6469 
 3509      7374616E 
 3509      63655F62 
 3509      00
 3510              	.LASF73:
 3511 0057 706F7374 		.ascii	"post_time\000"
 3511      5F74696D 
 3511      6500
 3512              	.LASF90:
 3513 0061 6E6F775F 		.ascii	"now_stop_time\000"
 3513      73746F70 
 3513      5F74696D 
 3513      6500
 3514              	.LASF62:
 3515 006f 42555454 		.ascii	"BUTTON\000"
 3515      4F4E00
 3516              	.LASF16:
 3517 0076 63686563 		.ascii	"check_button\000"
 3517      6B5F6275 
 3517      74746F6E 
 3517      00
 3518              	.LASF88:
 3519 0083 706F7374 		.ascii	"post_fork\000"
 3519      5F666F72 
 3519      6B00
 3520              	.LASF57:
 3521 008d 6D61696E 		.ascii	"main\000"
 3521      00
 3522              	.LASF9:
ARM GAS  /tmp/ccLwwf6o.s 			page 72


 3523 0092 5F5F7569 		.ascii	"__uint32_t\000"
 3523      6E743332 
 3523      5F7400
 3524              	.LASF70:
 3525 009d 6D6F6465 		.ascii	"mode\000"
 3525      00
 3526              	.LASF74:
 3527 00a2 74696D65 		.ascii	"time_h\000"
 3527      5F6800
 3528              	.LASF69:
 3529 00a9 706F7374 		.ascii	"post_distance\000"
 3529      5F646973 
 3529      74616E63 
 3529      6500
 3530              	.LASF33:
 3531 00b7 70726573 		.ascii	"press_times\000"
 3531      735F7469 
 3531      6D657300 
 3532              	.LASF54:
 3533 00c3 63616465 		.ascii	"cadence_5\000"
 3533      6E63655F 
 3533      3500
 3534              	.LASF49:
 3535 00cd 74696D65 		.ascii	"time\000"
 3535      00
 3536              	.LASF75:
 3537 00d2 74696D65 		.ascii	"time_m\000"
 3537      5F6D00
 3538              	.LASF27:
 3539 00d9 76616C75 		.ascii	"value\000"
 3539      6500
 3540              	.LASF31:
 3541 00df 64697370 		.ascii	"display_segment\000"
 3541      6C61795F 
 3541      7365676D 
 3541      656E7400 
 3542              	.LASF68:
 3543 00ef 746F7461 		.ascii	"total_distance\000"
 3543      6C5F6469 
 3543      7374616E 
 3543      636500
 3544              	.LASF80:
 3545 00fe 73706565 		.ascii	"speed_f_bcd\000"
 3545      645F665F 
 3545      62636400 
 3546              	.LASF56:
 3547 010a 696E6974 		.ascii	"initiate\000"
 3547      69617465 
 3547      00
 3548              	.LASF50:
 3549 0113 665F7370 		.ascii	"f_speed\000"
 3549      65656400 
 3550              	.LASF55:
 3551 011b 72656672 		.ascii	"refresh_segment\000"
 3551      6573685F 
 3551      7365676D 
 3551      656E7400 
ARM GAS  /tmp/ccLwwf6o.s 			page 73


 3552              	.LASF71:
 3553 012b 77686565 		.ascii	"wheel_d\000"
 3553      6C5F6400 
 3554              	.LASF13:
 3555 0133 70726573 		.ascii	"press_trip\000"
 3555      735F7472 
 3555      697000
 3556              	.LASF76:
 3557 013e 74696D65 		.ascii	"time_h_bcd\000"
 3557      5F685F62 
 3557      636400
 3558              	.LASF92:
 3559 0149 73746F70 		.ascii	"stop_time\000"
 3559      5F74696D 
 3559      6500
 3560              	.LASF46:
 3561 0153 666C6F61 		.ascii	"float\000"
 3561      7400
 3562              	.LASF6:
 3563 0159 6C6F6E67 		.ascii	"long long int\000"
 3563      206C6F6E 
 3563      6720696E 
 3563      7400
 3564              	.LASF47:
 3565 0167 6765745F 		.ascii	"get_speed\000"
 3565      73706565 
 3565      6400
 3566              	.LASF53:
 3567 0171 63616465 		.ascii	"cadence\000"
 3567      6E636500 
 3568              	.LASF4:
 3569 0179 6C6F6E67 		.ascii	"long int\000"
 3569      20696E74 
 3569      00
 3570              	.LASF28:
 3571 0182 73686966 		.ascii	"shift\000"
 3571      7400
 3572              	.LASF79:
 3573 0188 73706565 		.ascii	"speed_b\000"
 3573      645F6200 
 3574              	.LASF95:
 3575 0190 636F6465 		.ascii	"code/main.c\000"
 3575      2F6D6169 
 3575      6E2E6300 
 3576              	.LASF20:
 3577 019c 72656164 		.ascii	"read_crank\000"
 3577      5F637261 
 3577      6E6B00
 3578              	.LASF65:
 3579 01a7 73776974 		.ascii	"switchDisplay\000"
 3579      63684469 
 3579      73706C61 
 3579      7900
 3580              	.LASF44:
 3581 01b5 665F6469 		.ascii	"f_distance_mm\000"
 3581      7374616E 
 3581      63655F6D 
ARM GAS  /tmp/ccLwwf6o.s 			page 74


 3581      6D00
 3582              	.LASF78:
 3583 01c3 73706565 		.ascii	"speed_f\000"
 3583      645F6600 
 3584              	.LASF14:
 3585 01cb 70726573 		.ascii	"press_mode\000"
 3585      735F6D6F 
 3585      646500
 3586              	.LASF91:
 3587 01d6 706F7374 		.ascii	"post_stop_time\000"
 3587      5F73746F 
 3587      705F7469 
 3587      6D6500
 3588              	.LASF85:
 3589 01e5 746F7461 		.ascii	"total_distance_b_bcd\000"
 3589      6C5F6469 
 3589      7374616E 
 3589      63655F62 
 3589      5F626364 
 3590              	.LASF1:
 3591 01fa 756E7369 		.ascii	"unsigned char\000"
 3591      676E6564 
 3591      20636861 
 3591      7200
 3592              	.LASF32:
 3593 0208 77616974 		.ascii	"wait_for_setting\000"
 3593      5F666F72 
 3593      5F736574 
 3593      74696E67 
 3593      00
 3594              	.LASF29:
 3595 0219 63686563 		.ascii	"check_time_stop\000"
 3595      6B5F7469 
 3595      6D655F73 
 3595      746F7000 
 3596              	.LASF34:
 3597 0229 77686565 		.ascii	"wheel_1\000"
 3597      6C5F3100 
 3598              	.LASF35:
 3599 0231 77686565 		.ascii	"wheel_2\000"
 3599      6C5F3200 
 3600              	.LASF0:
 3601 0239 7369676E 		.ascii	"signed char\000"
 3601      65642063 
 3601      68617200 
 3602              	.LASF7:
 3603 0245 6C6F6E67 		.ascii	"long long unsigned int\000"
 3603      206C6F6E 
 3603      6720756E 
 3603      7369676E 
 3603      65642069 
 3604              	.LASF10:
 3605 025c 75696E74 		.ascii	"uint32_t\000"
 3605      33325F74 
 3605      00
 3606              	.LASF8:
 3607 0265 756E7369 		.ascii	"unsigned int\000"
ARM GAS  /tmp/ccLwwf6o.s 			page 75


 3607      676E6564 
 3607      20696E74 
 3607      00
 3608              	.LASF64:
 3609 0272 69734E69 		.ascii	"isNight\000"
 3609      67687400 
 3610              	.LASF18:
 3611 027a 72656164 		.ascii	"read_time_short\000"
 3611      5F74696D 
 3611      655F7368 
 3611      6F727400 
 3612              	.LASF66:
 3613 028a 73706565 		.ascii	"speed\000"
 3613      6400
 3614              	.LASF23:
 3615 0290 636C6561 		.ascii	"clear_timer_long\000"
 3615      725F7469 
 3615      6D65725F 
 3615      6C6F6E67 
 3615      00
 3616              	.LASF59:
 3617 02a1 5345474D 		.ascii	"SEGMENT\000"
 3617      454E5400 
 3618              	.LASF26:
 3619 02a9 46726163 		.ascii	"Fraction\000"
 3619      74696F6E 
 3619      00
 3620              	.LASF3:
 3621 02b2 73686F72 		.ascii	"short unsigned int\000"
 3621      7420756E 
 3621      7369676E 
 3621      65642069 
 3621      6E7400
 3622              	.LASF72:
 3623 02c5 6E6F775F 		.ascii	"now_time\000"
 3623      74696D65 
 3623      00
 3624              	.LASF21:
 3625 02ce 72656164 		.ascii	"read_fork\000"
 3625      5F666F72 
 3625      6B00
 3626              	.LASF48:
 3627 02d8 64697374 		.ascii	"distance\000"
 3627      616E6365 
 3627      00
 3628              	.LASF63:
 3629 02e1 73706565 		.ascii	"speed_red\000"
 3629      645F7265 
 3629      6400
 3630              	.LASF45:
 3631 02eb 665F6469 		.ascii	"f_distance_m\000"
 3631      7374616E 
 3631      63655F6D 
 3631      00
 3632              	.LASF89:
 3633 02f8 666F726B 		.ascii	"fork_equal\000"
 3633      5F657175 
ARM GAS  /tmp/ccLwwf6o.s 			page 76


 3633      616C00
 3634              	.LASF87:
 3635 0303 73746F70 		.ascii	"stop_time_mode\000"
 3635      5F74696D 
 3635      655F6D6F 
 3635      646500
 3636              	.LASF11:
 3637 0312 5F426F6F 		.ascii	"_Bool\000"
 3637      6C00
 3638              	.LASF93:
 3639 0318 73746F72 		.ascii	"store_stop_time\000"
 3639      655F7374 
 3639      6F705F74 
 3639      696D6500 
 3640              	.LASF19:
 3641 0328 72656164 		.ascii	"read_time_long\000"
 3641      5F74696D 
 3641      655F6C6F 
 3641      6E6700
 3642              	.LASF22:
 3643 0337 636C6561 		.ascii	"clear_fork\000"
 3643      725F666F 
 3643      726B00
 3644              	.LASF37:
 3645 0342 77686565 		.ascii	"wheel_f_bcd\000"
 3645      6C5F665F 
 3645      62636400 
 3646              	.LASF25:
 3647 034e 496E7465 		.ascii	"Integer\000"
 3647      67657200 
 3648              	.LASF5:
 3649 0356 6C6F6E67 		.ascii	"long unsigned int\000"
 3649      20756E73 
 3649      69676E65 
 3649      6420696E 
 3649      7400
 3650              	.LASF17:
 3651 0368 74696D65 		.ascii	"time_up\000"
 3651      5F757000 
 3652              	.LASF67:
 3653 0370 6D61785F 		.ascii	"max_speed\000"
 3653      73706565 
 3653      6400
 3654              	.LASF41:
 3655 037a 62696B65 		.ascii	"bike_fork\000"
 3655      5F666F72 
 3655      6B00
 3656              	.LASF39:
 3657 0384 696E7432 		.ascii	"int2bcd\000"
 3657      62636400 
 3658              	.LASF52:
 3659 038c 6372616E 		.ascii	"crank\000"
 3659      6B00
 3660              	.LASF86:
 3661 0392 63616465 		.ascii	"cadence_bcd\000"
 3661      6E63655F 
 3661      62636400 
ARM GAS  /tmp/ccLwwf6o.s 			page 77


 3662              	.LASF60:
 3663 039e 54494D45 		.ascii	"TIMER\000"
 3663      5200
 3664              	.LASF84:
 3665 03a4 746F7461 		.ascii	"total_distance_f_bcd\000"
 3665      6C5F6469 
 3665      7374616E 
 3665      63655F66 
 3665      5F626364 
 3666              	.LASF24:
 3667 03b9 4D6F6465 		.ascii	"Mode\000"
 3667      00
 3668              	.LASF36:
 3669 03be 77686565 		.ascii	"wheel_3\000"
 3669      6C5F3300 
 3670              	.LASF82:
 3671 03c6 746F7461 		.ascii	"total_distance_f\000"
 3671      6C5F6469 
 3671      7374616E 
 3671      63655F66 
 3671      00
 3672              	.LASF94:
 3673 03d7 474E5520 		.ascii	"GNU C11 5.4.1 20160919 (release) [ARM/embedded-5-br"
 3673      43313120 
 3673      352E342E 
 3673      31203230 
 3673      31363039 
 3674 040a 616E6368 		.ascii	"anch revision 240496] -mcpu=cortex-m0 -mthumb -gdwa"
 3674      20726576 
 3674      6973696F 
 3674      6E203234 
 3674      30343936 
 3675 043d 72662D32 		.ascii	"rf-2 -O0 -fomit-frame-pointer\000"
 3675      202D4F30 
 3675      202D666F 
 3675      6D69742D 
 3675      6672616D 
 3676              	.LASF38:
 3677 045b 63686563 		.ascii	"check_speed\000"
 3677      6B5F7370 
 3677      65656400 
 3678              	.LASF42:
 3679 0467 77686565 		.ascii	"wheel\000"
 3679      6C00
 3680              	.LASF96:
 3681 046d 2F686F6D 		.ascii	"/home/yh19n22/mydocuments/design/chip/software\000"
 3681      652F7968 
 3681      31396E32 
 3681      322F6D79 
 3681      646F6375 
 3682              	.LASF51:
 3683 049c 6765745F 		.ascii	"get_cadence\000"
 3683      63616465 
 3683      6E636500 
 3684              	.LASF61:
 3685 04a8 53454E53 		.ascii	"SENSOR\000"
 3685      4F5200
ARM GAS  /tmp/ccLwwf6o.s 			page 78


 3686              	.LASF30:
 3687 04af 77616974 		.ascii	"wait_for_press\000"
 3687      5F666F72 
 3687      5F707265 
 3687      737300
 3688              	.LASF15:
 3689 04be 70726573 		.ascii	"press_d_mode\000"
 3689      735F645F 
 3689      6D6F6465 
 3689      00
 3690              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160919 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccLwwf6o.s 			page 79


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccLwwf6o.s:57     .data:00000000 OLED
     /tmp/ccLwwf6o.s:54     .data:00000000 $d
     /tmp/ccLwwf6o.s:63     .data:00000004 SEGMENT
     /tmp/ccLwwf6o.s:69     .data:00000008 TIMER
     /tmp/ccLwwf6o.s:75     .data:0000000c SENSOR
     /tmp/ccLwwf6o.s:81     .data:00000010 BUTTON
                            *COM*:00000001 speed_red
                            *COM*:00000001 isNight
                            *COM*:00000001 switchDisplay
                            *COM*:00000004 distance
                            *COM*:00000004 speed
                            *COM*:00000004 max_speed
                            *COM*:00000004 total_distance
                            *COM*:00000004 post_distance
                            *COM*:00000004 mode
                            *COM*:00000004 wheel
                            *COM*:00000004 wheel_d
                            *COM*:00000004 time
                            *COM*:00000004 now_time
                            *COM*:00000004 post_time
                            *COM*:00000004 time_h
                            *COM*:00000004 time_m
                            *COM*:00000004 time_h_bcd
                            *COM*:00000004 time_m_bcd
                            *COM*:00000004 crank
                            *COM*:00000004 bike_fork
                            *COM*:00000004 speed_f
                            *COM*:00000004 speed_b
                            *COM*:00000004 speed_f_bcd
                            *COM*:00000004 speed_b_bcd
                            *COM*:00000004 total_distance_f
                            *COM*:00000004 total_distance_b
                            *COM*:00000004 total_distance_f_bcd
                            *COM*:00000004 total_distance_b_bcd
                            *COM*:00000004 cadence
                            *COM*:00000004 cadence_bcd
                            *COM*:00000004 stop_time_mode
                            *COM*:00000004 post_fork
                            *COM*:00000004 fork_equal
                            *COM*:00000004 now_stop_time
                            *COM*:00000004 post_stop_time
                            *COM*:00000004 stop_time
                            *COM*:00000004 store_stop_time
     /tmp/ccLwwf6o.s:121    .text:00000000 $t
     /tmp/ccLwwf6o.s:126    .text:00000000 setting
     /tmp/ccLwwf6o.s:148    .text:00000014 $d
     /tmp/ccLwwf6o.s:152    .text:00000018 $t
     /tmp/ccLwwf6o.s:157    .text:00000018 press_trip
     /tmp/ccLwwf6o.s:178    .text:0000002c $d
     /tmp/ccLwwf6o.s:182    .text:00000030 $t
     /tmp/ccLwwf6o.s:187    .text:00000030 press_mode
     /tmp/ccLwwf6o.s:208    .text:00000044 $d
     /tmp/ccLwwf6o.s:212    .text:00000048 $t
     /tmp/ccLwwf6o.s:217    .text:00000048 press_d_mode
     /tmp/ccLwwf6o.s:237    .text:00000058 $d
ARM GAS  /tmp/ccLwwf6o.s 			page 80


     /tmp/ccLwwf6o.s:241    .text:0000005c $t
     /tmp/ccLwwf6o.s:246    .text:0000005c check_button
     /tmp/ccLwwf6o.s:267    .text:00000070 $d
     /tmp/ccLwwf6o.s:271    .text:00000074 $t
     /tmp/ccLwwf6o.s:276    .text:00000074 time_up
     /tmp/ccLwwf6o.s:297    .text:00000088 $d
     /tmp/ccLwwf6o.s:301    .text:0000008c $t
     /tmp/ccLwwf6o.s:306    .text:0000008c read_time_short
     /tmp/ccLwwf6o.s:324    .text:00000098 $d
     /tmp/ccLwwf6o.s:328    .text:0000009c $t
     /tmp/ccLwwf6o.s:333    .text:0000009c read_time_long
     /tmp/ccLwwf6o.s:350    .text:000000a8 $d
     /tmp/ccLwwf6o.s:354    .text:000000ac $t
     /tmp/ccLwwf6o.s:359    .text:000000ac read_crank
     /tmp/ccLwwf6o.s:377    .text:000000b8 $d
     /tmp/ccLwwf6o.s:381    .text:000000bc $t
     /tmp/ccLwwf6o.s:386    .text:000000bc read_fork
     /tmp/ccLwwf6o.s:403    .text:000000c8 $d
     /tmp/ccLwwf6o.s:407    .text:000000cc $t
     /tmp/ccLwwf6o.s:412    .text:000000cc clear_fork
     /tmp/ccLwwf6o.s:430    .text:000000d8 $d
     /tmp/ccLwwf6o.s:434    .text:000000dc $t
     /tmp/ccLwwf6o.s:439    .text:000000dc clear_timer_long
     /tmp/ccLwwf6o.s:460    .text:000000f0 $d
     /tmp/ccLwwf6o.s:465    .text:000000f8 $t
     /tmp/ccLwwf6o.s:470    .text:000000f8 display_segment
     /tmp/ccLwwf6o.s:505    .text:00000124 $d
     /tmp/ccLwwf6o.s:511    .text:00000128 $t
     /tmp/ccLwwf6o.s:516    .text:00000128 int2bcd
     /tmp/ccLwwf6o.s:587    .text:00000178 check_time_stop
     /tmp/ccLwwf6o.s:708    .text:00000220 $d
     /tmp/ccLwwf6o.s:720    .text:00000244 $t
     /tmp/ccLwwf6o.s:725    .text:00000244 wait_for_press
     /tmp/ccLwwf6o.s:768    .text:00000268 wait_for_setting
     /tmp/ccLwwf6o.s:936    .text:00000378 $d
     /tmp/ccLwwf6o.s:942    .text:0000037c $t
     /tmp/ccLwwf6o.s:947    .text:0000037c check_speed
     /tmp/ccLwwf6o.s:1002   .text:000003bc $d
     /tmp/ccLwwf6o.s:1015   .text:000003cc $t
     /tmp/ccLwwf6o.s:1020   .text:000003cc get_distance
     /tmp/ccLwwf6o.s:1092   .text:0000043c $d
     /tmp/ccLwwf6o.s:1102   .text:00000454 $t
     /tmp/ccLwwf6o.s:1107   .text:00000454 get_speed
     /tmp/ccLwwf6o.s:1172   .text:000004ac $d
     /tmp/ccLwwf6o.s:1180   .text:000004bc $t
     /tmp/ccLwwf6o.s:1185   .text:000004bc get_cadence
     /tmp/ccLwwf6o.s:1267   .text:00000538 $d
     /tmp/ccLwwf6o.s:1273   .text:00000544 $t
     /tmp/ccLwwf6o.s:1278   .text:00000544 refresh_segment
     /tmp/ccLwwf6o.s:1361   .text:000005b8 $d
     /tmp/ccLwwf6o.s:1372   .text:000005d8 $t
     /tmp/ccLwwf6o.s:1377   .text:000005d8 initiate
     /tmp/ccLwwf6o.s:1470   .text:00000654 $d
     /tmp/ccLwwf6o.s:1491   .text:00000698 $t
     /tmp/ccLwwf6o.s:1496   .text:00000698 main
     /tmp/ccLwwf6o.s:1894   .text:0000096c $d
                     .debug_frame:00000010 $d
ARM GAS  /tmp/ccLwwf6o.s 			page 81



UNDEFINED SYMBOLS
__aeabi_uidivmod
__aeabi_uidiv
__aeabi_fcmplt
__aeabi_fcmpgt
__aeabi_ui2f
__aeabi_fdiv
__aeabi_f2d
__aeabi_dadd
__aeabi_d2f
__aeabi_dcmpgt
__aeabi_fmul
__aeabi_f2uiz
__aeabi_fsub
