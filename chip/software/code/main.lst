ARM GAS  /tmp/ccYKp00e.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.4.1 20160919 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./inc -imultilib armv6-m
  18              	@ -iprefix /srv/gcc-arm-none-eabi-5_4-2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/
  19              	@ -isysroot /srv/gcc-arm-none-eabi-5_4-2016q3/bin/../arm-none-eabi
  20              	@ -MD code/main.d -MF .dep/main.o.d -MP -MQ code/main.o -D__USES_INITFINI__
  21              	@ -D RUN_FROM_FLASH=1 code/main.c -mcpu=cortex-m0 -mthumb
  22              	@ -auxbase-strip code/main.o -gdwarf-2 -O0 -Wall -Wstrict-prototypes
  23              	@ -fomit-frame-pointer -fverbose-asm
  24              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  25              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  26              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  27              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  28              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  29              	@ -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
  30              	@ -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
  31              	@ -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
  32              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  33              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse
  34              	@ -flto-odr-type-merging -fmath-errno -fmerge-debug-strings
  35              	@ -fomit-frame-pointer -fpeephole -fprefetch-loop-arrays
  36              	@ -freg-struct-return -fsched-critical-path-heuristic
  37              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  38              	@ -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  39              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  40              	@ -fsemantic-interposition -fshow-column -fsigned-zeros
  41              	@ -fsplit-ivs-in-unroller -fstdarg-opt -fstrict-volatile-bitfields
  42              	@ -fsync-libcalls -ftrapping-math -ftree-coalesce-vars -ftree-cselim
  43              	@ -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  44              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  45              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  46              	@ -fzero-initialized-in-bss -mlittle-endian -mpic-data-is-text-relative
  47              	@ -msched-prolog -mthumb -mvectorize-with-neon-quad
  48              	
  49              		.text
  50              	.Ltext0:
  51              		.cfi_sections	.debug_frame
  52              		.global	DEBUG
  53              		.data
  54              		.align	2
  55              		.type	DEBUG, %object
  56              		.size	DEBUG, 4
  57              	DEBUG:
ARM GAS  /tmp/ccYKp00e.s 			page 2


  58 0000 000000D0 		.word	-805306368
  59              		.global	OLED
  60              		.align	2
  61              		.type	OLED, %object
  62              		.size	OLED, 4
  63              	OLED:
  64 0004 000000C0 		.word	-1073741824
  65              		.global	SEGMENT
  66              		.align	2
  67              		.type	SEGMENT, %object
  68              		.size	SEGMENT, 4
  69              	SEGMENT:
  70 0008 000000A0 		.word	-1610612736
  71              		.global	TIMER
  72              		.align	2
  73              		.type	TIMER, %object
  74              		.size	TIMER, 4
  75              	TIMER:
  76 000c 00000080 		.word	-2147483648
  77              		.global	SENSOR
  78              		.align	2
  79              		.type	SENSOR, %object
  80              		.size	SENSOR, 4
  81              	SENSOR:
  82 0010 00000060 		.word	1610612736
  83              		.global	BUTTON
  84              		.align	2
  85              		.type	BUTTON, %object
  86              		.size	BUTTON, 4
  87              	BUTTON:
  88 0014 00000040 		.word	1073741824
  89              		.comm	speed_red,1,1
  90              		.comm	isNight,1,1
  91              		.comm	switchDisplay,1,1
  92              		.comm	distance,4,4
  93              		.comm	speed,4,4
  94              		.comm	max_speed,4,4
  95              		.comm	total_distance,4,4
  96              		.comm	post_distance,4,4
  97              		.comm	mode,4,4
  98              		.comm	wheel,4,4
  99              		.comm	time,4,4
 100              		.comm	now_time,4,4
 101              		.comm	post_time,4,4
 102              		.comm	time_h,4,4
 103              		.comm	time_m,4,4
 104              		.comm	crank,4,4
 105              		.comm	bike_fork,4,4
 106              		.comm	speed_f,4,4
 107              		.comm	speed_b,4,4
 108              		.comm	total_distance_f,4,4
 109              		.comm	total_distance_b,4,4
 110              		.comm	cadence,4,4
 111              		.text
 112              		.align	2
 113              		.global	setting
 114              		.code	16
ARM GAS  /tmp/ccYKp00e.s 			page 3


 115              		.thumb_func
 116              		.type	setting, %function
 117              	setting:
 118              	.LFB0:
 119              		.file 1 "code/main.c"
   1:code/main.c   **** //------------------------------------------------------------------------------
   2:code/main.c   **** // Titile:  Cortex M0 Software Main C File
   3:code/main.c   **** // Author:  ChangXin Shen & Clark Pu
   4:code/main.c   **** // Team:    C4 Chip Designed
   5:code/main.c   **** // Version: 1.2
   6:code/main.c   **** // Verification: Verified SoC.
   7:code/main.c   **** // Comment: This is a test of hardware functions
   8:code/main.c   **** //------------------------------------------------------------------------------
   9:code/main.c   **** 
  10:code/main.c   **** #define __MAIN_C__
  11:code/main.c   **** #include <stdint.h>
  12:code/main.c   **** #include <stdbool.h>
  13:code/main.c   **** 
  14:code/main.c   **** //------------------------------------------------------------------------------
  15:code/main.c   **** // Hardware Address
  16:code/main.c   **** //------------------------------------------------------------------------------
  17:code/main.c   **** 
  18:code/main.c   **** #define AHB_SOFTWARE_DEBUG       0xD0000000
  19:code/main.c   **** #define AHB_OLEDR_MANAGER_BASE   0xC0000000
  20:code/main.c   **** #define AHB_SEGMENT_MANAGER_BASE 0xA0000000
  21:code/main.c   **** #define AHB_TIMER_BASE           0x80000000
  22:code/main.c   **** #define AHB_SENSOR_MANAGER_BASE  0x60000000
  23:code/main.c   **** #define AHB_BUTTON_MANAGER_BASE  0x40000000
  24:code/main.c   **** volatile uint32_t* DEBUG   = (volatile uint32_t*) AHB_SOFTWARE_DEBUG;
  25:code/main.c   **** // DEBUG[n]                      This is software a debug address
  26:code/main.c   **** volatile uint32_t* OLED    = (volatile uint32_t*) AHB_OLEDR_MANAGER_BASE;
  27:code/main.c   **** // OLED[0]        X              0xC0000000
  28:code/main.c   **** // OLED[1]        Y              0xC0000004
  29:code/main.c   **** // OLED[2]        Colour         0xC0000008
  30:code/main.c   **** // OLED[3]        Flag           0xC000000A
  31:code/main.c   **** volatile uint32_t* SEGMENT = (volatile uint32_t*) AHB_SEGMENT_MANAGER_BASE;
  32:code/main.c   **** // SEGMENT[0]     Fraction       0xA0000000
  33:code/main.c   **** // SEGMENT[1]     Integer        0xA0000004
  34:code/main.c   **** volatile uint32_t* TIMER   = (volatile uint32_t*) AHB_TIMER_BASE;
  35:code/main.c   **** // TIMER[0]       Long           0x80000000 
  36:code/main.c   **** // TIMER[1]       Short          0x80000004 
  37:code/main.c   **** // TIMER[2]       Flag           0x80000008 
  38:code/main.c   **** volatile uint32_t* SENSOR  = (volatile uint32_t*) AHB_SENSOR_MANAGER_BASE;
  39:code/main.c   **** // SENSOR[0]      Fork           0x60000000           
  40:code/main.c   **** // SENSOR[1]      Crank          0x60000004       
  41:code/main.c   **** volatile uint32_t* BUTTON  = (volatile uint32_t*) AHB_BUTTON_MANAGER_BASE;
  42:code/main.c   **** // BUTTON[0]      DayNight       0x40000000
  43:code/main.c   **** // BUTTON[1]      Mode           0x40000004
  44:code/main.c   **** // BUTTON[2]      Trip           0x40000008
  45:code/main.c   **** // BUTTON[3]      Setting        0x4000000A
  46:code/main.c   **** // BUTTON[4]      NewData        0x40000010
  47:code/main.c   **** 
  48:code/main.c   **** //------------------------------------------------------------------------------
  49:code/main.c   **** // Globle Variables
  50:code/main.c   **** //------------------------------------------------------------------------------
  51:code/main.c   **** 
  52:code/main.c   **** bool speed_red, isNight, switchDisplay;
ARM GAS  /tmp/ccYKp00e.s 			page 4


  53:code/main.c   **** float distance, speed, max_speed, total_distance, post_distance;
  54:code/main.c   **** uint32_t mode, wheel;
  55:code/main.c   **** uint32_t time, now_time, post_time, time_h, time_m;
  56:code/main.c   **** uint32_t crank, bike_fork;
  57:code/main.c   **** uint32_t speed_f, speed_b;
  58:code/main.c   **** uint32_t total_distance_f, total_distance_b;
  59:code/main.c   **** uint32_t cadence;
  60:code/main.c   **** 
  61:code/main.c   **** //------------------------------------------------------------------------------
  62:code/main.c   **** // Hardware Access Functions
  63:code/main.c   **** //------------------------------------------------------------------------------
  64:code/main.c   **** 
  65:code/main.c   **** bool             setting(void){return BUTTON[3]?true:false;}
 120              		.loc 1 65 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              		.loc 1 65 0
 126 0000 044B     		ldr	r3, .L3	@ tmp115,
 127 0002 1B68     		ldr	r3, [r3]	@ D.4548, BUTTON
 128 0004 0C33     		adds	r3, r3, #12	@ D.4548,
 129 0006 1B68     		ldr	r3, [r3]	@ D.4549, *_3
 130 0008 5A1E     		subs	r2, r3, #1	@ tmp118, D.4549
 131 000a 9341     		sbcs	r3, r3, r2	@ tmp117, D.4549, tmp118
 132 000c DBB2     		uxtb	r3, r3	@ D.4550, tmp116
 133 000e 1800     		movs	r0, r3	@, <retval>
 134              		@ sp needed	@
 135 0010 7047     		bx	lr
 136              	.L4:
 137 0012 C046     		.align	2
 138              	.L3:
 139 0014 00000000 		.word	BUTTON
 140              		.cfi_endproc
 141              	.LFE0:
 142              		.size	setting, .-setting
 143              		.align	2
 144              		.global	press_trip
 145              		.code	16
 146              		.thumb_func
 147              		.type	press_trip, %function
 148              	press_trip:
 149              	.LFB1:
  66:code/main.c   **** bool          press_trip(void){return BUTTON[2]?true:false;}
 150              		.loc 1 66 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155              		.loc 1 66 0
 156 0018 044B     		ldr	r3, .L7	@ tmp115,
 157 001a 1B68     		ldr	r3, [r3]	@ D.4551, BUTTON
 158 001c 0833     		adds	r3, r3, #8	@ D.4551,
 159 001e 1B68     		ldr	r3, [r3]	@ D.4552, *_3
 160 0020 5A1E     		subs	r2, r3, #1	@ tmp118, D.4552
 161 0022 9341     		sbcs	r3, r3, r2	@ tmp117, D.4552, tmp118
 162 0024 DBB2     		uxtb	r3, r3	@ D.4553, tmp116
ARM GAS  /tmp/ccYKp00e.s 			page 5


 163 0026 1800     		movs	r0, r3	@, <retval>
 164              		@ sp needed	@
 165 0028 7047     		bx	lr
 166              	.L8:
 167 002a C046     		.align	2
 168              	.L7:
 169 002c 00000000 		.word	BUTTON
 170              		.cfi_endproc
 171              	.LFE1:
 172              		.size	press_trip, .-press_trip
 173              		.align	2
 174              		.global	press_mode
 175              		.code	16
 176              		.thumb_func
 177              		.type	press_mode, %function
 178              	press_mode:
 179              	.LFB2:
  67:code/main.c   **** bool          press_mode(void){return BUTTON[1]?true:false;}
 180              		.loc 1 67 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185              		.loc 1 67 0
 186 0030 044B     		ldr	r3, .L11	@ tmp115,
 187 0032 1B68     		ldr	r3, [r3]	@ D.4554, BUTTON
 188 0034 0433     		adds	r3, r3, #4	@ D.4554,
 189 0036 1B68     		ldr	r3, [r3]	@ D.4555, *_3
 190 0038 5A1E     		subs	r2, r3, #1	@ tmp118, D.4555
 191 003a 9341     		sbcs	r3, r3, r2	@ tmp117, D.4555, tmp118
 192 003c DBB2     		uxtb	r3, r3	@ D.4556, tmp116
 193 003e 1800     		movs	r0, r3	@, <retval>
 194              		@ sp needed	@
 195 0040 7047     		bx	lr
 196              	.L12:
 197 0042 C046     		.align	2
 198              	.L11:
 199 0044 00000000 		.word	BUTTON
 200              		.cfi_endproc
 201              	.LFE2:
 202              		.size	press_mode, .-press_mode
 203              		.align	2
 204              		.global	press_d_mode
 205              		.code	16
 206              		.thumb_func
 207              		.type	press_d_mode, %function
 208              	press_d_mode:
 209              	.LFB3:
  68:code/main.c   **** bool        press_d_mode(void){return BUTTON[0]?true:false;}
 210              		.loc 1 68 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215              		.loc 1 68 0
 216 0048 034B     		ldr	r3, .L15	@ tmp114,
 217 004a 1B68     		ldr	r3, [r3]	@ D.4557, BUTTON
ARM GAS  /tmp/ccYKp00e.s 			page 6


 218 004c 1B68     		ldr	r3, [r3]	@ D.4558, *_2
 219 004e 5A1E     		subs	r2, r3, #1	@ tmp117, D.4558
 220 0050 9341     		sbcs	r3, r3, r2	@ tmp116, D.4558, tmp117
 221 0052 DBB2     		uxtb	r3, r3	@ D.4559, tmp115
 222 0054 1800     		movs	r0, r3	@, <retval>
 223              		@ sp needed	@
 224 0056 7047     		bx	lr
 225              	.L16:
 226              		.align	2
 227              	.L15:
 228 0058 00000000 		.word	BUTTON
 229              		.cfi_endproc
 230              	.LFE3:
 231              		.size	press_d_mode, .-press_d_mode
 232              		.align	2
 233              		.global	check_button
 234              		.code	16
 235              		.thumb_func
 236              		.type	check_button, %function
 237              	check_button:
 238              	.LFB4:
  69:code/main.c   **** bool        check_button(void){return BUTTON[4]?true:false;}
 239              		.loc 1 69 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244              		.loc 1 69 0
 245 005c 044B     		ldr	r3, .L19	@ tmp115,
 246 005e 1B68     		ldr	r3, [r3]	@ D.4560, BUTTON
 247 0060 1033     		adds	r3, r3, #16	@ D.4560,
 248 0062 1B68     		ldr	r3, [r3]	@ D.4561, *_3
 249 0064 5A1E     		subs	r2, r3, #1	@ tmp118, D.4561
 250 0066 9341     		sbcs	r3, r3, r2	@ tmp117, D.4561, tmp118
 251 0068 DBB2     		uxtb	r3, r3	@ D.4562, tmp116
 252 006a 1800     		movs	r0, r3	@, <retval>
 253              		@ sp needed	@
 254 006c 7047     		bx	lr
 255              	.L20:
 256 006e C046     		.align	2
 257              	.L19:
 258 0070 00000000 		.word	BUTTON
 259              		.cfi_endproc
 260              	.LFE4:
 261              		.size	check_button, .-check_button
 262              		.align	2
 263              		.global	time_up
 264              		.code	16
 265              		.thumb_func
 266              		.type	time_up, %function
 267              	time_up:
 268              	.LFB5:
  70:code/main.c   **** bool             time_up(void){return  TIMER[2]?true:false;}
 269              		.loc 1 70 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccYKp00e.s 			page 7


 273              		@ link register save eliminated.
 274              		.loc 1 70 0
 275 0074 044B     		ldr	r3, .L23	@ tmp115,
 276 0076 1B68     		ldr	r3, [r3]	@ D.4563, TIMER
 277 0078 0833     		adds	r3, r3, #8	@ D.4563,
 278 007a 1B68     		ldr	r3, [r3]	@ D.4564, *_3
 279 007c 5A1E     		subs	r2, r3, #1	@ tmp118, D.4564
 280 007e 9341     		sbcs	r3, r3, r2	@ tmp117, D.4564, tmp118
 281 0080 DBB2     		uxtb	r3, r3	@ D.4565, tmp116
 282 0082 1800     		movs	r0, r3	@, <retval>
 283              		@ sp needed	@
 284 0084 7047     		bx	lr
 285              	.L24:
 286 0086 C046     		.align	2
 287              	.L23:
 288 0088 00000000 		.word	TIMER
 289              		.cfi_endproc
 290              	.LFE5:
 291              		.size	time_up, .-time_up
 292              		.align	2
 293              		.global	read_time_short
 294              		.code	16
 295              		.thumb_func
 296              		.type	read_time_short, %function
 297              	read_time_short:
 298              	.LFB6:
  71:code/main.c   **** uint32_t read_time_short(void){return  TIMER[1];}
 299              		.loc 1 71 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 304              		.loc 1 71 0
 305 008c 024B     		ldr	r3, .L27	@ tmp114,
 306 008e 1B68     		ldr	r3, [r3]	@ D.4566, TIMER
 307 0090 0433     		adds	r3, r3, #4	@ D.4566,
 308 0092 1B68     		ldr	r3, [r3]	@ D.4567, *_3
 309 0094 1800     		movs	r0, r3	@, <retval>
 310              		@ sp needed	@
 311 0096 7047     		bx	lr
 312              	.L28:
 313              		.align	2
 314              	.L27:
 315 0098 00000000 		.word	TIMER
 316              		.cfi_endproc
 317              	.LFE6:
 318              		.size	read_time_short, .-read_time_short
 319              		.align	2
 320              		.global	read_time_long
 321              		.code	16
 322              		.thumb_func
 323              		.type	read_time_long, %function
 324              	read_time_long:
 325              	.LFB7:
  72:code/main.c   **** uint32_t  read_time_long(void){return  TIMER[0];}
 326              		.loc 1 72 0
 327              		.cfi_startproc
ARM GAS  /tmp/ccYKp00e.s 			page 8


 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 0, uses_anonymous_args = 0
 330              		@ link register save eliminated.
 331              		.loc 1 72 0
 332 009c 024B     		ldr	r3, .L31	@ tmp113,
 333 009e 1B68     		ldr	r3, [r3]	@ D.4568, TIMER
 334 00a0 1B68     		ldr	r3, [r3]	@ D.4569, *_2
 335 00a2 1800     		movs	r0, r3	@, <retval>
 336              		@ sp needed	@
 337 00a4 7047     		bx	lr
 338              	.L32:
 339 00a6 C046     		.align	2
 340              	.L31:
 341 00a8 00000000 		.word	TIMER
 342              		.cfi_endproc
 343              	.LFE7:
 344              		.size	read_time_long, .-read_time_long
 345              		.align	2
 346              		.global	read_crank
 347              		.code	16
 348              		.thumb_func
 349              		.type	read_crank, %function
 350              	read_crank:
 351              	.LFB8:
  73:code/main.c   **** uint32_t      read_crank(void){return SENSOR[1];}
 352              		.loc 1 73 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              		@ link register save eliminated.
 357              		.loc 1 73 0
 358 00ac 024B     		ldr	r3, .L35	@ tmp114,
 359 00ae 1B68     		ldr	r3, [r3]	@ D.4570, SENSOR
 360 00b0 0433     		adds	r3, r3, #4	@ D.4570,
 361 00b2 1B68     		ldr	r3, [r3]	@ D.4571, *_3
 362 00b4 1800     		movs	r0, r3	@, <retval>
 363              		@ sp needed	@
 364 00b6 7047     		bx	lr
 365              	.L36:
 366              		.align	2
 367              	.L35:
 368 00b8 00000000 		.word	SENSOR
 369              		.cfi_endproc
 370              	.LFE8:
 371              		.size	read_crank, .-read_crank
 372              		.align	2
 373              		.global	read_fork
 374              		.code	16
 375              		.thumb_func
 376              		.type	read_fork, %function
 377              	read_fork:
 378              	.LFB9:
  74:code/main.c   **** uint32_t       read_fork(void){return SENSOR[0];}
 379              		.loc 1 74 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccYKp00e.s 			page 9


 383              		@ link register save eliminated.
 384              		.loc 1 74 0
 385 00bc 024B     		ldr	r3, .L39	@ tmp113,
 386 00be 1B68     		ldr	r3, [r3]	@ D.4572, SENSOR
 387 00c0 1B68     		ldr	r3, [r3]	@ D.4573, *_2
 388 00c2 1800     		movs	r0, r3	@, <retval>
 389              		@ sp needed	@
 390 00c4 7047     		bx	lr
 391              	.L40:
 392 00c6 C046     		.align	2
 393              	.L39:
 394 00c8 00000000 		.word	SENSOR
 395              		.cfi_endproc
 396              	.LFE9:
 397              		.size	read_fork, .-read_fork
 398              		.align	2
 399              		.global	clear_fork
 400              		.code	16
 401              		.thumb_func
 402              		.type	clear_fork, %function
 403              	clear_fork:
 404              	.LFB10:
  75:code/main.c   **** void          clear_fork(void){SENSOR[0] = 0; return;}
 405              		.loc 1 75 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410              		.loc 1 75 0
 411 00cc 024B     		ldr	r3, .L43	@ tmp111,
 412 00ce 1B68     		ldr	r3, [r3]	@ D.4574, SENSOR
 413 00d0 0022     		movs	r2, #0	@ tmp112,
 414 00d2 1A60     		str	r2, [r3]	@ tmp112, *_2
 415 00d4 C046     		nop
 416              		@ sp needed	@
 417 00d6 7047     		bx	lr
 418              	.L44:
 419              		.align	2
 420              	.L43:
 421 00d8 00000000 		.word	SENSOR
 422              		.cfi_endproc
 423              	.LFE10:
 424              		.size	clear_fork, .-clear_fork
 425              		.align	2
 426              		.global	clear_timer_long
 427              		.code	16
 428              		.thumb_func
 429              		.type	clear_timer_long, %function
 430              	clear_timer_long:
 431              	.LFB11:
  76:code/main.c   **** void    clear_timer_long(void){TIMER[0] = 0; post_time = 0; return;}
 432              		.loc 1 76 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 437              		.loc 1 76 0
ARM GAS  /tmp/ccYKp00e.s 			page 10


 438 00dc 044B     		ldr	r3, .L47	@ tmp111,
 439 00de 1B68     		ldr	r3, [r3]	@ D.4575, TIMER
 440 00e0 0022     		movs	r2, #0	@ tmp112,
 441 00e2 1A60     		str	r2, [r3]	@ tmp112, *_2
 442 00e4 034B     		ldr	r3, .L47+4	@ tmp113,
 443 00e6 0022     		movs	r2, #0	@ tmp114,
 444 00e8 1A60     		str	r2, [r3]	@ tmp114, post_time
 445 00ea C046     		nop
 446              		@ sp needed	@
 447 00ec 7047     		bx	lr
 448              	.L48:
 449 00ee C046     		.align	2
 450              	.L47:
 451 00f0 00000000 		.word	TIMER
 452 00f4 00000000 		.word	post_time
 453              		.cfi_endproc
 454              	.LFE11:
 455              		.size	clear_timer_long, .-clear_timer_long
 456              		.align	2
 457              		.global	display_segment
 458              		.code	16
 459              		.thumb_func
 460              		.type	display_segment, %function
 461              	display_segment:
 462              	.LFB12:
  77:code/main.c   **** void     display_segment(uint32_t Integer, uint32_t Fraction){SEGMENT[0] = Fraction; SEGMENT[1] = I
 463              		.loc 1 77 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 8
 466              		@ frame_needed = 0, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468 00f8 82B0     		sub	sp, sp, #8	@,,
 469              	.LCFI0:
 470              		.cfi_def_cfa_offset 8
 471 00fa 0190     		str	r0, [sp, #4]	@ Integer, Integer
 472 00fc 0091     		str	r1, [sp]	@ Fraction, Fraction
 473              		.loc 1 77 0
 474 00fe 064B     		ldr	r3, .L51	@ tmp113,
 475 0100 1B68     		ldr	r3, [r3]	@ D.4576, SEGMENT
 476 0102 009A     		ldr	r2, [sp]	@ tmp114, Fraction
 477 0104 1A60     		str	r2, [r3]	@ tmp114, *_2
 478 0106 044B     		ldr	r3, .L51	@ tmp115,
 479 0108 1B68     		ldr	r3, [r3]	@ D.4576, SEGMENT
 480 010a 0433     		adds	r3, r3, #4	@ D.4576,
 481 010c 019A     		ldr	r2, [sp, #4]	@ tmp116, Integer
 482 010e 1A60     		str	r2, [r3]	@ tmp116, *_6
 483 0110 C046     		nop
 484 0112 02B0     		add	sp, sp, #8	@,,
 485              		@ sp needed	@
 486 0114 7047     		bx	lr
 487              	.L52:
 488 0116 C046     		.align	2
 489              	.L51:
 490 0118 00000000 		.word	SEGMENT
 491              		.cfi_endproc
 492              	.LFE12:
 493              		.size	display_segment, .-display_segment
ARM GAS  /tmp/ccYKp00e.s 			page 11


 494              		.align	2
 495              		.global	wait_for_press
 496              		.code	16
 497              		.thumb_func
 498              		.type	wait_for_press, %function
 499              	wait_for_press:
 500              	.LFB13:
  78:code/main.c   **** 
  79:code/main.c   **** //------------------------------------------------------------------------------
  80:code/main.c   **** // Compound Functions
  81:code/main.c   **** //------------------------------------------------------------------------------
  82:code/main.c   **** 
  83:code/main.c   **** 
  84:code/main.c   **** bool wait_for_press(void){
 501              		.loc 1 84 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505 011c 10B5     		push	{r4, lr}	@
 506              	.LCFI1:
 507              		.cfi_def_cfa_offset 8
 508              		.cfi_offset 4, -8
 509              		.cfi_offset 14, -4
 510              	.L57:
  85:code/main.c   **** 
  86:code/main.c   ****   // 若三秒内没有按下，则返回假
  87:code/main.c   ****   while(1){
  88:code/main.c   ****     if(check_button())
 511              		.loc 1 88 0
 512 011e FFF7FEFF 		bl	check_button	@
 513 0122 031E     		subs	r3, r0, #0	@ tmp114,,
 514 0124 01D0     		beq	.L54	@,
  89:code/main.c   **** 
  90:code/main.c   ****       return true;
 515              		.loc 1 90 0
 516 0126 0123     		movs	r3, #1	@ D.4577,
 517 0128 06E0     		b	.L55	@
 518              	.L54:
  91:code/main.c   **** 
  92:code/main.c   ****     else if (time_up()) {
 519              		.loc 1 92 0
 520 012a FFF7FEFF 		bl	time_up	@
 521 012e 031E     		subs	r3, r0, #0	@ tmp116,,
 522 0130 F5D0     		beq	.L57	@,
  93:code/main.c   **** 
  94:code/main.c   ****       read_time_short();
 523              		.loc 1 94 0
 524 0132 FFF7FEFF 		bl	read_time_short	@
  95:code/main.c   ****       return false;
 525              		.loc 1 95 0
 526 0136 0023     		movs	r3, #0	@ D.4577,
 527              	.L55:
  96:code/main.c   **** 
  97:code/main.c   ****     }
  98:code/main.c   ****   }
  99:code/main.c   **** 
 100:code/main.c   **** }
ARM GAS  /tmp/ccYKp00e.s 			page 12


 528              		.loc 1 100 0
 529 0138 1800     		movs	r0, r3	@, <retval>
 530              		@ sp needed	@
 531 013a 10BD     		pop	{r4, pc}
 532              		.cfi_endproc
 533              	.LFE13:
 534              		.size	wait_for_press, .-wait_for_press
 535              		.global	__aeabi_uidiv
 536              		.global	__aeabi_uidivmod
 537              		.align	2
 538              		.global	wait_for_setting
 539              		.code	16
 540              		.thumb_func
 541              		.type	wait_for_setting, %function
 542              	wait_for_setting:
 543              	.LFB14:
 101:code/main.c   **** 
 102:code/main.c   **** void wait_for_setting(void){
 544              		.loc 1 102 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 16
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 013c 00B5     		push	{lr}	@
 549              	.LCFI2:
 550              		.cfi_def_cfa_offset 4
 551              		.cfi_offset 14, -4
 552 013e 85B0     		sub	sp, sp, #20	@,,
 553              	.LCFI3:
 554              		.cfi_def_cfa_offset 24
 103:code/main.c   **** 
 104:code/main.c   ****     uint32_t press_times = 0;
 555              		.loc 1 104 0
 556 0140 0023     		movs	r3, #0	@ tmp128,
 557 0142 0393     		str	r3, [sp, #12]	@ tmp128, press_times
 558              	.L65:
 105:code/main.c   ****     uint32_t wheel_1, wheel_2, wheel_3;
 106:code/main.c   **** 
 107:code/main.c   ****     while (1){
 108:code/main.c   **** 
 109:code/main.c   ****         wheel_3 = wheel / 100;
 559              		.loc 1 109 0
 560 0144 334B     		ldr	r3, .L67	@ tmp129,
 561 0146 1B68     		ldr	r3, [r3]	@ D.4578, wheel
 562 0148 6421     		movs	r1, #100	@,
 563 014a 1800     		movs	r0, r3	@, D.4578
 564 014c FFF7FEFF 		bl	__aeabi_uidiv	@
 565 0150 0300     		movs	r3, r0	@ tmp132,
 566 0152 0093     		str	r3, [sp]	@ tmp132, wheel_3
 110:code/main.c   ****         wheel_2 = (wheel - wheel_3 * 100)/10;
 567              		.loc 1 110 0
 568 0154 2F4B     		ldr	r3, .L67	@ tmp133,
 569 0156 1A68     		ldr	r2, [r3]	@ D.4578, wheel
 570 0158 009B     		ldr	r3, [sp]	@ tmp134, wheel_3
 571 015a 6421     		movs	r1, #100	@ tmp135,
 572 015c 4B43     		muls	r3, r1	@ D.4578, tmp135
 573 015e D31A     		subs	r3, r2, r3	@ D.4578, D.4578, D.4578
 574 0160 0A21     		movs	r1, #10	@,
ARM GAS  /tmp/ccYKp00e.s 			page 13


 575 0162 1800     		movs	r0, r3	@, D.4578
 576 0164 FFF7FEFF 		bl	__aeabi_uidiv	@
 577 0168 0300     		movs	r3, r0	@ tmp138,
 578 016a 0193     		str	r3, [sp, #4]	@ tmp138, wheel_2
 111:code/main.c   ****         wheel_1 = (wheel - wheel_3 * 100) - (wheel_2 * 10);
 579              		.loc 1 111 0
 580 016c 294B     		ldr	r3, .L67	@ tmp139,
 581 016e 1A68     		ldr	r2, [r3]	@ D.4578, wheel
 582 0170 009B     		ldr	r3, [sp]	@ tmp140, wheel_3
 583 0172 6421     		movs	r1, #100	@ tmp141,
 584 0174 4B43     		muls	r3, r1	@ D.4578, tmp141
 585 0176 D11A     		subs	r1, r2, r3	@ D.4578, D.4578, D.4578
 586 0178 019A     		ldr	r2, [sp, #4]	@ tmp142, wheel_2
 587 017a 1300     		movs	r3, r2	@ tmp143, tmp142
 588 017c 9B00     		lsls	r3, r3, #2	@ tmp143, tmp143,
 589 017e 9B18     		adds	r3, r3, r2	@ tmp143, tmp143, tmp142
 590 0180 5B00     		lsls	r3, r3, #1	@ tmp144, tmp143,
 591 0182 CB1A     		subs	r3, r1, r3	@ tmp145, D.4578, D.4578
 592 0184 0293     		str	r3, [sp, #8]	@ tmp145, wheel_1
 112:code/main.c   **** 
 113:code/main.c   ****         if(check_button()){
 593              		.loc 1 113 0
 594 0186 FFF7FEFF 		bl	check_button	@
 595 018a 031E     		subs	r3, r0, #0	@ tmp146,,
 596 018c DAD0     		beq	.L65	@,
 114:code/main.c   ****           
 115:code/main.c   ****           if(press_mode()){
 597              		.loc 1 115 0
 598 018e FFF7FEFF 		bl	press_mode	@
 599 0192 031E     		subs	r3, r0, #0	@ tmp148,,
 600 0194 06D0     		beq	.L60	@,
 116:code/main.c   **** 
 117:code/main.c   ****             press_times ++;
 601              		.loc 1 117 0
 602 0196 039B     		ldr	r3, [sp, #12]	@ tmp151, press_times
 603 0198 0133     		adds	r3, r3, #1	@ tmp150,
 604 019a 0393     		str	r3, [sp, #12]	@ tmp150, press_times
 118:code/main.c   ****             if (press_times == 3){
 605              		.loc 1 118 0
 606 019c 039B     		ldr	r3, [sp, #12]	@ tmp152, press_times
 607 019e 032B     		cmp	r3, #3	@ tmp152,
 608 01a0 D0D1     		bne	.L65	@,
 119:code/main.c   **** 
 120:code/main.c   ****               return;
 609              		.loc 1 120 0
 610 01a2 35E0     		b	.L66	@
 611              	.L60:
 121:code/main.c   ****              
 122:code/main.c   ****             }
 123:code/main.c   **** 
 124:code/main.c   ****           } else if(press_trip()){
 612              		.loc 1 124 0
 613 01a4 FFF7FEFF 		bl	press_trip	@
 614 01a8 031E     		subs	r3, r0, #0	@ tmp153,,
 615 01aa CBD0     		beq	.L65	@,
 125:code/main.c   **** 
 126:code/main.c   ****             if(press_times == 0){
ARM GAS  /tmp/ccYKp00e.s 			page 14


 616              		.loc 1 126 0
 617 01ac 039B     		ldr	r3, [sp, #12]	@ tmp155, press_times
 618 01ae 002B     		cmp	r3, #0	@ tmp155,
 619 01b0 08D1     		bne	.L62	@,
 127:code/main.c   ****             
 128:code/main.c   ****                 wheel_1 = (wheel_1 + 1) % 10;
 620              		.loc 1 128 0
 621 01b2 029B     		ldr	r3, [sp, #8]	@ tmp156, wheel_1
 622 01b4 0133     		adds	r3, r3, #1	@ D.4578,
 623 01b6 0A21     		movs	r1, #10	@,
 624 01b8 1800     		movs	r0, r3	@, D.4578
 625 01ba FFF7FEFF 		bl	__aeabi_uidivmod	@
 626 01be 0B00     		movs	r3, r1	@ tmp161,
 627 01c0 0293     		str	r3, [sp, #8]	@ tmp161, wheel_1
 628 01c2 16E0     		b	.L63	@
 629              	.L62:
 129:code/main.c   ****                 
 130:code/main.c   ****             } else if(press_times == 1){
 630              		.loc 1 130 0
 631 01c4 039B     		ldr	r3, [sp, #12]	@ tmp162, press_times
 632 01c6 012B     		cmp	r3, #1	@ tmp162,
 633 01c8 08D1     		bne	.L64	@,
 131:code/main.c   ****                
 132:code/main.c   ****                 wheel_2 = (wheel_2 + 1) % 10;               
 634              		.loc 1 132 0
 635 01ca 019B     		ldr	r3, [sp, #4]	@ tmp163, wheel_2
 636 01cc 0133     		adds	r3, r3, #1	@ D.4578,
 637 01ce 0A21     		movs	r1, #10	@,
 638 01d0 1800     		movs	r0, r3	@, D.4578
 639 01d2 FFF7FEFF 		bl	__aeabi_uidivmod	@
 640 01d6 0B00     		movs	r3, r1	@ tmp168,
 641 01d8 0193     		str	r3, [sp, #4]	@ tmp168, wheel_2
 642 01da 0AE0     		b	.L63	@
 643              	.L64:
 133:code/main.c   **** 
 134:code/main.c   ****             } else if(press_times == 2){                
 644              		.loc 1 134 0
 645 01dc 039B     		ldr	r3, [sp, #12]	@ tmp169, press_times
 646 01de 022B     		cmp	r3, #2	@ tmp169,
 647 01e0 07D1     		bne	.L63	@,
 135:code/main.c   ****                 
 136:code/main.c   ****                 wheel_3 = (wheel_3 + 1) % 10;
 648              		.loc 1 136 0
 649 01e2 009B     		ldr	r3, [sp]	@ tmp170, wheel_3
 650 01e4 0133     		adds	r3, r3, #1	@ D.4578,
 651 01e6 0A21     		movs	r1, #10	@,
 652 01e8 1800     		movs	r0, r3	@, D.4578
 653 01ea FFF7FEFF 		bl	__aeabi_uidivmod	@
 654 01ee 0B00     		movs	r3, r1	@ tmp175,
 655 01f0 0093     		str	r3, [sp]	@ tmp175, wheel_3
 656              	.L63:
 137:code/main.c   ****                 
 138:code/main.c   ****             }
 139:code/main.c   ****             
 140:code/main.c   ****             wheel = wheel_3 * 100 + wheel_2 * 10 + wheel_1;
 657              		.loc 1 140 0
 658 01f2 009B     		ldr	r3, [sp]	@ tmp176, wheel_3
ARM GAS  /tmp/ccYKp00e.s 			page 15


 659 01f4 6422     		movs	r2, #100	@ tmp177,
 660 01f6 5A43     		muls	r2, r3	@ tmp177, tmp176
 661 01f8 1100     		movs	r1, r2	@ D.4578, tmp177
 662 01fa 019A     		ldr	r2, [sp, #4]	@ tmp178, wheel_2
 663 01fc 1300     		movs	r3, r2	@ tmp179, tmp178
 664 01fe 9B00     		lsls	r3, r3, #2	@ tmp179, tmp179,
 665 0200 9B18     		adds	r3, r3, r2	@ tmp179, tmp179, tmp178
 666 0202 5B00     		lsls	r3, r3, #1	@ tmp180, tmp179,
 667 0204 CA18     		adds	r2, r1, r3	@ D.4578, D.4578, D.4578
 668 0206 029B     		ldr	r3, [sp, #8]	@ tmp181, wheel_1
 669 0208 D218     		adds	r2, r2, r3	@ D.4578, D.4578, tmp181
 670 020a 024B     		ldr	r3, .L67	@ tmp182,
 671 020c 1A60     		str	r2, [r3]	@ D.4578, wheel
 141:code/main.c   ****             //get_setting_image();
 142:code/main.c   ****             //display_oled();
 143:code/main.c   **** 
 144:code/main.c   ****           }
 145:code/main.c   ****         }
 146:code/main.c   ****     }  
 672              		.loc 1 146 0
 673 020e 99E7     		b	.L65	@
 674              	.L66:
 147:code/main.c   **** }
 675              		.loc 1 147 0
 676 0210 05B0     		add	sp, sp, #20	@,,
 677              		@ sp needed	@
 678 0212 00BD     		pop	{pc}
 679              	.L68:
 680              		.align	2
 681              	.L67:
 682 0214 00000000 		.word	wheel
 683              		.cfi_endproc
 684              	.LFE14:
 685              		.size	wait_for_setting, .-wait_for_setting
 686              		.global	__aeabi_fcmplt
 687              		.global	__aeabi_fcmpgt
 688              		.align	2
 689              		.global	check_speed
 690              		.code	16
 691              		.thumb_func
 692              		.type	check_speed, %function
 693              	check_speed:
 694              	.LFB15:
 148:code/main.c   **** 
 149:code/main.c   **** void check_speed(void){
 695              		.loc 1 149 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699 0218 10B5     		push	{r4, lr}	@
 700              	.LCFI4:
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 4, -8
 703              		.cfi_offset 14, -4
 150:code/main.c   **** 
 151:code/main.c   ****   if (max_speed < speed)
 704              		.loc 1 151 0
ARM GAS  /tmp/ccYKp00e.s 			page 16


 705 021a 0F4B     		ldr	r3, .L79	@ tmp114,
 706 021c 1A68     		ldr	r2, [r3]	@ D.4580, max_speed
 707 021e 0F4B     		ldr	r3, .L79+4	@ tmp115,
 708 0220 1B68     		ldr	r3, [r3]	@ D.4580, speed
 709 0222 191C     		adds	r1, r3, #0	@, D.4580
 710 0224 101C     		adds	r0, r2, #0	@, D.4580
 711 0226 FFF7FEFF 		bl	__aeabi_fcmplt	@
 712 022a 031E     		subs	r3, r0, #0	@ tmp116,,
 713 022c 03D0     		beq	.L70	@,
 152:code/main.c   ****       max_speed = speed;
 714              		.loc 1 152 0
 715 022e 0B4B     		ldr	r3, .L79+4	@ tmp117,
 716 0230 1A68     		ldr	r2, [r3]	@ D.4580, speed
 717 0232 094B     		ldr	r3, .L79	@ tmp118,
 718 0234 1A60     		str	r2, [r3]	@ D.4580, max_speed
 719              	.L70:
 153:code/main.c   ****   if (max_speed > 40)
 720              		.loc 1 153 0
 721 0236 084B     		ldr	r3, .L79	@ tmp119,
 722 0238 1B68     		ldr	r3, [r3]	@ D.4580, max_speed
 723 023a 0949     		ldr	r1, .L79+8	@,
 724 023c 181C     		adds	r0, r3, #0	@, D.4580
 725 023e FFF7FEFF 		bl	__aeabi_fcmpgt	@
 726 0242 031E     		subs	r3, r0, #0	@ tmp120,,
 727 0244 03D0     		beq	.L78	@,
 154:code/main.c   ****       speed_red = true;
 728              		.loc 1 154 0
 729 0246 074B     		ldr	r3, .L79+12	@ tmp121,
 730 0248 0122     		movs	r2, #1	@ tmp122,
 731 024a 1A70     		strb	r2, [r3]	@ tmp123, speed_red
 155:code/main.c   ****   else
 156:code/main.c   ****       speed_red = false;
 157:code/main.c   ****   return;
 732              		.loc 1 157 0
 733 024c 03E0     		b	.L69	@
 734              	.L78:
 156:code/main.c   ****   return;
 735              		.loc 1 156 0
 736 024e 054B     		ldr	r3, .L79+12	@ tmp124,
 737 0250 0022     		movs	r2, #0	@ tmp125,
 738 0252 1A70     		strb	r2, [r3]	@ tmp126, speed_red
 739              		.loc 1 157 0
 740 0254 C046     		nop
 741              	.L69:
 158:code/main.c   **** 
 159:code/main.c   **** }
 742              		.loc 1 159 0
 743              		@ sp needed	@
 744 0256 10BD     		pop	{r4, pc}
 745              	.L80:
 746              		.align	2
 747              	.L79:
 748 0258 00000000 		.word	max_speed
 749 025c 00000000 		.word	speed
 750 0260 00002042 		.word	1109393408
 751 0264 00000000 		.word	speed_red
 752              		.cfi_endproc
ARM GAS  /tmp/ccYKp00e.s 			page 17


 753              	.LFE15:
 754              		.size	check_speed, .-check_speed
 755              		.global	__aeabi_ui2f
 756              		.global	__aeabi_fmul
 757              		.global	__aeabi_fdiv
 758              		.align	2
 759              		.global	get_distance
 760              		.code	16
 761              		.thumb_func
 762              		.type	get_distance, %function
 763              	get_distance:
 764              	.LFB16:
 160:code/main.c   **** 
 161:code/main.c   **** float get_distance(uint32_t bike_fork, uint32_t wheel){
 765              		.loc 1 161 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 16
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769 0268 10B5     		push	{r4, lr}	@
 770              	.LCFI5:
 771              		.cfi_def_cfa_offset 8
 772              		.cfi_offset 4, -8
 773              		.cfi_offset 14, -4
 774 026a 84B0     		sub	sp, sp, #16	@,,
 775              	.LCFI6:
 776              		.cfi_def_cfa_offset 24
 777 026c 0190     		str	r0, [sp, #4]	@ bike_fork, bike_fork
 778 026e 0091     		str	r1, [sp]	@ wheel, wheel
 162:code/main.c   **** 
 163:code/main.c   ****   float f_distance;
 164:code/main.c   ****   const float PI = 3.14;
 779              		.loc 1 164 0
 780 0270 114B     		ldr	r3, .L83	@ tmp117,
 781 0272 0393     		str	r3, [sp, #12]	@ tmp117, PI
 165:code/main.c   **** 
 166:code/main.c   ****   return f_distance = bike_fork * ( PI * wheel/1000)/1000;
 782              		.loc 1 166 0
 783 0274 0198     		ldr	r0, [sp, #4]	@, bike_fork
 784 0276 FFF7FEFF 		bl	__aeabi_ui2f	@
 785 027a 041C     		adds	r4, r0, #0	@ D.4581,
 786 027c 0098     		ldr	r0, [sp]	@, wheel
 787 027e FFF7FEFF 		bl	__aeabi_ui2f	@
 788 0282 031C     		adds	r3, r0, #0	@ D.4581,
 789 0284 0399     		ldr	r1, [sp, #12]	@, PI
 790 0286 181C     		adds	r0, r3, #0	@, D.4581
 791 0288 FFF7FEFF 		bl	__aeabi_fmul	@
 792 028c 031C     		adds	r3, r0, #0	@ tmp118,
 793 028e 0B49     		ldr	r1, .L83+4	@,
 794 0290 181C     		adds	r0, r3, #0	@, D.4581
 795 0292 FFF7FEFF 		bl	__aeabi_fdiv	@
 796 0296 031C     		adds	r3, r0, #0	@ tmp119,
 797 0298 191C     		adds	r1, r3, #0	@, D.4581
 798 029a 201C     		adds	r0, r4, #0	@, D.4581
 799 029c FFF7FEFF 		bl	__aeabi_fmul	@
 800 02a0 031C     		adds	r3, r0, #0	@ tmp120,
 801 02a2 0649     		ldr	r1, .L83+4	@,
 802 02a4 181C     		adds	r0, r3, #0	@, D.4581
ARM GAS  /tmp/ccYKp00e.s 			page 18


 803 02a6 FFF7FEFF 		bl	__aeabi_fdiv	@
 804 02aa 031C     		adds	r3, r0, #0	@ tmp121,
 805 02ac 0293     		str	r3, [sp, #8]	@ tmp121, f_distance
 806 02ae 029B     		ldr	r3, [sp, #8]	@ D.4581, f_distance
 167:code/main.c   **** 
 168:code/main.c   **** }
 807              		.loc 1 168 0
 808 02b0 181C     		adds	r0, r3, #0	@, <retval>
 809 02b2 04B0     		add	sp, sp, #16	@,,
 810              		@ sp needed	@
 811 02b4 10BD     		pop	{r4, pc}
 812              	.L84:
 813 02b6 C046     		.align	2
 814              	.L83:
 815 02b8 C3F54840 		.word	1078523331
 816 02bc 00007A44 		.word	1148846080
 817              		.cfi_endproc
 818              	.LFE16:
 819              		.size	get_distance, .-get_distance
 820              		.align	2
 821              		.global	get_speed
 822              		.code	16
 823              		.thumb_func
 824              		.type	get_speed, %function
 825              	get_speed:
 826              	.LFB17:
 169:code/main.c   **** 
 170:code/main.c   **** float get_speed(float distance, uint32_t time){
 827              		.loc 1 170 0
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 16
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831 02c0 10B5     		push	{r4, lr}	@
 832              	.LCFI7:
 833              		.cfi_def_cfa_offset 8
 834              		.cfi_offset 4, -8
 835              		.cfi_offset 14, -4
 836 02c2 84B0     		sub	sp, sp, #16	@,,
 837              	.LCFI8:
 838              		.cfi_def_cfa_offset 24
 839 02c4 0190     		str	r0, [sp, #4]	@ distance, distance
 840 02c6 0091     		str	r1, [sp]	@ time, time
 171:code/main.c   **** 
 172:code/main.c   ****   float f_speed;
 173:code/main.c   **** 
 174:code/main.c   ****   return f_speed = (distance * 3600)/time;
 841              		.loc 1 174 0
 842 02c8 0949     		ldr	r1, .L87	@,
 843 02ca 0198     		ldr	r0, [sp, #4]	@, distance
 844 02cc FFF7FEFF 		bl	__aeabi_fmul	@
 845 02d0 031C     		adds	r3, r0, #0	@ tmp114,
 846 02d2 1C1C     		adds	r4, r3, #0	@ D.4582, tmp114
 847 02d4 0098     		ldr	r0, [sp]	@, time
 848 02d6 FFF7FEFF 		bl	__aeabi_ui2f	@
 849 02da 031C     		adds	r3, r0, #0	@ D.4582,
 850 02dc 191C     		adds	r1, r3, #0	@, D.4582
 851 02de 201C     		adds	r0, r4, #0	@, D.4582
ARM GAS  /tmp/ccYKp00e.s 			page 19


 852 02e0 FFF7FEFF 		bl	__aeabi_fdiv	@
 853 02e4 031C     		adds	r3, r0, #0	@ tmp115,
 854 02e6 0393     		str	r3, [sp, #12]	@ tmp115, f_speed
 855 02e8 039B     		ldr	r3, [sp, #12]	@ D.4582, f_speed
 175:code/main.c   **** 
 176:code/main.c   **** }
 856              		.loc 1 176 0
 857 02ea 181C     		adds	r0, r3, #0	@, <retval>
 858 02ec 04B0     		add	sp, sp, #16	@,,
 859              		@ sp needed	@
 860 02ee 10BD     		pop	{r4, pc}
 861              	.L88:
 862              		.align	2
 863              	.L87:
 864 02f0 00006145 		.word	1163984896
 865              		.cfi_endproc
 866              	.LFE17:
 867              		.size	get_speed, .-get_speed
 868              		.align	2
 869              		.global	get_cadence
 870              		.code	16
 871              		.thumb_func
 872              		.type	get_cadence, %function
 873              	get_cadence:
 874              	.LFB18:
 177:code/main.c   **** 
 178:code/main.c   **** uint32_t get_cadence(uint32_t crank, uint32_t time){
 875              		.loc 1 178 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 16
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879 02f4 00B5     		push	{lr}	@
 880              	.LCFI9:
 881              		.cfi_def_cfa_offset 4
 882              		.cfi_offset 14, -4
 883 02f6 85B0     		sub	sp, sp, #20	@,,
 884              	.LCFI10:
 885              		.cfi_def_cfa_offset 24
 886 02f8 0190     		str	r0, [sp, #4]	@ crank, crank
 887 02fa 0091     		str	r1, [sp]	@ time, time
 179:code/main.c   **** 
 180:code/main.c   ****   uint32_t cadence, cadence_5;
 181:code/main.c   **** 
 182:code/main.c   ****   cadence = (crank * 60)/time;
 888              		.loc 1 182 0
 889 02fc 019A     		ldr	r2, [sp, #4]	@ tmp113, crank
 890 02fe 1300     		movs	r3, r2	@ tmp114, tmp113
 891 0300 1B01     		lsls	r3, r3, #4	@ tmp114, tmp114,
 892 0302 9B1A     		subs	r3, r3, r2	@ tmp114, tmp114, tmp113
 893 0304 9B00     		lsls	r3, r3, #2	@ tmp115, tmp114,
 894 0306 0099     		ldr	r1, [sp]	@, time
 895 0308 1800     		movs	r0, r3	@, D.4583
 896 030a FFF7FEFF 		bl	__aeabi_uidiv	@
 897 030e 0300     		movs	r3, r0	@ tmp119,
 898 0310 0393     		str	r3, [sp, #12]	@ tmp119, cadence
 183:code/main.c   ****   cadence_5 = cadence / 5;
 899              		.loc 1 183 0
ARM GAS  /tmp/ccYKp00e.s 			page 20


 900 0312 039B     		ldr	r3, [sp, #12]	@ tmp121, cadence
 901 0314 0521     		movs	r1, #5	@,
 902 0316 1800     		movs	r0, r3	@, tmp121
 903 0318 FFF7FEFF 		bl	__aeabi_uidiv	@
 904 031c 0300     		movs	r3, r0	@ tmp124,
 905 031e 0293     		str	r3, [sp, #8]	@ tmp124, cadence_5
 184:code/main.c   ****   return cadence = 5 * cadence_5;
 906              		.loc 1 184 0
 907 0320 029A     		ldr	r2, [sp, #8]	@ tmp125, cadence_5
 908 0322 1300     		movs	r3, r2	@ tmp126, tmp125
 909 0324 9B00     		lsls	r3, r3, #2	@ tmp126, tmp126,
 910 0326 9B18     		adds	r3, r3, r2	@ tmp127, tmp126, tmp125
 911 0328 0393     		str	r3, [sp, #12]	@ tmp127, cadence
 912 032a 039B     		ldr	r3, [sp, #12]	@ D.4584, cadence
 185:code/main.c   **** 
 186:code/main.c   **** }
 913              		.loc 1 186 0
 914 032c 1800     		movs	r0, r3	@, <retval>
 915 032e 05B0     		add	sp, sp, #20	@,,
 916              		@ sp needed	@
 917 0330 00BD     		pop	{pc}
 918              		.cfi_endproc
 919              	.LFE18:
 920              		.size	get_cadence, .-get_cadence
 921 0332 C046     		.align	2
 922              		.global	initiate
 923              		.code	16
 924              		.thumb_func
 925              		.type	initiate, %function
 926              	initiate:
 927              	.LFB19:
 187:code/main.c   **** 
 188:code/main.c   **** void initiate(void){
 928              		.loc 1 188 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932 0334 10B5     		push	{r4, lr}	@
 933              	.LCFI11:
 934              		.cfi_def_cfa_offset 8
 935              		.cfi_offset 4, -8
 936              		.cfi_offset 14, -4
 189:code/main.c   **** 
 190:code/main.c   ****   post_time = 0;
 937              		.loc 1 190 0
 938 0336 174B     		ldr	r3, .L93	@ tmp112,
 939 0338 0022     		movs	r2, #0	@ tmp113,
 940 033a 1A60     		str	r2, [r3]	@ tmp113, post_time
 191:code/main.c   ****   wheel = 700;
 941              		.loc 1 191 0
 942 033c 164B     		ldr	r3, .L93+4	@ tmp114,
 943 033e AF22     		movs	r2, #175	@ tmp141,
 944 0340 9200     		lsls	r2, r2, #2	@ tmp115, tmp141,
 945 0342 1A60     		str	r2, [r3]	@ tmp115, wheel
 192:code/main.c   ****   speed_red = false;
 946              		.loc 1 192 0
 947 0344 154B     		ldr	r3, .L93+8	@ tmp116,
ARM GAS  /tmp/ccYKp00e.s 			page 21


 948 0346 0022     		movs	r2, #0	@ tmp117,
 949 0348 1A70     		strb	r2, [r3]	@ tmp118, speed_red
 193:code/main.c   ****   isNight = false;
 950              		.loc 1 193 0
 951 034a 154B     		ldr	r3, .L93+12	@ tmp119,
 952 034c 0022     		movs	r2, #0	@ tmp120,
 953 034e 1A70     		strb	r2, [r3]	@ tmp121, isNight
 194:code/main.c   ****   switchDisplay = false;
 954              		.loc 1 194 0
 955 0350 144B     		ldr	r3, .L93+16	@ tmp122,
 956 0352 0022     		movs	r2, #0	@ tmp123,
 957 0354 1A70     		strb	r2, [r3]	@ tmp124, switchDisplay
 195:code/main.c   ****   distance = 0;
 958              		.loc 1 195 0
 959 0356 144B     		ldr	r3, .L93+20	@ tmp125,
 960 0358 0022     		movs	r2, #0	@ tmp126,
 961 035a 1A60     		str	r2, [r3]	@ tmp126, distance
 196:code/main.c   ****   speed_f = 0;
 962              		.loc 1 196 0
 963 035c 134B     		ldr	r3, .L93+24	@ tmp127,
 964 035e 0022     		movs	r2, #0	@ tmp128,
 965 0360 1A60     		str	r2, [r3]	@ tmp128, speed_f
 197:code/main.c   ****   speed_b = 0;
 966              		.loc 1 197 0
 967 0362 134B     		ldr	r3, .L93+28	@ tmp129,
 968 0364 0022     		movs	r2, #0	@ tmp130,
 969 0366 1A60     		str	r2, [r3]	@ tmp130, speed_b
 198:code/main.c   ****   max_speed = 0;
 970              		.loc 1 198 0
 971 0368 124B     		ldr	r3, .L93+32	@ tmp131,
 972 036a 0022     		movs	r2, #0	@ tmp132,
 973 036c 1A60     		str	r2, [r3]	@ tmp132, max_speed
 199:code/main.c   ****   total_distance_f = 0;
 974              		.loc 1 199 0
 975 036e 124B     		ldr	r3, .L93+36	@ tmp133,
 976 0370 0022     		movs	r2, #0	@ tmp134,
 977 0372 1A60     		str	r2, [r3]	@ tmp134, total_distance_f
 200:code/main.c   ****   total_distance_b = 0;
 978              		.loc 1 200 0
 979 0374 114B     		ldr	r3, .L93+40	@ tmp135,
 980 0376 0022     		movs	r2, #0	@ tmp136,
 981 0378 1A60     		str	r2, [r3]	@ tmp136, total_distance_b
 201:code/main.c   ****   post_distance = 0;
 982              		.loc 1 201 0
 983 037a 114B     		ldr	r3, .L93+44	@ tmp137,
 984 037c 0022     		movs	r2, #0	@ tmp138,
 985 037e 1A60     		str	r2, [r3]	@ tmp138, post_distance
 202:code/main.c   **** 
 203:code/main.c   ****   display_segment(total_distance_f, total_distance_b);
 986              		.loc 1 203 0
 987 0380 0D4B     		ldr	r3, .L93+36	@ tmp139,
 988 0382 1A68     		ldr	r2, [r3]	@ D.4585, total_distance_f
 989 0384 0D4B     		ldr	r3, .L93+40	@ tmp140,
 990 0386 1B68     		ldr	r3, [r3]	@ D.4585, total_distance_b
 991 0388 1900     		movs	r1, r3	@, D.4585
 992 038a 1000     		movs	r0, r2	@, D.4585
 993 038c FFF7FEFF 		bl	display_segment	@
ARM GAS  /tmp/ccYKp00e.s 			page 22


 204:code/main.c   ****   //display_oled();
 205:code/main.c   **** 
 206:code/main.c   ****   return;
 994              		.loc 1 206 0
 995 0390 C046     		nop
 207:code/main.c   ****     
 208:code/main.c   **** }
 996              		.loc 1 208 0
 997              		@ sp needed	@
 998 0392 10BD     		pop	{r4, pc}
 999              	.L94:
 1000              		.align	2
 1001              	.L93:
 1002 0394 00000000 		.word	post_time
 1003 0398 00000000 		.word	wheel
 1004 039c 00000000 		.word	speed_red
 1005 03a0 00000000 		.word	isNight
 1006 03a4 00000000 		.word	switchDisplay
 1007 03a8 00000000 		.word	distance
 1008 03ac 00000000 		.word	speed_f
 1009 03b0 00000000 		.word	speed_b
 1010 03b4 00000000 		.word	max_speed
 1011 03b8 00000000 		.word	total_distance_f
 1012 03bc 00000000 		.word	total_distance_b
 1013 03c0 00000000 		.word	post_distance
 1014              		.cfi_endproc
 1015              	.LFE19:
 1016              		.size	initiate, .-initiate
 1017              		.global	__aeabi_fsub
 1018              		.global	__aeabi_f2uiz
 1019              		.align	2
 1020              		.global	main
 1021              		.code	16
 1022              		.thumb_func
 1023              		.type	main, %function
 1024              	main:
 1025              	.LFB20:
 209:code/main.c   **** 
 210:code/main.c   **** //------------------------------------------------------------------------------
 211:code/main.c   **** // Main Function
 212:code/main.c   **** //------------------------------------------------------------------------------
 213:code/main.c   **** 
 214:code/main.c   **** int main(void) {
 1026              		.loc 1 214 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030 03c4 10B5     		push	{r4, lr}	@
 1031              	.LCFI12:
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 4, -8
 1034              		.cfi_offset 14, -4
 215:code/main.c   **** 
 216:code/main.c   ****     initiate();
 1035              		.loc 1 216 0
 1036 03c6 FFF7FEFF 		bl	initiate	@
 1037              	.L106:
ARM GAS  /tmp/ccYKp00e.s 			page 23


 217:code/main.c   **** 
 218:code/main.c   ****     // repeat forever (embedded programs generally do not terminate)
 219:code/main.c   ****   while(1){
 220:code/main.c   ****     if(wait_for_press()){ // 等待三秒或等待按钮按下后
 1038              		.loc 1 220 0
 1039 03ca FFF7FEFF 		bl	wait_for_press	@
 1040 03ce 031E     		subs	r3, r0, #0	@ tmp168,,
 1041 03d0 4FD0     		beq	.L96	@,
 221:code/main.c   ****     // 按钮按下后，处理按钮操作
 222:code/main.c   ****       if(setting()){
 1042              		.loc 1 222 0
 1043 03d2 FFF7FEFF 		bl	setting	@
 1044 03d6 031E     		subs	r3, r0, #0	@ tmp170,,
 1045 03d8 02D0     		beq	.L97	@,
 223:code/main.c   ****         // 设置操作，更改wheel 
 224:code/main.c   ****         wait_for_setting();
 1046              		.loc 1 224 0
 1047 03da FFF7FEFF 		bl	wait_for_setting	@
 1048 03de 48E0     		b	.L96	@
 1049              	.L97:
 225:code/main.c   ****       }
 226:code/main.c   ****       else{
 227:code/main.c   ****         if (press_trip()){
 1050              		.loc 1 227 0
 1051 03e0 FFF7FEFF 		bl	press_trip	@
 1052 03e4 031E     		subs	r3, r0, #0	@ tmp172,,
 1053 03e6 15D0     		beq	.L98	@,
 228:code/main.c   ****           //根据模式清零
 229:code/main.c   ****           if (mode == 0){    //里程
 1054              		.loc 1 229 0
 1055 03e8 7C4B     		ldr	r3, .L107	@ tmp174,
 1056 03ea 1B68     		ldr	r3, [r3]	@ D.4587, mode
 1057 03ec 002B     		cmp	r3, #0	@ D.4587,
 1058 03ee 05D1     		bne	.L99	@,
 230:code/main.c   ****             total_distance = 0;
 1059              		.loc 1 230 0
 1060 03f0 7B4B     		ldr	r3, .L107+4	@ tmp175,
 1061 03f2 0022     		movs	r2, #0	@ tmp176,
 1062 03f4 1A60     		str	r2, [r3]	@ tmp176, total_distance
 231:code/main.c   ****             clear_fork();
 1063              		.loc 1 231 0
 1064 03f6 FFF7FEFF 		bl	clear_fork	@
 1065 03fa 3AE0     		b	.L96	@
 1066              	.L99:
 232:code/main.c   ****           }else if (mode == 1) {           //时间
 1067              		.loc 1 232 0
 1068 03fc 774B     		ldr	r3, .L107	@ tmp177,
 1069 03fe 1B68     		ldr	r3, [r3]	@ D.4587, mode
 1070 0400 012B     		cmp	r3, #1	@ D.4587,
 1071 0402 36D1     		bne	.L96	@,
 233:code/main.c   ****             post_time = 0;
 1072              		.loc 1 233 0
 1073 0404 774B     		ldr	r3, .L107+8	@ tmp178,
 1074 0406 0022     		movs	r2, #0	@ tmp179,
 1075 0408 1A60     		str	r2, [r3]	@ tmp179, post_time
 234:code/main.c   ****             clear_timer_long(); 
 1076              		.loc 1 234 0
ARM GAS  /tmp/ccYKp00e.s 			page 24


 1077 040a FFF7FEFF 		bl	clear_timer_long	@
 235:code/main.c   ****             clear_fork();
 1078              		.loc 1 235 0
 1079 040e FFF7FEFF 		bl	clear_fork	@
 1080 0412 2EE0     		b	.L96	@
 1081              	.L98:
 236:code/main.c   ****           }     
 237:code/main.c   ****         }
 238:code/main.c   ****         else if(press_mode()){     // 0里程  1时间  2速度  3踏频
 1082              		.loc 1 238 0
 1083 0414 FFF7FEFF 		bl	press_mode	@
 1084 0418 031E     		subs	r3, r0, #0	@ tmp180,,
 1085 041a 1ED0     		beq	.L101	@,
 239:code/main.c   ****           if (mode == 0){
 1086              		.loc 1 239 0
 1087 041c 6F4B     		ldr	r3, .L107	@ tmp182,
 1088 041e 1B68     		ldr	r3, [r3]	@ D.4587, mode
 1089 0420 002B     		cmp	r3, #0	@ D.4587,
 1090 0422 03D1     		bne	.L102	@,
 240:code/main.c   ****             mode = 1;
 1091              		.loc 1 240 0
 1092 0424 6D4B     		ldr	r3, .L107	@ tmp183,
 1093 0426 0122     		movs	r2, #1	@ tmp184,
 1094 0428 1A60     		str	r2, [r3]	@ tmp184, mode
 1095 042a 12E0     		b	.L103	@
 1096              	.L102:
 241:code/main.c   ****           } else if (mode == 1){
 1097              		.loc 1 241 0
 1098 042c 6B4B     		ldr	r3, .L107	@ tmp185,
 1099 042e 1B68     		ldr	r3, [r3]	@ D.4587, mode
 1100 0430 012B     		cmp	r3, #1	@ D.4587,
 1101 0432 03D1     		bne	.L104	@,
 242:code/main.c   ****             mode = 2;
 1102              		.loc 1 242 0
 1103 0434 694B     		ldr	r3, .L107	@ tmp186,
 1104 0436 0222     		movs	r2, #2	@ tmp187,
 1105 0438 1A60     		str	r2, [r3]	@ tmp187, mode
 1106 043a 0AE0     		b	.L103	@
 1107              	.L104:
 243:code/main.c   ****           } else if (mode == 2){
 1108              		.loc 1 243 0
 1109 043c 674B     		ldr	r3, .L107	@ tmp188,
 1110 043e 1B68     		ldr	r3, [r3]	@ D.4587, mode
 1111 0440 022B     		cmp	r3, #2	@ D.4587,
 1112 0442 03D1     		bne	.L105	@,
 244:code/main.c   ****             mode = 3;
 1113              		.loc 1 244 0
 1114 0444 654B     		ldr	r3, .L107	@ tmp189,
 1115 0446 0322     		movs	r2, #3	@ tmp190,
 1116 0448 1A60     		str	r2, [r3]	@ tmp190, mode
 1117 044a 02E0     		b	.L103	@
 1118              	.L105:
 245:code/main.c   ****           } else {
 246:code/main.c   ****             mode = 0;
 1119              		.loc 1 246 0
 1120 044c 634B     		ldr	r3, .L107	@ tmp191,
 1121 044e 0022     		movs	r2, #0	@ tmp192,
ARM GAS  /tmp/ccYKp00e.s 			page 25


 1122 0450 1A60     		str	r2, [r3]	@ tmp192, mode
 1123              	.L103:
 247:code/main.c   ****           }
 248:code/main.c   ****           switchDisplay = true;
 1124              		.loc 1 248 0
 1125 0452 654B     		ldr	r3, .L107+12	@ tmp193,
 1126 0454 0122     		movs	r2, #1	@ tmp194,
 1127 0456 1A70     		strb	r2, [r3]	@ tmp195, switchDisplay
 1128 0458 0BE0     		b	.L96	@
 1129              	.L101:
 249:code/main.c   ****         }
 250:code/main.c   ****         else if(press_d_mode()){
 1130              		.loc 1 250 0
 1131 045a FFF7FEFF 		bl	press_d_mode	@
 1132 045e 031E     		subs	r3, r0, #0	@ tmp196,,
 1133 0460 07D0     		beq	.L96	@,
 251:code/main.c   ****           isNight = ~ isNight;
 1134              		.loc 1 251 0
 1135 0462 624B     		ldr	r3, .L107+16	@ tmp198,
 1136 0464 1B78     		ldrb	r3, [r3]	@ D.4586, isNight
 1137 0466 DB43     		mvns	r3, r3	@ D.4588, D.4588
 1138 0468 5A1E     		subs	r2, r3, #1	@ tmp201, D.4588
 1139 046a 9341     		sbcs	r3, r3, r2	@ tmp200, D.4588, tmp201
 1140 046c DAB2     		uxtb	r2, r3	@ D.4586, tmp199
 1141 046e 5F4B     		ldr	r3, .L107+16	@ tmp202,
 1142 0470 1A70     		strb	r2, [r3]	@ tmp203, isNight
 1143              	.L96:
 252:code/main.c   ****         }
 253:code/main.c   ****       }
 254:code/main.c   ****     }
 255:code/main.c   ****     // 按钮按下则在处理完按钮操作后立即刷新，没有按下则三秒刷新一次
 256:code/main.c   ****     crank = read_crank();
 1144              		.loc 1 256 0
 1145 0472 FFF7FEFF 		bl	read_crank	@
 1146 0476 0200     		movs	r2, r0	@ D.4587,
 1147 0478 5D4B     		ldr	r3, .L107+20	@ tmp204,
 1148 047a 1A60     		str	r2, [r3]	@ D.4587, crank
 257:code/main.c   **** 
 258:code/main.c   ****     bike_fork = read_fork();
 1149              		.loc 1 258 0
 1150 047c FFF7FEFF 		bl	read_fork	@
 1151 0480 0200     		movs	r2, r0	@ D.4587,
 1152 0482 5C4B     		ldr	r3, .L107+24	@ tmp205,
 1153 0484 1A60     		str	r2, [r3]	@ D.4587, bike_fork
 259:code/main.c   **** 
 260:code/main.c   ****     total_distance = get_distance(bike_fork, wheel);
 1154              		.loc 1 260 0
 1155 0486 5B4B     		ldr	r3, .L107+24	@ tmp206,
 1156 0488 1A68     		ldr	r2, [r3]	@ D.4587, bike_fork
 1157 048a 5B4B     		ldr	r3, .L107+28	@ tmp207,
 1158 048c 1B68     		ldr	r3, [r3]	@ D.4587, wheel
 1159 048e 1900     		movs	r1, r3	@, D.4587
 1160 0490 1000     		movs	r0, r2	@, D.4587
 1161 0492 FFF7FEFF 		bl	get_distance	@
 1162 0496 021C     		adds	r2, r0, #0	@ D.4589,
 1163 0498 514B     		ldr	r3, .L107+4	@ tmp208,
 1164 049a 1A60     		str	r2, [r3]	@ D.4589, total_distance
ARM GAS  /tmp/ccYKp00e.s 			page 26


 261:code/main.c   ****     distance = total_distance - post_distance;
 1165              		.loc 1 261 0
 1166 049c 504B     		ldr	r3, .L107+4	@ tmp209,
 1167 049e 1A68     		ldr	r2, [r3]	@ D.4589, total_distance
 1168 04a0 564B     		ldr	r3, .L107+32	@ tmp210,
 1169 04a2 1B68     		ldr	r3, [r3]	@ D.4589, post_distance
 1170 04a4 191C     		adds	r1, r3, #0	@, D.4589
 1171 04a6 101C     		adds	r0, r2, #0	@, D.4589
 1172 04a8 FFF7FEFF 		bl	__aeabi_fsub	@
 1173 04ac 031C     		adds	r3, r0, #0	@ tmp211,
 1174 04ae 1A1C     		adds	r2, r3, #0	@ D.4589, tmp211
 1175 04b0 534B     		ldr	r3, .L107+36	@ tmp212,
 1176 04b2 1A60     		str	r2, [r3]	@ D.4589, distance
 262:code/main.c   ****     post_distance = total_distance;
 1177              		.loc 1 262 0
 1178 04b4 4A4B     		ldr	r3, .L107+4	@ tmp213,
 1179 04b6 1A68     		ldr	r2, [r3]	@ D.4589, total_distance
 1180 04b8 504B     		ldr	r3, .L107+32	@ tmp214,
 1181 04ba 1A60     		str	r2, [r3]	@ D.4589, post_distance
 263:code/main.c   ****     total_distance_f = (uint32_t) total_distance;
 1182              		.loc 1 263 0
 1183 04bc 484B     		ldr	r3, .L107+4	@ tmp215,
 1184 04be 1B68     		ldr	r3, [r3]	@ D.4589, total_distance
 1185 04c0 181C     		adds	r0, r3, #0	@, D.4589
 1186 04c2 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1187 04c6 0200     		movs	r2, r0	@ D.4587,
 1188 04c8 4E4B     		ldr	r3, .L107+40	@ tmp216,
 1189 04ca 1A60     		str	r2, [r3]	@ D.4587, total_distance_f
 264:code/main.c   ****     total_distance_b = (uint32_t) ((total_distance - total_distance_f) * 100);
 1190              		.loc 1 264 0
 1191 04cc 444B     		ldr	r3, .L107+4	@ tmp217,
 1192 04ce 1C68     		ldr	r4, [r3]	@ D.4589, total_distance
 1193 04d0 4C4B     		ldr	r3, .L107+40	@ tmp218,
 1194 04d2 1B68     		ldr	r3, [r3]	@ D.4587, total_distance_f
 1195 04d4 1800     		movs	r0, r3	@, D.4587
 1196 04d6 FFF7FEFF 		bl	__aeabi_ui2f	@
 1197 04da 031C     		adds	r3, r0, #0	@ D.4589,
 1198 04dc 191C     		adds	r1, r3, #0	@, D.4589
 1199 04de 201C     		adds	r0, r4, #0	@, D.4589
 1200 04e0 FFF7FEFF 		bl	__aeabi_fsub	@
 1201 04e4 031C     		adds	r3, r0, #0	@ tmp219,
 1202 04e6 4849     		ldr	r1, .L107+44	@,
 1203 04e8 181C     		adds	r0, r3, #0	@, D.4589
 1204 04ea FFF7FEFF 		bl	__aeabi_fmul	@
 1205 04ee 031C     		adds	r3, r0, #0	@ tmp220,
 1206 04f0 181C     		adds	r0, r3, #0	@, D.4589
 1207 04f2 FFF7FEFF 		bl	__aeabi_f2uiz	@
 1208 04f6 0200     		movs	r2, r0	@ D.4587,
 1209 04f8 444B     		ldr	r3, .L107+48	@ tmp221,
 1210 04fa 1A60     		str	r2, [r3]	@ D.4587, total_distance_b
 265:code/main.c   **** 
 266:code/main.c   ****     now_time = read_time_long();
 1211              		.loc 1 266 0
 1212 04fc FFF7FEFF 		bl	read_time_long	@
 1213 0500 0200     		movs	r2, r0	@ D.4587,
 1214 0502 434B     		ldr	r3, .L107+52	@ tmp222,
 1215 0504 1A60     		str	r2, [r3]	@ D.4587, now_time
ARM GAS  /tmp/ccYKp00e.s 			page 27


 267:code/main.c   ****     time = now_time - post_time;
 1216              		.loc 1 267 0
 1217 0506 424B     		ldr	r3, .L107+52	@ tmp223,
 1218 0508 1A68     		ldr	r2, [r3]	@ D.4587, now_time
 1219 050a 364B     		ldr	r3, .L107+8	@ tmp224,
 1220 050c 1B68     		ldr	r3, [r3]	@ D.4587, post_time
 1221 050e D21A     		subs	r2, r2, r3	@ D.4587, D.4587, D.4587
 1222 0510 404B     		ldr	r3, .L107+56	@ tmp225,
 1223 0512 1A60     		str	r2, [r3]	@ D.4587, time
 268:code/main.c   ****     speed = get_speed(distance, time);
 1224              		.loc 1 268 0
 1225 0514 3A4B     		ldr	r3, .L107+36	@ tmp226,
 1226 0516 1A68     		ldr	r2, [r3]	@ D.4589, distance
 1227 0518 3E4B     		ldr	r3, .L107+56	@ tmp227,
 1228 051a 1B68     		ldr	r3, [r3]	@ D.4587, time
 1229 051c 1900     		movs	r1, r3	@, D.4587
 1230 051e 101C     		adds	r0, r2, #0	@, D.4589
 1231 0520 FFF7FEFF 		bl	get_speed	@
 1232 0524 021C     		adds	r2, r0, #0	@ D.4589,
 1233 0526 3C4B     		ldr	r3, .L107+60	@ tmp228,
 1234 0528 1A60     		str	r2, [r3]	@ D.4589, speed
 269:code/main.c   ****     post_time = now_time;
 1235              		.loc 1 269 0
 1236 052a 394B     		ldr	r3, .L107+52	@ tmp229,
 1237 052c 1A68     		ldr	r2, [r3]	@ D.4587, now_time
 1238 052e 2D4B     		ldr	r3, .L107+8	@ tmp230,
 1239 0530 1A60     		str	r2, [r3]	@ D.4587, post_time
 270:code/main.c   **** 
 271:code/main.c   ****     time_h = now_time/3600;
 1240              		.loc 1 271 0
 1241 0532 374B     		ldr	r3, .L107+52	@ tmp231,
 1242 0534 1A68     		ldr	r2, [r3]	@ D.4587, now_time
 1243 0536 E123     		movs	r3, #225	@ tmp261,
 1244 0538 1901     		lsls	r1, r3, #4	@, tmp261,
 1245 053a 1000     		movs	r0, r2	@, D.4587
 1246 053c FFF7FEFF 		bl	__aeabi_uidiv	@
 1247 0540 0300     		movs	r3, r0	@ tmp234,
 1248 0542 1A00     		movs	r2, r3	@ D.4587, tmp234
 1249 0544 354B     		ldr	r3, .L107+64	@ tmp235,
 1250 0546 1A60     		str	r2, [r3]	@ D.4587, time_h
 272:code/main.c   ****     time_m = (now_time%3600)/60;
 1251              		.loc 1 272 0
 1252 0548 314B     		ldr	r3, .L107+52	@ tmp236,
 1253 054a 1A68     		ldr	r2, [r3]	@ D.4587, now_time
 1254 054c E123     		movs	r3, #225	@ tmp262,
 1255 054e 1901     		lsls	r1, r3, #4	@, tmp262,
 1256 0550 1000     		movs	r0, r2	@, D.4587
 1257 0552 FFF7FEFF 		bl	__aeabi_uidivmod	@
 1258 0556 0B00     		movs	r3, r1	@ tmp241,
 1259 0558 3C21     		movs	r1, #60	@,
 1260 055a 1800     		movs	r0, r3	@, D.4587
 1261 055c FFF7FEFF 		bl	__aeabi_uidiv	@
 1262 0560 0300     		movs	r3, r0	@ tmp244,
 1263 0562 1A00     		movs	r2, r3	@ D.4587, tmp244
 1264 0564 2E4B     		ldr	r3, .L107+68	@ tmp245,
 1265 0566 1A60     		str	r2, [r3]	@ D.4587, time_m
 273:code/main.c   ****     
ARM GAS  /tmp/ccYKp00e.s 			page 28


 274:code/main.c   ****     speed_f = (uint32_t) speed;
 1266              		.loc 1 274 0
 1267 0568 2B4B     		ldr	r3, .L107+60	@ tmp246,
 1268 056a 1B68     		ldr	r3, [r3]	@ D.4589, speed
 1269 056c 181C     		adds	r0, r3, #0	@, D.4589
 1270 056e FFF7FEFF 		bl	__aeabi_f2uiz	@
 1271 0572 0200     		movs	r2, r0	@ D.4587,
 1272 0574 2B4B     		ldr	r3, .L107+72	@ tmp247,
 1273 0576 1A60     		str	r2, [r3]	@ D.4587, speed_f
 275:code/main.c   ****     speed_b = (uint32_t) ((speed - speed_f) * 100);
 1274              		.loc 1 275 0
 1275 0578 274B     		ldr	r3, .L107+60	@ tmp248,
 1276 057a 1C68     		ldr	r4, [r3]	@ D.4589, speed
 1277 057c 294B     		ldr	r3, .L107+72	@ tmp249,
 1278 057e 1B68     		ldr	r3, [r3]	@ D.4587, speed_f
 1279 0580 1800     		movs	r0, r3	@, D.4587
 1280 0582 FFF7FEFF 		bl	__aeabi_ui2f	@
 1281 0586 031C     		adds	r3, r0, #0	@ D.4589,
 1282 0588 191C     		adds	r1, r3, #0	@, D.4589
 1283 058a 201C     		adds	r0, r4, #0	@, D.4589
 1284 058c FFF7FEFF 		bl	__aeabi_fsub	@
 1285 0590 031C     		adds	r3, r0, #0	@ tmp250,
 1286 0592 1D49     		ldr	r1, .L107+44	@,
 1287 0594 181C     		adds	r0, r3, #0	@, D.4589
 1288 0596 FFF7FEFF 		bl	__aeabi_fmul	@
 1289 059a 031C     		adds	r3, r0, #0	@ tmp251,
 1290 059c 181C     		adds	r0, r3, #0	@, D.4589
 1291 059e FFF7FEFF 		bl	__aeabi_f2uiz	@
 1292 05a2 0200     		movs	r2, r0	@ D.4587,
 1293 05a4 204B     		ldr	r3, .L107+76	@ tmp252,
 1294 05a6 1A60     		str	r2, [r3]	@ D.4587, speed_b
 276:code/main.c   ****     
 277:code/main.c   **** 
 278:code/main.c   ****     cadence = get_cadence(crank, time);
 1295              		.loc 1 278 0
 1296 05a8 114B     		ldr	r3, .L107+20	@ tmp253,
 1297 05aa 1A68     		ldr	r2, [r3]	@ D.4587, crank
 1298 05ac 194B     		ldr	r3, .L107+56	@ tmp254,
 1299 05ae 1B68     		ldr	r3, [r3]	@ D.4587, time
 1300 05b0 1900     		movs	r1, r3	@, D.4587
 1301 05b2 1000     		movs	r0, r2	@, D.4587
 1302 05b4 FFF7FEFF 		bl	get_cadence	@
 1303 05b8 0200     		movs	r2, r0	@ D.4587,
 1304 05ba 1C4B     		ldr	r3, .L107+80	@ tmp255,
 1305 05bc 1A60     		str	r2, [r3]	@ D.4587, cadence
 279:code/main.c   **** 
 280:code/main.c   ****     check_speed();
 1306              		.loc 1 280 0
 1307 05be FFF7FEFF 		bl	check_speed	@
 281:code/main.c   **** 
 282:code/main.c   ****     display_segment(total_distance_f, total_distance_b);
 1308              		.loc 1 282 0
 1309 05c2 104B     		ldr	r3, .L107+40	@ tmp256,
 1310 05c4 1A68     		ldr	r2, [r3]	@ D.4587, total_distance_f
 1311 05c6 114B     		ldr	r3, .L107+48	@ tmp257,
 1312 05c8 1B68     		ldr	r3, [r3]	@ D.4587, total_distance_b
 1313 05ca 1900     		movs	r1, r3	@, D.4587
ARM GAS  /tmp/ccYKp00e.s 			page 29


 1314 05cc 1000     		movs	r0, r2	@, D.4587
 1315 05ce FFF7FEFF 		bl	display_segment	@
 283:code/main.c   **** 
 284:code/main.c   ****     //get_oled_image(distance, speed, ave_speed, energe, max_speed, time, crank, switchDisplay, isN
 285:code/main.c   ****     //display_oled();
 286:code/main.c   **** 
 287:code/main.c   ****     switchDisplay = false;
 1316              		.loc 1 287 0
 1317 05d2 054B     		ldr	r3, .L107+12	@ tmp258,
 1318 05d4 0022     		movs	r2, #0	@ tmp259,
 1319 05d6 1A70     		strb	r2, [r3]	@ tmp260, switchDisplay
 288:code/main.c   ****   }
 1320              		.loc 1 288 0
 1321 05d8 F7E6     		b	.L106	@
 1322              	.L108:
 1323 05da C046     		.align	2
 1324              	.L107:
 1325 05dc 00000000 		.word	mode
 1326 05e0 00000000 		.word	total_distance
 1327 05e4 00000000 		.word	post_time
 1328 05e8 00000000 		.word	switchDisplay
 1329 05ec 00000000 		.word	isNight
 1330 05f0 00000000 		.word	crank
 1331 05f4 00000000 		.word	bike_fork
 1332 05f8 00000000 		.word	wheel
 1333 05fc 00000000 		.word	post_distance
 1334 0600 00000000 		.word	distance
 1335 0604 00000000 		.word	total_distance_f
 1336 0608 0000C842 		.word	1120403456
 1337 060c 00000000 		.word	total_distance_b
 1338 0610 00000000 		.word	now_time
 1339 0614 00000000 		.word	time
 1340 0618 00000000 		.word	speed
 1341 061c 00000000 		.word	time_h
 1342 0620 00000000 		.word	time_m
 1343 0624 00000000 		.word	speed_f
 1344 0628 00000000 		.word	speed_b
 1345 062c 00000000 		.word	cadence
 1346              		.cfi_endproc
 1347              	.LFE20:
 1348              		.size	main, .-main
 1349              	.Letext0:
 1350              		.file 2 "/srv/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1351              		.file 3 "/srv/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1352              		.section	.debug_info,"",%progbits
 1353              	.Ldebug_info0:
 1354 0000 98050000 		.4byte	0x598
 1355 0004 0200     		.2byte	0x2
 1356 0006 00000000 		.4byte	.Ldebug_abbrev0
 1357 000a 04       		.byte	0x4
 1358 000b 01       		.uleb128 0x1
 1359 000c B6020000 		.4byte	.LASF71
 1360 0010 0C       		.byte	0xc
 1361 0011 06010000 		.4byte	.LASF72
 1362 0015 58030000 		.4byte	.LASF73
 1363 0019 00000000 		.4byte	.Ltext0
 1364 001d 30060000 		.4byte	.Letext0
ARM GAS  /tmp/ccYKp00e.s 			page 30


 1365 0021 00000000 		.4byte	.Ldebug_line0
 1366 0025 02       		.uleb128 0x2
 1367 0026 01       		.byte	0x1
 1368 0027 06       		.byte	0x6
 1369 0028 6D010000 		.4byte	.LASF0
 1370 002c 02       		.uleb128 0x2
 1371 002d 01       		.byte	0x1
 1372 002e 08       		.byte	0x8
 1373 002f 3E010000 		.4byte	.LASF1
 1374 0033 02       		.uleb128 0x2
 1375 0034 02       		.byte	0x2
 1376 0035 05       		.byte	0x5
 1377 0036 2F000000 		.4byte	.LASF2
 1378 003a 02       		.uleb128 0x2
 1379 003b 02       		.byte	0x2
 1380 003c 07       		.byte	0x7
 1381 003d E6010000 		.4byte	.LASF3
 1382 0041 02       		.uleb128 0x2
 1383 0042 04       		.byte	0x4
 1384 0043 05       		.byte	0x5
 1385 0044 F5000000 		.4byte	.LASF4
 1386 0048 03       		.uleb128 0x3
 1387 0049 69000000 		.4byte	.LASF9
 1388 004d 02       		.byte	0x2
 1389 004e 41       		.byte	0x41
 1390 004f 53000000 		.4byte	0x53
 1391 0053 02       		.uleb128 0x2
 1392 0054 04       		.byte	0x4
 1393 0055 07       		.byte	0x7
 1394 0056 56020000 		.4byte	.LASF5
 1395 005a 02       		.uleb128 0x2
 1396 005b 08       		.byte	0x8
 1397 005c 05       		.byte	0x5
 1398 005d DD000000 		.4byte	.LASF6
 1399 0061 02       		.uleb128 0x2
 1400 0062 08       		.byte	0x8
 1401 0063 07       		.byte	0x7
 1402 0064 79010000 		.4byte	.LASF7
 1403 0068 04       		.uleb128 0x4
 1404 0069 04       		.byte	0x4
 1405 006a 05       		.byte	0x5
 1406 006b 696E7400 		.ascii	"int\000"
 1407 006f 02       		.uleb128 0x2
 1408 0070 04       		.byte	0x4
 1409 0071 07       		.byte	0x7
 1410 0072 99010000 		.4byte	.LASF8
 1411 0076 03       		.uleb128 0x3
 1412 0077 90010000 		.4byte	.LASF10
 1413 007b 03       		.byte	0x3
 1414 007c 30       		.byte	0x30
 1415 007d 48000000 		.4byte	0x48
 1416 0081 05       		.uleb128 0x5
 1417 0082 01       		.byte	0x1
 1418 0083 12000000 		.4byte	.LASF12
 1419 0087 01       		.byte	0x1
 1420 0088 41       		.byte	0x41
 1421 0089 01       		.byte	0x1
ARM GAS  /tmp/ccYKp00e.s 			page 31


 1422 008a 9A000000 		.4byte	0x9a
 1423 008e 00000000 		.4byte	.LFB0
 1424 0092 18000000 		.4byte	.LFE0
 1425 0096 02       		.byte	0x2
 1426 0097 7D       		.byte	0x7d
 1427 0098 00       		.sleb128 0
 1428 0099 01       		.byte	0x1
 1429 009a 02       		.uleb128 0x2
 1430 009b 01       		.byte	0x1
 1431 009c 02       		.byte	0x2
 1432 009d 2E020000 		.4byte	.LASF11
 1433 00a1 05       		.uleb128 0x5
 1434 00a2 01       		.byte	0x1
 1435 00a3 CC000000 		.4byte	.LASF13
 1436 00a7 01       		.byte	0x1
 1437 00a8 42       		.byte	0x42
 1438 00a9 01       		.byte	0x1
 1439 00aa 9A000000 		.4byte	0x9a
 1440 00ae 18000000 		.4byte	.LFB1
 1441 00b2 30000000 		.4byte	.LFE1
 1442 00b6 02       		.byte	0x2
 1443 00b7 7D       		.byte	0x7d
 1444 00b8 00       		.sleb128 0
 1445 00b9 01       		.byte	0x1
 1446 00ba 05       		.uleb128 0x5
 1447 00bb 01       		.byte	0x1
 1448 00bc 33010000 		.4byte	.LASF14
 1449 00c0 01       		.byte	0x1
 1450 00c1 43       		.byte	0x43
 1451 00c2 01       		.byte	0x1
 1452 00c3 9A000000 		.4byte	0x9a
 1453 00c7 30000000 		.4byte	.LFB2
 1454 00cb 48000000 		.4byte	.LFE2
 1455 00cf 02       		.byte	0x2
 1456 00d0 7D       		.byte	0x7d
 1457 00d1 00       		.sleb128 0
 1458 00d2 01       		.byte	0x1
 1459 00d3 05       		.uleb128 0x5
 1460 00d4 01       		.byte	0x1
 1461 00d5 90030000 		.4byte	.LASF15
 1462 00d9 01       		.byte	0x1
 1463 00da 44       		.byte	0x44
 1464 00db 01       		.byte	0x1
 1465 00dc 9A000000 		.4byte	0x9a
 1466 00e0 48000000 		.4byte	.LFB3
 1467 00e4 5C000000 		.4byte	.LFE3
 1468 00e8 02       		.byte	0x2
 1469 00e9 7D       		.byte	0x7d
 1470 00ea 00       		.sleb128 0
 1471 00eb 01       		.byte	0x1
 1472 00ec 05       		.uleb128 0x5
 1473 00ed 01       		.byte	0x1
 1474 00ee 57000000 		.4byte	.LASF16
 1475 00f2 01       		.byte	0x1
 1476 00f3 45       		.byte	0x45
 1477 00f4 01       		.byte	0x1
 1478 00f5 9A000000 		.4byte	0x9a
ARM GAS  /tmp/ccYKp00e.s 			page 32


 1479 00f9 5C000000 		.4byte	.LFB4
 1480 00fd 74000000 		.4byte	.LFE4
 1481 0101 02       		.byte	0x2
 1482 0102 7D       		.byte	0x7d
 1483 0103 00       		.sleb128 0
 1484 0104 01       		.byte	0x1
 1485 0105 05       		.uleb128 0x5
 1486 0106 01       		.byte	0x1
 1487 0107 68020000 		.4byte	.LASF17
 1488 010b 01       		.byte	0x1
 1489 010c 46       		.byte	0x46
 1490 010d 01       		.byte	0x1
 1491 010e 9A000000 		.4byte	0x9a
 1492 0112 74000000 		.4byte	.LFB5
 1493 0116 8C000000 		.4byte	.LFE5
 1494 011a 02       		.byte	0x2
 1495 011b 7D       		.byte	0x7d
 1496 011c 00       		.sleb128 0
 1497 011d 01       		.byte	0x1
 1498 011e 05       		.uleb128 0x5
 1499 011f 01       		.byte	0x1
 1500 0120 AE010000 		.4byte	.LASF18
 1501 0124 01       		.byte	0x1
 1502 0125 47       		.byte	0x47
 1503 0126 01       		.byte	0x1
 1504 0127 76000000 		.4byte	0x76
 1505 012b 8C000000 		.4byte	.LFB6
 1506 012f 9C000000 		.4byte	.LFE6
 1507 0133 02       		.byte	0x2
 1508 0134 7D       		.byte	0x7d
 1509 0135 00       		.sleb128 0
 1510 0136 01       		.byte	0x1
 1511 0137 05       		.uleb128 0x5
 1512 0138 01       		.byte	0x1
 1513 0139 34020000 		.4byte	.LASF19
 1514 013d 01       		.byte	0x1
 1515 013e 48       		.byte	0x48
 1516 013f 01       		.byte	0x1
 1517 0140 76000000 		.4byte	0x76
 1518 0144 9C000000 		.4byte	.LFB7
 1519 0148 AC000000 		.4byte	.LFE7
 1520 014c 02       		.byte	0x2
 1521 014d 7D       		.byte	0x7d
 1522 014e 00       		.sleb128 0
 1523 014f 01       		.byte	0x1
 1524 0150 05       		.uleb128 0x5
 1525 0151 01       		.byte	0x1
 1526 0152 12010000 		.4byte	.LASF20
 1527 0156 01       		.byte	0x1
 1528 0157 49       		.byte	0x49
 1529 0158 01       		.byte	0x1
 1530 0159 76000000 		.4byte	0x76
 1531 015d AC000000 		.4byte	.LFB8
 1532 0161 BC000000 		.4byte	.LFE8
 1533 0165 02       		.byte	0x2
 1534 0166 7D       		.byte	0x7d
 1535 0167 00       		.sleb128 0
ARM GAS  /tmp/ccYKp00e.s 			page 33


 1536 0168 01       		.byte	0x1
 1537 0169 05       		.uleb128 0x5
 1538 016a 01       		.byte	0x1
 1539 016b 02020000 		.4byte	.LASF21
 1540 016f 01       		.byte	0x1
 1541 0170 4A       		.byte	0x4a
 1542 0171 01       		.byte	0x1
 1543 0172 76000000 		.4byte	0x76
 1544 0176 BC000000 		.4byte	.LFB9
 1545 017a CC000000 		.4byte	.LFE9
 1546 017e 02       		.byte	0x2
 1547 017f 7D       		.byte	0x7d
 1548 0180 00       		.sleb128 0
 1549 0181 01       		.byte	0x1
 1550 0182 06       		.uleb128 0x6
 1551 0183 01       		.byte	0x1
 1552 0184 43020000 		.4byte	.LASF22
 1553 0188 01       		.byte	0x1
 1554 0189 4B       		.byte	0x4b
 1555 018a 01       		.byte	0x1
 1556 018b CC000000 		.4byte	.LFB10
 1557 018f DC000000 		.4byte	.LFE10
 1558 0193 02       		.byte	0x2
 1559 0194 7D       		.byte	0x7d
 1560 0195 00       		.sleb128 0
 1561 0196 01       		.byte	0x1
 1562 0197 06       		.uleb128 0x6
 1563 0198 01       		.byte	0x1
 1564 0199 C4010000 		.4byte	.LASF23
 1565 019d 01       		.byte	0x1
 1566 019e 4C       		.byte	0x4c
 1567 019f 01       		.byte	0x1
 1568 01a0 DC000000 		.4byte	.LFB11
 1569 01a4 F8000000 		.4byte	.LFE11
 1570 01a8 02       		.byte	0x2
 1571 01a9 7D       		.byte	0x7d
 1572 01aa 00       		.sleb128 0
 1573 01ab 01       		.byte	0x1
 1574 01ac 07       		.uleb128 0x7
 1575 01ad 01       		.byte	0x1
 1576 01ae AB000000 		.4byte	.LASF27
 1577 01b2 01       		.byte	0x1
 1578 01b3 4D       		.byte	0x4d
 1579 01b4 01       		.byte	0x1
 1580 01b5 F8000000 		.4byte	.LFB12
 1581 01b9 1C010000 		.4byte	.LFE12
 1582 01bd 00000000 		.4byte	.LLST0
 1583 01c1 01       		.byte	0x1
 1584 01c2 E3010000 		.4byte	0x1e3
 1585 01c6 08       		.uleb128 0x8
 1586 01c7 4E020000 		.4byte	.LASF24
 1587 01cb 01       		.byte	0x1
 1588 01cc 4D       		.byte	0x4d
 1589 01cd 76000000 		.4byte	0x76
 1590 01d1 02       		.byte	0x2
 1591 01d2 91       		.byte	0x91
 1592 01d3 7C       		.sleb128 -4
ARM GAS  /tmp/ccYKp00e.s 			page 34


 1593 01d4 08       		.uleb128 0x8
 1594 01d5 DD010000 		.4byte	.LASF25
 1595 01d9 01       		.byte	0x1
 1596 01da 4D       		.byte	0x4d
 1597 01db 76000000 		.4byte	0x76
 1598 01df 02       		.byte	0x2
 1599 01e0 91       		.byte	0x91
 1600 01e1 78       		.sleb128 -8
 1601 01e2 00       		.byte	0
 1602 01e3 09       		.uleb128 0x9
 1603 01e4 01       		.byte	0x1
 1604 01e5 81030000 		.4byte	.LASF26
 1605 01e9 01       		.byte	0x1
 1606 01ea 54       		.byte	0x54
 1607 01eb 01       		.byte	0x1
 1608 01ec 9A000000 		.4byte	0x9a
 1609 01f0 1C010000 		.4byte	.LFB13
 1610 01f4 3C010000 		.4byte	.LFE13
 1611 01f8 20000000 		.4byte	.LLST1
 1612 01fc 01       		.byte	0x1
 1613 01fd 0A       		.uleb128 0xa
 1614 01fe 01       		.byte	0x1
 1615 01ff 4C010000 		.4byte	.LASF28
 1616 0203 01       		.byte	0x1
 1617 0204 66       		.byte	0x66
 1618 0205 01       		.byte	0x1
 1619 0206 3C010000 		.4byte	.LFB14
 1620 020a 18020000 		.4byte	.LFE14
 1621 020e 40000000 		.4byte	.LLST2
 1622 0212 01       		.byte	0x1
 1623 0213 50020000 		.4byte	0x250
 1624 0217 0B       		.uleb128 0xb
 1625 0218 9F000000 		.4byte	.LASF29
 1626 021c 01       		.byte	0x1
 1627 021d 68       		.byte	0x68
 1628 021e 76000000 		.4byte	0x76
 1629 0222 02       		.byte	0x2
 1630 0223 91       		.byte	0x91
 1631 0224 74       		.sleb128 -12
 1632 0225 0B       		.uleb128 0xb
 1633 0226 5D010000 		.4byte	.LASF30
 1634 022a 01       		.byte	0x1
 1635 022b 69       		.byte	0x69
 1636 022c 76000000 		.4byte	0x76
 1637 0230 02       		.byte	0x2
 1638 0231 91       		.byte	0x91
 1639 0232 70       		.sleb128 -16
 1640 0233 0B       		.uleb128 0xb
 1641 0234 65010000 		.4byte	.LASF31
 1642 0238 01       		.byte	0x1
 1643 0239 69       		.byte	0x69
 1644 023a 76000000 		.4byte	0x76
 1645 023e 02       		.byte	0x2
 1646 023f 91       		.byte	0x91
 1647 0240 6C       		.sleb128 -20
 1648 0241 0B       		.uleb128 0xb
 1649 0242 9D020000 		.4byte	.LASF32
ARM GAS  /tmp/ccYKp00e.s 			page 35


 1650 0246 01       		.byte	0x1
 1651 0247 69       		.byte	0x69
 1652 0248 76000000 		.4byte	0x76
 1653 024c 02       		.byte	0x2
 1654 024d 91       		.byte	0x91
 1655 024e 68       		.sleb128 -24
 1656 024f 00       		.byte	0
 1657 0250 0C       		.uleb128 0xc
 1658 0251 01       		.byte	0x1
 1659 0252 3A030000 		.4byte	.LASF33
 1660 0256 01       		.byte	0x1
 1661 0257 95       		.byte	0x95
 1662 0258 01       		.byte	0x1
 1663 0259 18020000 		.4byte	.LFB15
 1664 025d 68020000 		.4byte	.LFE15
 1665 0261 6C000000 		.4byte	.LLST3
 1666 0265 01       		.byte	0x1
 1667 0266 0D       		.uleb128 0xd
 1668 0267 01       		.byte	0x1
 1669 0268 00000000 		.4byte	.LASF38
 1670 026c 01       		.byte	0x1
 1671 026d A1       		.byte	0xa1
 1672 026e 01       		.byte	0x1
 1673 026f BC020000 		.4byte	0x2bc
 1674 0273 68020000 		.4byte	.LFB16
 1675 0277 C0020000 		.4byte	.LFE16
 1676 027b 8C000000 		.4byte	.LLST4
 1677 027f 01       		.byte	0x1
 1678 0280 BC020000 		.4byte	0x2bc
 1679 0284 08       		.uleb128 0x8
 1680 0285 7A020000 		.4byte	.LASF34
 1681 0289 01       		.byte	0x1
 1682 028a A1       		.byte	0xa1
 1683 028b 76000000 		.4byte	0x76
 1684 028f 02       		.byte	0x2
 1685 0290 91       		.byte	0x91
 1686 0291 6C       		.sleb128 -20
 1687 0292 08       		.uleb128 0x8
 1688 0293 46030000 		.4byte	.LASF35
 1689 0297 01       		.byte	0x1
 1690 0298 A1       		.byte	0xa1
 1691 0299 76000000 		.4byte	0x76
 1692 029d 02       		.byte	0x2
 1693 029e 91       		.byte	0x91
 1694 029f 68       		.sleb128 -24
 1695 02a0 0B       		.uleb128 0xb
 1696 02a1 1A000000 		.4byte	.LASF36
 1697 02a5 01       		.byte	0x1
 1698 02a6 A3       		.byte	0xa3
 1699 02a7 BC020000 		.4byte	0x2bc
 1700 02ab 02       		.byte	0x2
 1701 02ac 91       		.byte	0x91
 1702 02ad 70       		.sleb128 -16
 1703 02ae 0E       		.uleb128 0xe
 1704 02af 504900   		.ascii	"PI\000"
 1705 02b2 01       		.byte	0x1
 1706 02b3 A4       		.byte	0xa4
ARM GAS  /tmp/ccYKp00e.s 			page 36


 1707 02b4 C3020000 		.4byte	0x2c3
 1708 02b8 02       		.byte	0x2
 1709 02b9 91       		.byte	0x91
 1710 02ba 74       		.sleb128 -12
 1711 02bb 00       		.byte	0
 1712 02bc 02       		.uleb128 0x2
 1713 02bd 04       		.byte	0x4
 1714 02be 04       		.byte	0x4
 1715 02bf D7000000 		.4byte	.LASF37
 1716 02c3 0F       		.uleb128 0xf
 1717 02c4 BC020000 		.4byte	0x2bc
 1718 02c8 0D       		.uleb128 0xd
 1719 02c9 01       		.byte	0x1
 1720 02ca EB000000 		.4byte	.LASF39
 1721 02ce 01       		.byte	0x1
 1722 02cf AA       		.byte	0xaa
 1723 02d0 01       		.byte	0x1
 1724 02d1 BC020000 		.4byte	0x2bc
 1725 02d5 C0020000 		.4byte	.LFB17
 1726 02d9 F4020000 		.4byte	.LFE17
 1727 02dd B8000000 		.4byte	.LLST5
 1728 02e1 01       		.byte	0x1
 1729 02e2 11030000 		.4byte	0x311
 1730 02e6 08       		.uleb128 0x8
 1731 02e7 0C020000 		.4byte	.LASF40
 1732 02eb 01       		.byte	0x1
 1733 02ec AA       		.byte	0xaa
 1734 02ed BC020000 		.4byte	0x2bc
 1735 02f1 02       		.byte	0x2
 1736 02f2 91       		.byte	0x91
 1737 02f3 6C       		.sleb128 -20
 1738 02f4 08       		.uleb128 0x8
 1739 02f5 98020000 		.4byte	.LASF41
 1740 02f9 01       		.byte	0x1
 1741 02fa AA       		.byte	0xaa
 1742 02fb 76000000 		.4byte	0x76
 1743 02ff 02       		.byte	0x2
 1744 0300 91       		.byte	0x91
 1745 0301 68       		.sleb128 -24
 1746 0302 0B       		.uleb128 0xb
 1747 0303 C4000000 		.4byte	.LASF42
 1748 0307 01       		.byte	0x1
 1749 0308 AC       		.byte	0xac
 1750 0309 BC020000 		.4byte	0x2bc
 1751 030d 02       		.byte	0x2
 1752 030e 91       		.byte	0x91
 1753 030f 74       		.sleb128 -12
 1754 0310 00       		.byte	0
 1755 0311 0D       		.uleb128 0xd
 1756 0312 01       		.byte	0x1
 1757 0313 4C030000 		.4byte	.LASF43
 1758 0317 01       		.byte	0x1
 1759 0318 B2       		.byte	0xb2
 1760 0319 01       		.byte	0x1
 1761 031a 76000000 		.4byte	0x76
 1762 031e F4020000 		.4byte	.LFB18
 1763 0322 32030000 		.4byte	.LFE18
ARM GAS  /tmp/ccYKp00e.s 			page 37


 1764 0326 E4000000 		.4byte	.LLST6
 1765 032a 01       		.byte	0x1
 1766 032b 68030000 		.4byte	0x368
 1767 032f 08       		.uleb128 0x8
 1768 0330 84020000 		.4byte	.LASF44
 1769 0334 01       		.byte	0x1
 1770 0335 B2       		.byte	0xb2
 1771 0336 76000000 		.4byte	0x76
 1772 033a 02       		.byte	0x2
 1773 033b 91       		.byte	0x91
 1774 033c 6C       		.sleb128 -20
 1775 033d 08       		.uleb128 0x8
 1776 033e 98020000 		.4byte	.LASF41
 1777 0342 01       		.byte	0x1
 1778 0343 B2       		.byte	0xb2
 1779 0344 76000000 		.4byte	0x76
 1780 0348 02       		.byte	0x2
 1781 0349 91       		.byte	0x91
 1782 034a 68       		.sleb128 -24
 1783 034b 0B       		.uleb128 0xb
 1784 034c 90020000 		.4byte	.LASF45
 1785 0350 01       		.byte	0x1
 1786 0351 B4       		.byte	0xb4
 1787 0352 76000000 		.4byte	0x76
 1788 0356 02       		.byte	0x2
 1789 0357 91       		.byte	0x91
 1790 0358 74       		.sleb128 -12
 1791 0359 0B       		.uleb128 0xb
 1792 035a 8E000000 		.4byte	.LASF46
 1793 035e 01       		.byte	0x1
 1794 035f B4       		.byte	0xb4
 1795 0360 76000000 		.4byte	0x76
 1796 0364 02       		.byte	0x2
 1797 0365 91       		.byte	0x91
 1798 0366 70       		.sleb128 -16
 1799 0367 00       		.byte	0
 1800 0368 0C       		.uleb128 0xc
 1801 0369 01       		.byte	0x1
 1802 036a BB000000 		.4byte	.LASF47
 1803 036e 01       		.byte	0x1
 1804 036f BC       		.byte	0xbc
 1805 0370 01       		.byte	0x1
 1806 0371 34030000 		.4byte	.LFB19
 1807 0375 C4030000 		.4byte	.LFE19
 1808 0379 10010000 		.4byte	.LLST7
 1809 037d 01       		.byte	0x1
 1810 037e 09       		.uleb128 0x9
 1811 037f 01       		.byte	0x1
 1812 0380 64000000 		.4byte	.LASF48
 1813 0384 01       		.byte	0x1
 1814 0385 D6       		.byte	0xd6
 1815 0386 01       		.byte	0x1
 1816 0387 68000000 		.4byte	0x68
 1817 038b C4030000 		.4byte	.LFB20
 1818 038f 30060000 		.4byte	.LFE20
 1819 0393 30010000 		.4byte	.LLST8
 1820 0397 01       		.byte	0x1
ARM GAS  /tmp/ccYKp00e.s 			page 38


 1821 0398 10       		.uleb128 0x10
 1822 0399 4A000000 		.4byte	.LASF49
 1823 039d 01       		.byte	0x1
 1824 039e 18       		.byte	0x18
 1825 039f AA030000 		.4byte	0x3aa
 1826 03a3 01       		.byte	0x1
 1827 03a4 05       		.byte	0x5
 1828 03a5 03       		.byte	0x3
 1829 03a6 00000000 		.4byte	DEBUG
 1830 03aa 11       		.uleb128 0x11
 1831 03ab 04       		.byte	0x4
 1832 03ac B0030000 		.4byte	0x3b0
 1833 03b0 12       		.uleb128 0x12
 1834 03b1 76000000 		.4byte	0x76
 1835 03b5 10       		.uleb128 0x10
 1836 03b6 0D000000 		.4byte	.LASF50
 1837 03ba 01       		.byte	0x1
 1838 03bb 1A       		.byte	0x1a
 1839 03bc AA030000 		.4byte	0x3aa
 1840 03c0 01       		.byte	0x1
 1841 03c1 05       		.byte	0x5
 1842 03c2 03       		.byte	0x3
 1843 03c3 00000000 		.4byte	OLED
 1844 03c7 10       		.uleb128 0x10
 1845 03c8 D5010000 		.4byte	.LASF51
 1846 03cc 01       		.byte	0x1
 1847 03cd 1F       		.byte	0x1f
 1848 03ce AA030000 		.4byte	0x3aa
 1849 03d2 01       		.byte	0x1
 1850 03d3 05       		.byte	0x5
 1851 03d4 03       		.byte	0x3
 1852 03d5 00000000 		.4byte	SEGMENT
 1853 03d9 10       		.uleb128 0x10
 1854 03da 8A020000 		.4byte	.LASF52
 1855 03de 01       		.byte	0x1
 1856 03df 22       		.byte	0x22
 1857 03e0 AA030000 		.4byte	0x3aa
 1858 03e4 01       		.byte	0x1
 1859 03e5 05       		.byte	0x5
 1860 03e6 03       		.byte	0x3
 1861 03e7 00000000 		.4byte	TIMER
 1862 03eb 10       		.uleb128 0x10
 1863 03ec 7A030000 		.4byte	.LASF53
 1864 03f0 01       		.byte	0x1
 1865 03f1 26       		.byte	0x26
 1866 03f2 AA030000 		.4byte	0x3aa
 1867 03f6 01       		.byte	0x1
 1868 03f7 05       		.byte	0x5
 1869 03f8 03       		.byte	0x3
 1870 03f9 00000000 		.4byte	SENSOR
 1871 03fd 10       		.uleb128 0x10
 1872 03fe 50000000 		.4byte	.LASF54
 1873 0402 01       		.byte	0x1
 1874 0403 29       		.byte	0x29
 1875 0404 AA030000 		.4byte	0x3aa
 1876 0408 01       		.byte	0x1
 1877 0409 05       		.byte	0x5
ARM GAS  /tmp/ccYKp00e.s 			page 39


 1878 040a 03       		.byte	0x3
 1879 040b 00000000 		.4byte	BUTTON
 1880 040f 10       		.uleb128 0x10
 1881 0410 15020000 		.4byte	.LASF55
 1882 0414 01       		.byte	0x1
 1883 0415 34       		.byte	0x34
 1884 0416 9A000000 		.4byte	0x9a
 1885 041a 01       		.byte	0x1
 1886 041b 05       		.byte	0x5
 1887 041c 03       		.byte	0x3
 1888 041d 00000000 		.4byte	speed_red
 1889 0421 10       		.uleb128 0x10
 1890 0422 A6010000 		.4byte	.LASF56
 1891 0426 01       		.byte	0x1
 1892 0427 34       		.byte	0x34
 1893 0428 9A000000 		.4byte	0x9a
 1894 042c 01       		.byte	0x1
 1895 042d 05       		.byte	0x5
 1896 042e 03       		.byte	0x3
 1897 042f 00000000 		.4byte	isNight
 1898 0433 10       		.uleb128 0x10
 1899 0434 1D010000 		.4byte	.LASF57
 1900 0438 01       		.byte	0x1
 1901 0439 34       		.byte	0x34
 1902 043a 9A000000 		.4byte	0x9a
 1903 043e 01       		.byte	0x1
 1904 043f 05       		.byte	0x5
 1905 0440 03       		.byte	0x3
 1906 0441 00000000 		.4byte	switchDisplay
 1907 0445 10       		.uleb128 0x10
 1908 0446 0C020000 		.4byte	.LASF40
 1909 044a 01       		.byte	0x1
 1910 044b 35       		.byte	0x35
 1911 044c BC020000 		.4byte	0x2bc
 1912 0450 01       		.byte	0x1
 1913 0451 05       		.byte	0x5
 1914 0452 03       		.byte	0x3
 1915 0453 00000000 		.4byte	distance
 1916 0457 10       		.uleb128 0x10
 1917 0458 BE010000 		.4byte	.LASF58
 1918 045c 01       		.byte	0x1
 1919 045d 35       		.byte	0x35
 1920 045e BC020000 		.4byte	0x2bc
 1921 0462 01       		.byte	0x1
 1922 0463 05       		.byte	0x5
 1923 0464 03       		.byte	0x3
 1924 0465 00000000 		.4byte	speed
 1925 0469 10       		.uleb128 0x10
 1926 046a 70020000 		.4byte	.LASF59
 1927 046e 01       		.byte	0x1
 1928 046f 35       		.byte	0x35
 1929 0470 BC020000 		.4byte	0x2bc
 1930 0474 01       		.byte	0x1
 1931 0475 05       		.byte	0x5
 1932 0476 03       		.byte	0x3
 1933 0477 00000000 		.4byte	max_speed
 1934 047b 10       		.uleb128 0x10
ARM GAS  /tmp/ccYKp00e.s 			page 40


 1935 047c 1F020000 		.4byte	.LASF60
 1936 0480 01       		.byte	0x1
 1937 0481 35       		.byte	0x35
 1938 0482 BC020000 		.4byte	0x2bc
 1939 0486 01       		.byte	0x1
 1940 0487 05       		.byte	0x5
 1941 0488 03       		.byte	0x3
 1942 0489 00000000 		.4byte	total_distance
 1943 048d 10       		.uleb128 0x10
 1944 048e 80000000 		.4byte	.LASF61
 1945 0492 01       		.byte	0x1
 1946 0493 35       		.byte	0x35
 1947 0494 BC020000 		.4byte	0x2bc
 1948 0498 01       		.byte	0x1
 1949 0499 05       		.byte	0x5
 1950 049a 03       		.byte	0x3
 1951 049b 00000000 		.4byte	post_distance
 1952 049f 10       		.uleb128 0x10
 1953 04a0 74000000 		.4byte	.LASF62
 1954 04a4 01       		.byte	0x1
 1955 04a5 36       		.byte	0x36
 1956 04a6 76000000 		.4byte	0x76
 1957 04aa 01       		.byte	0x1
 1958 04ab 05       		.byte	0x5
 1959 04ac 03       		.byte	0x3
 1960 04ad 00000000 		.4byte	mode
 1961 04b1 10       		.uleb128 0x10
 1962 04b2 46030000 		.4byte	.LASF35
 1963 04b6 01       		.byte	0x1
 1964 04b7 36       		.byte	0x36
 1965 04b8 76000000 		.4byte	0x76
 1966 04bc 01       		.byte	0x1
 1967 04bd 05       		.byte	0x5
 1968 04be 03       		.byte	0x3
 1969 04bf 00000000 		.4byte	wheel
 1970 04c3 10       		.uleb128 0x10
 1971 04c4 98020000 		.4byte	.LASF41
 1972 04c8 01       		.byte	0x1
 1973 04c9 37       		.byte	0x37
 1974 04ca 76000000 		.4byte	0x76
 1975 04ce 01       		.byte	0x1
 1976 04cf 05       		.byte	0x5
 1977 04d0 03       		.byte	0x3
 1978 04d1 00000000 		.4byte	time
 1979 04d5 10       		.uleb128 0x10
 1980 04d6 F9010000 		.4byte	.LASF63
 1981 04da 01       		.byte	0x1
 1982 04db 37       		.byte	0x37
 1983 04dc 76000000 		.4byte	0x76
 1984 04e0 01       		.byte	0x1
 1985 04e1 05       		.byte	0x5
 1986 04e2 03       		.byte	0x3
 1987 04e3 00000000 		.4byte	now_time
 1988 04e7 10       		.uleb128 0x10
 1989 04e8 25000000 		.4byte	.LASF64
 1990 04ec 01       		.byte	0x1
 1991 04ed 37       		.byte	0x37
ARM GAS  /tmp/ccYKp00e.s 			page 41


 1992 04ee 76000000 		.4byte	0x76
 1993 04f2 01       		.byte	0x1
 1994 04f3 05       		.byte	0x5
 1995 04f4 03       		.byte	0x3
 1996 04f5 00000000 		.4byte	post_time
 1997 04f9 10       		.uleb128 0x10
 1998 04fa 79000000 		.4byte	.LASF65
 1999 04fe 01       		.byte	0x1
 2000 04ff 37       		.byte	0x37
 2001 0500 76000000 		.4byte	0x76
 2002 0504 01       		.byte	0x1
 2003 0505 05       		.byte	0x5
 2004 0506 03       		.byte	0x3
 2005 0507 00000000 		.4byte	time_h
 2006 050b 10       		.uleb128 0x10
 2007 050c 98000000 		.4byte	.LASF66
 2008 0510 01       		.byte	0x1
 2009 0511 37       		.byte	0x37
 2010 0512 76000000 		.4byte	0x76
 2011 0516 01       		.byte	0x1
 2012 0517 05       		.byte	0x5
 2013 0518 03       		.byte	0x3
 2014 0519 00000000 		.4byte	time_m
 2015 051d 10       		.uleb128 0x10
 2016 051e 84020000 		.4byte	.LASF44
 2017 0522 01       		.byte	0x1
 2018 0523 38       		.byte	0x38
 2019 0524 76000000 		.4byte	0x76
 2020 0528 01       		.byte	0x1
 2021 0529 05       		.byte	0x5
 2022 052a 03       		.byte	0x3
 2023 052b 00000000 		.4byte	crank
 2024 052f 10       		.uleb128 0x10
 2025 0530 7A020000 		.4byte	.LASF34
 2026 0534 01       		.byte	0x1
 2027 0535 38       		.byte	0x38
 2028 0536 76000000 		.4byte	0x76
 2029 053a 01       		.byte	0x1
 2030 053b 05       		.byte	0x5
 2031 053c 03       		.byte	0x3
 2032 053d 00000000 		.4byte	bike_fork
 2033 0541 10       		.uleb128 0x10
 2034 0542 2B010000 		.4byte	.LASF67
 2035 0546 01       		.byte	0x1
 2036 0547 39       		.byte	0x39
 2037 0548 76000000 		.4byte	0x76
 2038 054c 01       		.byte	0x1
 2039 054d 05       		.byte	0x5
 2040 054e 03       		.byte	0x3
 2041 054f 00000000 		.4byte	speed_f
 2042 0553 10       		.uleb128 0x10
 2043 0554 FE000000 		.4byte	.LASF68
 2044 0558 01       		.byte	0x1
 2045 0559 39       		.byte	0x39
 2046 055a 76000000 		.4byte	0x76
 2047 055e 01       		.byte	0x1
 2048 055f 05       		.byte	0x5
ARM GAS  /tmp/ccYKp00e.s 			page 42


 2049 0560 03       		.byte	0x3
 2050 0561 00000000 		.4byte	speed_b
 2051 0565 10       		.uleb128 0x10
 2052 0566 A5020000 		.4byte	.LASF69
 2053 056a 01       		.byte	0x1
 2054 056b 3A       		.byte	0x3a
 2055 056c 76000000 		.4byte	0x76
 2056 0570 01       		.byte	0x1
 2057 0571 05       		.byte	0x5
 2058 0572 03       		.byte	0x3
 2059 0573 00000000 		.4byte	total_distance_f
 2060 0577 10       		.uleb128 0x10
 2061 0578 39000000 		.4byte	.LASF70
 2062 057c 01       		.byte	0x1
 2063 057d 3A       		.byte	0x3a
 2064 057e 76000000 		.4byte	0x76
 2065 0582 01       		.byte	0x1
 2066 0583 05       		.byte	0x5
 2067 0584 03       		.byte	0x3
 2068 0585 00000000 		.4byte	total_distance_b
 2069 0589 10       		.uleb128 0x10
 2070 058a 90020000 		.4byte	.LASF45
 2071 058e 01       		.byte	0x1
 2072 058f 3B       		.byte	0x3b
 2073 0590 76000000 		.4byte	0x76
 2074 0594 01       		.byte	0x1
 2075 0595 05       		.byte	0x5
 2076 0596 03       		.byte	0x3
 2077 0597 00000000 		.4byte	cadence
 2078 059b 00       		.byte	0
 2079              		.section	.debug_abbrev,"",%progbits
 2080              	.Ldebug_abbrev0:
 2081 0000 01       		.uleb128 0x1
 2082 0001 11       		.uleb128 0x11
 2083 0002 01       		.byte	0x1
 2084 0003 25       		.uleb128 0x25
 2085 0004 0E       		.uleb128 0xe
 2086 0005 13       		.uleb128 0x13
 2087 0006 0B       		.uleb128 0xb
 2088 0007 03       		.uleb128 0x3
 2089 0008 0E       		.uleb128 0xe
 2090 0009 1B       		.uleb128 0x1b
 2091 000a 0E       		.uleb128 0xe
 2092 000b 11       		.uleb128 0x11
 2093 000c 01       		.uleb128 0x1
 2094 000d 12       		.uleb128 0x12
 2095 000e 01       		.uleb128 0x1
 2096 000f 10       		.uleb128 0x10
 2097 0010 06       		.uleb128 0x6
 2098 0011 00       		.byte	0
 2099 0012 00       		.byte	0
 2100 0013 02       		.uleb128 0x2
 2101 0014 24       		.uleb128 0x24
 2102 0015 00       		.byte	0
 2103 0016 0B       		.uleb128 0xb
 2104 0017 0B       		.uleb128 0xb
 2105 0018 3E       		.uleb128 0x3e
ARM GAS  /tmp/ccYKp00e.s 			page 43


 2106 0019 0B       		.uleb128 0xb
 2107 001a 03       		.uleb128 0x3
 2108 001b 0E       		.uleb128 0xe
 2109 001c 00       		.byte	0
 2110 001d 00       		.byte	0
 2111 001e 03       		.uleb128 0x3
 2112 001f 16       		.uleb128 0x16
 2113 0020 00       		.byte	0
 2114 0021 03       		.uleb128 0x3
 2115 0022 0E       		.uleb128 0xe
 2116 0023 3A       		.uleb128 0x3a
 2117 0024 0B       		.uleb128 0xb
 2118 0025 3B       		.uleb128 0x3b
 2119 0026 0B       		.uleb128 0xb
 2120 0027 49       		.uleb128 0x49
 2121 0028 13       		.uleb128 0x13
 2122 0029 00       		.byte	0
 2123 002a 00       		.byte	0
 2124 002b 04       		.uleb128 0x4
 2125 002c 24       		.uleb128 0x24
 2126 002d 00       		.byte	0
 2127 002e 0B       		.uleb128 0xb
 2128 002f 0B       		.uleb128 0xb
 2129 0030 3E       		.uleb128 0x3e
 2130 0031 0B       		.uleb128 0xb
 2131 0032 03       		.uleb128 0x3
 2132 0033 08       		.uleb128 0x8
 2133 0034 00       		.byte	0
 2134 0035 00       		.byte	0
 2135 0036 05       		.uleb128 0x5
 2136 0037 2E       		.uleb128 0x2e
 2137 0038 00       		.byte	0
 2138 0039 3F       		.uleb128 0x3f
 2139 003a 0C       		.uleb128 0xc
 2140 003b 03       		.uleb128 0x3
 2141 003c 0E       		.uleb128 0xe
 2142 003d 3A       		.uleb128 0x3a
 2143 003e 0B       		.uleb128 0xb
 2144 003f 3B       		.uleb128 0x3b
 2145 0040 0B       		.uleb128 0xb
 2146 0041 27       		.uleb128 0x27
 2147 0042 0C       		.uleb128 0xc
 2148 0043 49       		.uleb128 0x49
 2149 0044 13       		.uleb128 0x13
 2150 0045 11       		.uleb128 0x11
 2151 0046 01       		.uleb128 0x1
 2152 0047 12       		.uleb128 0x12
 2153 0048 01       		.uleb128 0x1
 2154 0049 40       		.uleb128 0x40
 2155 004a 0A       		.uleb128 0xa
 2156 004b 9742     		.uleb128 0x2117
 2157 004d 0C       		.uleb128 0xc
 2158 004e 00       		.byte	0
 2159 004f 00       		.byte	0
 2160 0050 06       		.uleb128 0x6
 2161 0051 2E       		.uleb128 0x2e
 2162 0052 00       		.byte	0
ARM GAS  /tmp/ccYKp00e.s 			page 44


 2163 0053 3F       		.uleb128 0x3f
 2164 0054 0C       		.uleb128 0xc
 2165 0055 03       		.uleb128 0x3
 2166 0056 0E       		.uleb128 0xe
 2167 0057 3A       		.uleb128 0x3a
 2168 0058 0B       		.uleb128 0xb
 2169 0059 3B       		.uleb128 0x3b
 2170 005a 0B       		.uleb128 0xb
 2171 005b 27       		.uleb128 0x27
 2172 005c 0C       		.uleb128 0xc
 2173 005d 11       		.uleb128 0x11
 2174 005e 01       		.uleb128 0x1
 2175 005f 12       		.uleb128 0x12
 2176 0060 01       		.uleb128 0x1
 2177 0061 40       		.uleb128 0x40
 2178 0062 0A       		.uleb128 0xa
 2179 0063 9742     		.uleb128 0x2117
 2180 0065 0C       		.uleb128 0xc
 2181 0066 00       		.byte	0
 2182 0067 00       		.byte	0
 2183 0068 07       		.uleb128 0x7
 2184 0069 2E       		.uleb128 0x2e
 2185 006a 01       		.byte	0x1
 2186 006b 3F       		.uleb128 0x3f
 2187 006c 0C       		.uleb128 0xc
 2188 006d 03       		.uleb128 0x3
 2189 006e 0E       		.uleb128 0xe
 2190 006f 3A       		.uleb128 0x3a
 2191 0070 0B       		.uleb128 0xb
 2192 0071 3B       		.uleb128 0x3b
 2193 0072 0B       		.uleb128 0xb
 2194 0073 27       		.uleb128 0x27
 2195 0074 0C       		.uleb128 0xc
 2196 0075 11       		.uleb128 0x11
 2197 0076 01       		.uleb128 0x1
 2198 0077 12       		.uleb128 0x12
 2199 0078 01       		.uleb128 0x1
 2200 0079 40       		.uleb128 0x40
 2201 007a 06       		.uleb128 0x6
 2202 007b 9742     		.uleb128 0x2117
 2203 007d 0C       		.uleb128 0xc
 2204 007e 01       		.uleb128 0x1
 2205 007f 13       		.uleb128 0x13
 2206 0080 00       		.byte	0
 2207 0081 00       		.byte	0
 2208 0082 08       		.uleb128 0x8
 2209 0083 05       		.uleb128 0x5
 2210 0084 00       		.byte	0
 2211 0085 03       		.uleb128 0x3
 2212 0086 0E       		.uleb128 0xe
 2213 0087 3A       		.uleb128 0x3a
 2214 0088 0B       		.uleb128 0xb
 2215 0089 3B       		.uleb128 0x3b
 2216 008a 0B       		.uleb128 0xb
 2217 008b 49       		.uleb128 0x49
 2218 008c 13       		.uleb128 0x13
 2219 008d 02       		.uleb128 0x2
ARM GAS  /tmp/ccYKp00e.s 			page 45


 2220 008e 0A       		.uleb128 0xa
 2221 008f 00       		.byte	0
 2222 0090 00       		.byte	0
 2223 0091 09       		.uleb128 0x9
 2224 0092 2E       		.uleb128 0x2e
 2225 0093 00       		.byte	0
 2226 0094 3F       		.uleb128 0x3f
 2227 0095 0C       		.uleb128 0xc
 2228 0096 03       		.uleb128 0x3
 2229 0097 0E       		.uleb128 0xe
 2230 0098 3A       		.uleb128 0x3a
 2231 0099 0B       		.uleb128 0xb
 2232 009a 3B       		.uleb128 0x3b
 2233 009b 0B       		.uleb128 0xb
 2234 009c 27       		.uleb128 0x27
 2235 009d 0C       		.uleb128 0xc
 2236 009e 49       		.uleb128 0x49
 2237 009f 13       		.uleb128 0x13
 2238 00a0 11       		.uleb128 0x11
 2239 00a1 01       		.uleb128 0x1
 2240 00a2 12       		.uleb128 0x12
 2241 00a3 01       		.uleb128 0x1
 2242 00a4 40       		.uleb128 0x40
 2243 00a5 06       		.uleb128 0x6
 2244 00a6 9642     		.uleb128 0x2116
 2245 00a8 0C       		.uleb128 0xc
 2246 00a9 00       		.byte	0
 2247 00aa 00       		.byte	0
 2248 00ab 0A       		.uleb128 0xa
 2249 00ac 2E       		.uleb128 0x2e
 2250 00ad 01       		.byte	0x1
 2251 00ae 3F       		.uleb128 0x3f
 2252 00af 0C       		.uleb128 0xc
 2253 00b0 03       		.uleb128 0x3
 2254 00b1 0E       		.uleb128 0xe
 2255 00b2 3A       		.uleb128 0x3a
 2256 00b3 0B       		.uleb128 0xb
 2257 00b4 3B       		.uleb128 0x3b
 2258 00b5 0B       		.uleb128 0xb
 2259 00b6 27       		.uleb128 0x27
 2260 00b7 0C       		.uleb128 0xc
 2261 00b8 11       		.uleb128 0x11
 2262 00b9 01       		.uleb128 0x1
 2263 00ba 12       		.uleb128 0x12
 2264 00bb 01       		.uleb128 0x1
 2265 00bc 40       		.uleb128 0x40
 2266 00bd 06       		.uleb128 0x6
 2267 00be 9642     		.uleb128 0x2116
 2268 00c0 0C       		.uleb128 0xc
 2269 00c1 01       		.uleb128 0x1
 2270 00c2 13       		.uleb128 0x13
 2271 00c3 00       		.byte	0
 2272 00c4 00       		.byte	0
 2273 00c5 0B       		.uleb128 0xb
 2274 00c6 34       		.uleb128 0x34
 2275 00c7 00       		.byte	0
 2276 00c8 03       		.uleb128 0x3
ARM GAS  /tmp/ccYKp00e.s 			page 46


 2277 00c9 0E       		.uleb128 0xe
 2278 00ca 3A       		.uleb128 0x3a
 2279 00cb 0B       		.uleb128 0xb
 2280 00cc 3B       		.uleb128 0x3b
 2281 00cd 0B       		.uleb128 0xb
 2282 00ce 49       		.uleb128 0x49
 2283 00cf 13       		.uleb128 0x13
 2284 00d0 02       		.uleb128 0x2
 2285 00d1 0A       		.uleb128 0xa
 2286 00d2 00       		.byte	0
 2287 00d3 00       		.byte	0
 2288 00d4 0C       		.uleb128 0xc
 2289 00d5 2E       		.uleb128 0x2e
 2290 00d6 00       		.byte	0
 2291 00d7 3F       		.uleb128 0x3f
 2292 00d8 0C       		.uleb128 0xc
 2293 00d9 03       		.uleb128 0x3
 2294 00da 0E       		.uleb128 0xe
 2295 00db 3A       		.uleb128 0x3a
 2296 00dc 0B       		.uleb128 0xb
 2297 00dd 3B       		.uleb128 0x3b
 2298 00de 0B       		.uleb128 0xb
 2299 00df 27       		.uleb128 0x27
 2300 00e0 0C       		.uleb128 0xc
 2301 00e1 11       		.uleb128 0x11
 2302 00e2 01       		.uleb128 0x1
 2303 00e3 12       		.uleb128 0x12
 2304 00e4 01       		.uleb128 0x1
 2305 00e5 40       		.uleb128 0x40
 2306 00e6 06       		.uleb128 0x6
 2307 00e7 9642     		.uleb128 0x2116
 2308 00e9 0C       		.uleb128 0xc
 2309 00ea 00       		.byte	0
 2310 00eb 00       		.byte	0
 2311 00ec 0D       		.uleb128 0xd
 2312 00ed 2E       		.uleb128 0x2e
 2313 00ee 01       		.byte	0x1
 2314 00ef 3F       		.uleb128 0x3f
 2315 00f0 0C       		.uleb128 0xc
 2316 00f1 03       		.uleb128 0x3
 2317 00f2 0E       		.uleb128 0xe
 2318 00f3 3A       		.uleb128 0x3a
 2319 00f4 0B       		.uleb128 0xb
 2320 00f5 3B       		.uleb128 0x3b
 2321 00f6 0B       		.uleb128 0xb
 2322 00f7 27       		.uleb128 0x27
 2323 00f8 0C       		.uleb128 0xc
 2324 00f9 49       		.uleb128 0x49
 2325 00fa 13       		.uleb128 0x13
 2326 00fb 11       		.uleb128 0x11
 2327 00fc 01       		.uleb128 0x1
 2328 00fd 12       		.uleb128 0x12
 2329 00fe 01       		.uleb128 0x1
 2330 00ff 40       		.uleb128 0x40
 2331 0100 06       		.uleb128 0x6
 2332 0101 9642     		.uleb128 0x2116
 2333 0103 0C       		.uleb128 0xc
ARM GAS  /tmp/ccYKp00e.s 			page 47


 2334 0104 01       		.uleb128 0x1
 2335 0105 13       		.uleb128 0x13
 2336 0106 00       		.byte	0
 2337 0107 00       		.byte	0
 2338 0108 0E       		.uleb128 0xe
 2339 0109 34       		.uleb128 0x34
 2340 010a 00       		.byte	0
 2341 010b 03       		.uleb128 0x3
 2342 010c 08       		.uleb128 0x8
 2343 010d 3A       		.uleb128 0x3a
 2344 010e 0B       		.uleb128 0xb
 2345 010f 3B       		.uleb128 0x3b
 2346 0110 0B       		.uleb128 0xb
 2347 0111 49       		.uleb128 0x49
 2348 0112 13       		.uleb128 0x13
 2349 0113 02       		.uleb128 0x2
 2350 0114 0A       		.uleb128 0xa
 2351 0115 00       		.byte	0
 2352 0116 00       		.byte	0
 2353 0117 0F       		.uleb128 0xf
 2354 0118 26       		.uleb128 0x26
 2355 0119 00       		.byte	0
 2356 011a 49       		.uleb128 0x49
 2357 011b 13       		.uleb128 0x13
 2358 011c 00       		.byte	0
 2359 011d 00       		.byte	0
 2360 011e 10       		.uleb128 0x10
 2361 011f 34       		.uleb128 0x34
 2362 0120 00       		.byte	0
 2363 0121 03       		.uleb128 0x3
 2364 0122 0E       		.uleb128 0xe
 2365 0123 3A       		.uleb128 0x3a
 2366 0124 0B       		.uleb128 0xb
 2367 0125 3B       		.uleb128 0x3b
 2368 0126 0B       		.uleb128 0xb
 2369 0127 49       		.uleb128 0x49
 2370 0128 13       		.uleb128 0x13
 2371 0129 3F       		.uleb128 0x3f
 2372 012a 0C       		.uleb128 0xc
 2373 012b 02       		.uleb128 0x2
 2374 012c 0A       		.uleb128 0xa
 2375 012d 00       		.byte	0
 2376 012e 00       		.byte	0
 2377 012f 11       		.uleb128 0x11
 2378 0130 0F       		.uleb128 0xf
 2379 0131 00       		.byte	0
 2380 0132 0B       		.uleb128 0xb
 2381 0133 0B       		.uleb128 0xb
 2382 0134 49       		.uleb128 0x49
 2383 0135 13       		.uleb128 0x13
 2384 0136 00       		.byte	0
 2385 0137 00       		.byte	0
 2386 0138 12       		.uleb128 0x12
 2387 0139 35       		.uleb128 0x35
 2388 013a 00       		.byte	0
 2389 013b 49       		.uleb128 0x49
 2390 013c 13       		.uleb128 0x13
ARM GAS  /tmp/ccYKp00e.s 			page 48


 2391 013d 00       		.byte	0
 2392 013e 00       		.byte	0
 2393 013f 00       		.byte	0
 2394              		.section	.debug_loc,"",%progbits
 2395              	.Ldebug_loc0:
 2396              	.LLST0:
 2397 0000 F8000000 		.4byte	.LFB12-.Ltext0
 2398 0004 FA000000 		.4byte	.LCFI0-.Ltext0
 2399 0008 0200     		.2byte	0x2
 2400 000a 7D       		.byte	0x7d
 2401 000b 00       		.sleb128 0
 2402 000c FA000000 		.4byte	.LCFI0-.Ltext0
 2403 0010 1C010000 		.4byte	.LFE12-.Ltext0
 2404 0014 0200     		.2byte	0x2
 2405 0016 7D       		.byte	0x7d
 2406 0017 08       		.sleb128 8
 2407 0018 00000000 		.4byte	0
 2408 001c 00000000 		.4byte	0
 2409              	.LLST1:
 2410 0020 1C010000 		.4byte	.LFB13-.Ltext0
 2411 0024 1E010000 		.4byte	.LCFI1-.Ltext0
 2412 0028 0200     		.2byte	0x2
 2413 002a 7D       		.byte	0x7d
 2414 002b 00       		.sleb128 0
 2415 002c 1E010000 		.4byte	.LCFI1-.Ltext0
 2416 0030 3C010000 		.4byte	.LFE13-.Ltext0
 2417 0034 0200     		.2byte	0x2
 2418 0036 7D       		.byte	0x7d
 2419 0037 08       		.sleb128 8
 2420 0038 00000000 		.4byte	0
 2421 003c 00000000 		.4byte	0
 2422              	.LLST2:
 2423 0040 3C010000 		.4byte	.LFB14-.Ltext0
 2424 0044 3E010000 		.4byte	.LCFI2-.Ltext0
 2425 0048 0200     		.2byte	0x2
 2426 004a 7D       		.byte	0x7d
 2427 004b 00       		.sleb128 0
 2428 004c 3E010000 		.4byte	.LCFI2-.Ltext0
 2429 0050 40010000 		.4byte	.LCFI3-.Ltext0
 2430 0054 0200     		.2byte	0x2
 2431 0056 7D       		.byte	0x7d
 2432 0057 04       		.sleb128 4
 2433 0058 40010000 		.4byte	.LCFI3-.Ltext0
 2434 005c 18020000 		.4byte	.LFE14-.Ltext0
 2435 0060 0200     		.2byte	0x2
 2436 0062 7D       		.byte	0x7d
 2437 0063 18       		.sleb128 24
 2438 0064 00000000 		.4byte	0
 2439 0068 00000000 		.4byte	0
 2440              	.LLST3:
 2441 006c 18020000 		.4byte	.LFB15-.Ltext0
 2442 0070 1A020000 		.4byte	.LCFI4-.Ltext0
 2443 0074 0200     		.2byte	0x2
 2444 0076 7D       		.byte	0x7d
 2445 0077 00       		.sleb128 0
 2446 0078 1A020000 		.4byte	.LCFI4-.Ltext0
 2447 007c 68020000 		.4byte	.LFE15-.Ltext0
ARM GAS  /tmp/ccYKp00e.s 			page 49


 2448 0080 0200     		.2byte	0x2
 2449 0082 7D       		.byte	0x7d
 2450 0083 08       		.sleb128 8
 2451 0084 00000000 		.4byte	0
 2452 0088 00000000 		.4byte	0
 2453              	.LLST4:
 2454 008c 68020000 		.4byte	.LFB16-.Ltext0
 2455 0090 6A020000 		.4byte	.LCFI5-.Ltext0
 2456 0094 0200     		.2byte	0x2
 2457 0096 7D       		.byte	0x7d
 2458 0097 00       		.sleb128 0
 2459 0098 6A020000 		.4byte	.LCFI5-.Ltext0
 2460 009c 6C020000 		.4byte	.LCFI6-.Ltext0
 2461 00a0 0200     		.2byte	0x2
 2462 00a2 7D       		.byte	0x7d
 2463 00a3 08       		.sleb128 8
 2464 00a4 6C020000 		.4byte	.LCFI6-.Ltext0
 2465 00a8 C0020000 		.4byte	.LFE16-.Ltext0
 2466 00ac 0200     		.2byte	0x2
 2467 00ae 7D       		.byte	0x7d
 2468 00af 18       		.sleb128 24
 2469 00b0 00000000 		.4byte	0
 2470 00b4 00000000 		.4byte	0
 2471              	.LLST5:
 2472 00b8 C0020000 		.4byte	.LFB17-.Ltext0
 2473 00bc C2020000 		.4byte	.LCFI7-.Ltext0
 2474 00c0 0200     		.2byte	0x2
 2475 00c2 7D       		.byte	0x7d
 2476 00c3 00       		.sleb128 0
 2477 00c4 C2020000 		.4byte	.LCFI7-.Ltext0
 2478 00c8 C4020000 		.4byte	.LCFI8-.Ltext0
 2479 00cc 0200     		.2byte	0x2
 2480 00ce 7D       		.byte	0x7d
 2481 00cf 08       		.sleb128 8
 2482 00d0 C4020000 		.4byte	.LCFI8-.Ltext0
 2483 00d4 F4020000 		.4byte	.LFE17-.Ltext0
 2484 00d8 0200     		.2byte	0x2
 2485 00da 7D       		.byte	0x7d
 2486 00db 18       		.sleb128 24
 2487 00dc 00000000 		.4byte	0
 2488 00e0 00000000 		.4byte	0
 2489              	.LLST6:
 2490 00e4 F4020000 		.4byte	.LFB18-.Ltext0
 2491 00e8 F6020000 		.4byte	.LCFI9-.Ltext0
 2492 00ec 0200     		.2byte	0x2
 2493 00ee 7D       		.byte	0x7d
 2494 00ef 00       		.sleb128 0
 2495 00f0 F6020000 		.4byte	.LCFI9-.Ltext0
 2496 00f4 F8020000 		.4byte	.LCFI10-.Ltext0
 2497 00f8 0200     		.2byte	0x2
 2498 00fa 7D       		.byte	0x7d
 2499 00fb 04       		.sleb128 4
 2500 00fc F8020000 		.4byte	.LCFI10-.Ltext0
 2501 0100 32030000 		.4byte	.LFE18-.Ltext0
 2502 0104 0200     		.2byte	0x2
 2503 0106 7D       		.byte	0x7d
 2504 0107 18       		.sleb128 24
ARM GAS  /tmp/ccYKp00e.s 			page 50


 2505 0108 00000000 		.4byte	0
 2506 010c 00000000 		.4byte	0
 2507              	.LLST7:
 2508 0110 34030000 		.4byte	.LFB19-.Ltext0
 2509 0114 36030000 		.4byte	.LCFI11-.Ltext0
 2510 0118 0200     		.2byte	0x2
 2511 011a 7D       		.byte	0x7d
 2512 011b 00       		.sleb128 0
 2513 011c 36030000 		.4byte	.LCFI11-.Ltext0
 2514 0120 C4030000 		.4byte	.LFE19-.Ltext0
 2515 0124 0200     		.2byte	0x2
 2516 0126 7D       		.byte	0x7d
 2517 0127 08       		.sleb128 8
 2518 0128 00000000 		.4byte	0
 2519 012c 00000000 		.4byte	0
 2520              	.LLST8:
 2521 0130 C4030000 		.4byte	.LFB20-.Ltext0
 2522 0134 C6030000 		.4byte	.LCFI12-.Ltext0
 2523 0138 0200     		.2byte	0x2
 2524 013a 7D       		.byte	0x7d
 2525 013b 00       		.sleb128 0
 2526 013c C6030000 		.4byte	.LCFI12-.Ltext0
 2527 0140 30060000 		.4byte	.LFE20-.Ltext0
 2528 0144 0200     		.2byte	0x2
 2529 0146 7D       		.byte	0x7d
 2530 0147 08       		.sleb128 8
 2531 0148 00000000 		.4byte	0
 2532 014c 00000000 		.4byte	0
 2533              		.section	.debug_aranges,"",%progbits
 2534 0000 1C000000 		.4byte	0x1c
 2535 0004 0200     		.2byte	0x2
 2536 0006 00000000 		.4byte	.Ldebug_info0
 2537 000a 04       		.byte	0x4
 2538 000b 00       		.byte	0
 2539 000c 0000     		.2byte	0
 2540 000e 0000     		.2byte	0
 2541 0010 00000000 		.4byte	.Ltext0
 2542 0014 30060000 		.4byte	.Letext0-.Ltext0
 2543 0018 00000000 		.4byte	0
 2544 001c 00000000 		.4byte	0
 2545              		.section	.debug_line,"",%progbits
 2546              	.Ldebug_line0:
 2547 0000 5F010000 		.section	.debug_str,"MS",%progbits,1
 2547      0200BF00 
 2547      00000201 
 2547      FB0E0D00 
 2547      01010101 
 2548              	.LASF38:
 2549 0000 6765745F 		.ascii	"get_distance\000"
 2549      64697374 
 2549      616E6365 
 2549      00
 2550              	.LASF50:
 2551 000d 4F4C4544 		.ascii	"OLED\000"
 2551      00
 2552              	.LASF12:
 2553 0012 73657474 		.ascii	"setting\000"
ARM GAS  /tmp/ccYKp00e.s 			page 51


 2553      696E6700 
 2554              	.LASF36:
 2555 001a 665F6469 		.ascii	"f_distance\000"
 2555      7374616E 
 2555      636500
 2556              	.LASF64:
 2557 0025 706F7374 		.ascii	"post_time\000"
 2557      5F74696D 
 2557      6500
 2558              	.LASF2:
 2559 002f 73686F72 		.ascii	"short int\000"
 2559      7420696E 
 2559      7400
 2560              	.LASF70:
 2561 0039 746F7461 		.ascii	"total_distance_b\000"
 2561      6C5F6469 
 2561      7374616E 
 2561      63655F62 
 2561      00
 2562              	.LASF49:
 2563 004a 44454255 		.ascii	"DEBUG\000"
 2563      4700
 2564              	.LASF54:
 2565 0050 42555454 		.ascii	"BUTTON\000"
 2565      4F4E00
 2566              	.LASF16:
 2567 0057 63686563 		.ascii	"check_button\000"
 2567      6B5F6275 
 2567      74746F6E 
 2567      00
 2568              	.LASF48:
 2569 0064 6D61696E 		.ascii	"main\000"
 2569      00
 2570              	.LASF9:
 2571 0069 5F5F7569 		.ascii	"__uint32_t\000"
 2571      6E743332 
 2571      5F7400
 2572              	.LASF62:
 2573 0074 6D6F6465 		.ascii	"mode\000"
 2573      00
 2574              	.LASF65:
 2575 0079 74696D65 		.ascii	"time_h\000"
 2575      5F6800
 2576              	.LASF61:
 2577 0080 706F7374 		.ascii	"post_distance\000"
 2577      5F646973 
 2577      74616E63 
 2577      6500
 2578              	.LASF46:
 2579 008e 63616465 		.ascii	"cadence_5\000"
 2579      6E63655F 
 2579      3500
 2580              	.LASF66:
 2581 0098 74696D65 		.ascii	"time_m\000"
 2581      5F6D00
 2582              	.LASF29:
 2583 009f 70726573 		.ascii	"press_times\000"
ARM GAS  /tmp/ccYKp00e.s 			page 52


 2583      735F7469 
 2583      6D657300 
 2584              	.LASF27:
 2585 00ab 64697370 		.ascii	"display_segment\000"
 2585      6C61795F 
 2585      7365676D 
 2585      656E7400 
 2586              	.LASF47:
 2587 00bb 696E6974 		.ascii	"initiate\000"
 2587      69617465 
 2587      00
 2588              	.LASF42:
 2589 00c4 665F7370 		.ascii	"f_speed\000"
 2589      65656400 
 2590              	.LASF13:
 2591 00cc 70726573 		.ascii	"press_trip\000"
 2591      735F7472 
 2591      697000
 2592              	.LASF37:
 2593 00d7 666C6F61 		.ascii	"float\000"
 2593      7400
 2594              	.LASF6:
 2595 00dd 6C6F6E67 		.ascii	"long long int\000"
 2595      206C6F6E 
 2595      6720696E 
 2595      7400
 2596              	.LASF39:
 2597 00eb 6765745F 		.ascii	"get_speed\000"
 2597      73706565 
 2597      6400
 2598              	.LASF4:
 2599 00f5 6C6F6E67 		.ascii	"long int\000"
 2599      20696E74 
 2599      00
 2600              	.LASF68:
 2601 00fe 73706565 		.ascii	"speed_b\000"
 2601      645F6200 
 2602              	.LASF72:
 2603 0106 636F6465 		.ascii	"code/main.c\000"
 2603      2F6D6169 
 2603      6E2E6300 
 2604              	.LASF20:
 2605 0112 72656164 		.ascii	"read_crank\000"
 2605      5F637261 
 2605      6E6B00
 2606              	.LASF57:
 2607 011d 73776974 		.ascii	"switchDisplay\000"
 2607      63684469 
 2607      73706C61 
 2607      7900
 2608              	.LASF67:
 2609 012b 73706565 		.ascii	"speed_f\000"
 2609      645F6600 
 2610              	.LASF14:
 2611 0133 70726573 		.ascii	"press_mode\000"
 2611      735F6D6F 
 2611      646500
ARM GAS  /tmp/ccYKp00e.s 			page 53


 2612              	.LASF1:
 2613 013e 756E7369 		.ascii	"unsigned char\000"
 2613      676E6564 
 2613      20636861 
 2613      7200
 2614              	.LASF28:
 2615 014c 77616974 		.ascii	"wait_for_setting\000"
 2615      5F666F72 
 2615      5F736574 
 2615      74696E67 
 2615      00
 2616              	.LASF30:
 2617 015d 77686565 		.ascii	"wheel_1\000"
 2617      6C5F3100 
 2618              	.LASF31:
 2619 0165 77686565 		.ascii	"wheel_2\000"
 2619      6C5F3200 
 2620              	.LASF0:
 2621 016d 7369676E 		.ascii	"signed char\000"
 2621      65642063 
 2621      68617200 
 2622              	.LASF7:
 2623 0179 6C6F6E67 		.ascii	"long long unsigned int\000"
 2623      206C6F6E 
 2623      6720756E 
 2623      7369676E 
 2623      65642069 
 2624              	.LASF10:
 2625 0190 75696E74 		.ascii	"uint32_t\000"
 2625      33325F74 
 2625      00
 2626              	.LASF8:
 2627 0199 756E7369 		.ascii	"unsigned int\000"
 2627      676E6564 
 2627      20696E74 
 2627      00
 2628              	.LASF56:
 2629 01a6 69734E69 		.ascii	"isNight\000"
 2629      67687400 
 2630              	.LASF18:
 2631 01ae 72656164 		.ascii	"read_time_short\000"
 2631      5F74696D 
 2631      655F7368 
 2631      6F727400 
 2632              	.LASF58:
 2633 01be 73706565 		.ascii	"speed\000"
 2633      6400
 2634              	.LASF23:
 2635 01c4 636C6561 		.ascii	"clear_timer_long\000"
 2635      725F7469 
 2635      6D65725F 
 2635      6C6F6E67 
 2635      00
 2636              	.LASF51:
 2637 01d5 5345474D 		.ascii	"SEGMENT\000"
 2637      454E5400 
 2638              	.LASF25:
ARM GAS  /tmp/ccYKp00e.s 			page 54


 2639 01dd 46726163 		.ascii	"Fraction\000"
 2639      74696F6E 
 2639      00
 2640              	.LASF3:
 2641 01e6 73686F72 		.ascii	"short unsigned int\000"
 2641      7420756E 
 2641      7369676E 
 2641      65642069 
 2641      6E7400
 2642              	.LASF63:
 2643 01f9 6E6F775F 		.ascii	"now_time\000"
 2643      74696D65 
 2643      00
 2644              	.LASF21:
 2645 0202 72656164 		.ascii	"read_fork\000"
 2645      5F666F72 
 2645      6B00
 2646              	.LASF40:
 2647 020c 64697374 		.ascii	"distance\000"
 2647      616E6365 
 2647      00
 2648              	.LASF55:
 2649 0215 73706565 		.ascii	"speed_red\000"
 2649      645F7265 
 2649      6400
 2650              	.LASF60:
 2651 021f 746F7461 		.ascii	"total_distance\000"
 2651      6C5F6469 
 2651      7374616E 
 2651      636500
 2652              	.LASF11:
 2653 022e 5F426F6F 		.ascii	"_Bool\000"
 2653      6C00
 2654              	.LASF19:
 2655 0234 72656164 		.ascii	"read_time_long\000"
 2655      5F74696D 
 2655      655F6C6F 
 2655      6E6700
 2656              	.LASF22:
 2657 0243 636C6561 		.ascii	"clear_fork\000"
 2657      725F666F 
 2657      726B00
 2658              	.LASF24:
 2659 024e 496E7465 		.ascii	"Integer\000"
 2659      67657200 
 2660              	.LASF5:
 2661 0256 6C6F6E67 		.ascii	"long unsigned int\000"
 2661      20756E73 
 2661      69676E65 
 2661      6420696E 
 2661      7400
 2662              	.LASF17:
 2663 0268 74696D65 		.ascii	"time_up\000"
 2663      5F757000 
 2664              	.LASF59:
 2665 0270 6D61785F 		.ascii	"max_speed\000"
 2665      73706565 
ARM GAS  /tmp/ccYKp00e.s 			page 55


 2665      6400
 2666              	.LASF34:
 2667 027a 62696B65 		.ascii	"bike_fork\000"
 2667      5F666F72 
 2667      6B00
 2668              	.LASF44:
 2669 0284 6372616E 		.ascii	"crank\000"
 2669      6B00
 2670              	.LASF52:
 2671 028a 54494D45 		.ascii	"TIMER\000"
 2671      5200
 2672              	.LASF45:
 2673 0290 63616465 		.ascii	"cadence\000"
 2673      6E636500 
 2674              	.LASF41:
 2675 0298 74696D65 		.ascii	"time\000"
 2675      00
 2676              	.LASF32:
 2677 029d 77686565 		.ascii	"wheel_3\000"
 2677      6C5F3300 
 2678              	.LASF69:
 2679 02a5 746F7461 		.ascii	"total_distance_f\000"
 2679      6C5F6469 
 2679      7374616E 
 2679      63655F66 
 2679      00
 2680              	.LASF71:
 2681 02b6 474E5520 		.ascii	"GNU C11 5.4.1 20160919 (release) [ARM/embedded-5-br"
 2681      43313120 
 2681      352E342E 
 2681      31203230 
 2681      31363039 
 2682 02e9 616E6368 		.ascii	"anch revision 240496] -mcpu=cortex-m0 -mthumb -gdwa"
 2682      20726576 
 2682      6973696F 
 2682      6E203234 
 2682      30343936 
 2683 031c 72662D32 		.ascii	"rf-2 -O0 -fomit-frame-pointer\000"
 2683      202D4F30 
 2683      202D666F 
 2683      6D69742D 
 2683      6672616D 
 2684              	.LASF33:
 2685 033a 63686563 		.ascii	"check_speed\000"
 2685      6B5F7370 
 2685      65656400 
 2686              	.LASF35:
 2687 0346 77686565 		.ascii	"wheel\000"
 2687      6C00
 2688              	.LASF43:
 2689 034c 6765745F 		.ascii	"get_cadence\000"
 2689      63616465 
 2689      6E636500 
 2690              	.LASF73:
 2691 0358 2F686F6D 		.ascii	"/home/jp2g22/design/chip/software\000"
 2691      652F6A70 
 2691      32673232 
ARM GAS  /tmp/ccYKp00e.s 			page 56


 2691      2F646573 
 2691      69676E2F 
 2692              	.LASF53:
 2693 037a 53454E53 		.ascii	"SENSOR\000"
 2693      4F5200
 2694              	.LASF26:
 2695 0381 77616974 		.ascii	"wait_for_press\000"
 2695      5F666F72 
 2695      5F707265 
 2695      737300
 2696              	.LASF15:
 2697 0390 70726573 		.ascii	"press_d_mode\000"
 2697      735F645F 
 2697      6D6F6465 
 2697      00
 2698              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160919 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccYKp00e.s 			page 57


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccYKp00e.s:57     .data:00000000 DEBUG
     /tmp/ccYKp00e.s:54     .data:00000000 $d
     /tmp/ccYKp00e.s:63     .data:00000004 OLED
     /tmp/ccYKp00e.s:69     .data:00000008 SEGMENT
     /tmp/ccYKp00e.s:75     .data:0000000c TIMER
     /tmp/ccYKp00e.s:81     .data:00000010 SENSOR
     /tmp/ccYKp00e.s:87     .data:00000014 BUTTON
                            *COM*:00000001 speed_red
                            *COM*:00000001 isNight
                            *COM*:00000001 switchDisplay
                            *COM*:00000004 distance
                            *COM*:00000004 speed
                            *COM*:00000004 max_speed
                            *COM*:00000004 total_distance
                            *COM*:00000004 post_distance
                            *COM*:00000004 mode
                            *COM*:00000004 wheel
                            *COM*:00000004 time
                            *COM*:00000004 now_time
                            *COM*:00000004 post_time
                            *COM*:00000004 time_h
                            *COM*:00000004 time_m
                            *COM*:00000004 crank
                            *COM*:00000004 bike_fork
                            *COM*:00000004 speed_f
                            *COM*:00000004 speed_b
                            *COM*:00000004 total_distance_f
                            *COM*:00000004 total_distance_b
                            *COM*:00000004 cadence
     /tmp/ccYKp00e.s:112    .text:00000000 $t
     /tmp/ccYKp00e.s:117    .text:00000000 setting
     /tmp/ccYKp00e.s:139    .text:00000014 $d
     /tmp/ccYKp00e.s:143    .text:00000018 $t
     /tmp/ccYKp00e.s:148    .text:00000018 press_trip
     /tmp/ccYKp00e.s:169    .text:0000002c $d
     /tmp/ccYKp00e.s:173    .text:00000030 $t
     /tmp/ccYKp00e.s:178    .text:00000030 press_mode
     /tmp/ccYKp00e.s:199    .text:00000044 $d
     /tmp/ccYKp00e.s:203    .text:00000048 $t
     /tmp/ccYKp00e.s:208    .text:00000048 press_d_mode
     /tmp/ccYKp00e.s:228    .text:00000058 $d
     /tmp/ccYKp00e.s:232    .text:0000005c $t
     /tmp/ccYKp00e.s:237    .text:0000005c check_button
     /tmp/ccYKp00e.s:258    .text:00000070 $d
     /tmp/ccYKp00e.s:262    .text:00000074 $t
     /tmp/ccYKp00e.s:267    .text:00000074 time_up
     /tmp/ccYKp00e.s:288    .text:00000088 $d
     /tmp/ccYKp00e.s:292    .text:0000008c $t
     /tmp/ccYKp00e.s:297    .text:0000008c read_time_short
     /tmp/ccYKp00e.s:315    .text:00000098 $d
     /tmp/ccYKp00e.s:319    .text:0000009c $t
     /tmp/ccYKp00e.s:324    .text:0000009c read_time_long
     /tmp/ccYKp00e.s:341    .text:000000a8 $d
     /tmp/ccYKp00e.s:345    .text:000000ac $t
     /tmp/ccYKp00e.s:350    .text:000000ac read_crank
ARM GAS  /tmp/ccYKp00e.s 			page 58


     /tmp/ccYKp00e.s:368    .text:000000b8 $d
     /tmp/ccYKp00e.s:372    .text:000000bc $t
     /tmp/ccYKp00e.s:377    .text:000000bc read_fork
     /tmp/ccYKp00e.s:394    .text:000000c8 $d
     /tmp/ccYKp00e.s:398    .text:000000cc $t
     /tmp/ccYKp00e.s:403    .text:000000cc clear_fork
     /tmp/ccYKp00e.s:421    .text:000000d8 $d
     /tmp/ccYKp00e.s:425    .text:000000dc $t
     /tmp/ccYKp00e.s:430    .text:000000dc clear_timer_long
     /tmp/ccYKp00e.s:451    .text:000000f0 $d
     /tmp/ccYKp00e.s:456    .text:000000f8 $t
     /tmp/ccYKp00e.s:461    .text:000000f8 display_segment
     /tmp/ccYKp00e.s:490    .text:00000118 $d
     /tmp/ccYKp00e.s:494    .text:0000011c $t
     /tmp/ccYKp00e.s:499    .text:0000011c wait_for_press
     /tmp/ccYKp00e.s:542    .text:0000013c wait_for_setting
     /tmp/ccYKp00e.s:682    .text:00000214 $d
     /tmp/ccYKp00e.s:688    .text:00000218 $t
     /tmp/ccYKp00e.s:693    .text:00000218 check_speed
     /tmp/ccYKp00e.s:748    .text:00000258 $d
     /tmp/ccYKp00e.s:758    .text:00000268 $t
     /tmp/ccYKp00e.s:763    .text:00000268 get_distance
     /tmp/ccYKp00e.s:815    .text:000002b8 $d
     /tmp/ccYKp00e.s:820    .text:000002c0 $t
     /tmp/ccYKp00e.s:825    .text:000002c0 get_speed
     /tmp/ccYKp00e.s:864    .text:000002f0 $d
     /tmp/ccYKp00e.s:868    .text:000002f4 $t
     /tmp/ccYKp00e.s:873    .text:000002f4 get_cadence
     /tmp/ccYKp00e.s:926    .text:00000334 initiate
     /tmp/ccYKp00e.s:1002   .text:00000394 $d
     /tmp/ccYKp00e.s:1019   .text:000003c4 $t
     /tmp/ccYKp00e.s:1024   .text:000003c4 main
     /tmp/ccYKp00e.s:1325   .text:000005dc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
__aeabi_uidivmod
__aeabi_fcmplt
__aeabi_fcmpgt
__aeabi_ui2f
__aeabi_fmul
__aeabi_fdiv
__aeabi_fsub
__aeabi_f2uiz
